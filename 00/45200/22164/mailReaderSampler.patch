Index: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java
===================================================================
--- src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java	(revision 670530)
+++ src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java	(working copy)
@@ -60,6 +60,8 @@
 	private JTextField someMessagesField;
 
 	private JCheckBox deleteBox;
+	
+	private JCheckBox storeMimeMessageBox;
 
 	// Labels
 	private final static String POP3Label = JMeterUtils.getResString("mail_reader_pop3");// $NON-NLS-1$
@@ -128,6 +130,7 @@
 			someMessagesField.setText(mrs.getNumMessagesString());
 		}
 		deleteBox.setSelected(mrs.getDeleteMessages());
+		storeMimeMessageBox.setSelected(mrs.isStoreMimeMessage());
 		super.configure(element);
 	}
 
@@ -175,6 +178,7 @@
 			mrs.setNumMessages(someMessagesField.getText());
 		}
 		mrs.setDeleteMessages(deleteBox.isSelected());
+		mrs.setStoreMimeMessage(storeMimeMessageBox.isSelected());
 	}
 
 	// TODO - fix GUI layout problems
@@ -266,6 +270,9 @@
 
 		deleteBox = new JCheckBox(DeleteLabel);
 		add(deleteBox);
+		
+		storeMimeMessageBox = new JCheckBox("Store MIME message in result");
+		add(storeMimeMessageBox);
 	}
 
 	public void clearGui() {
Index: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
===================================================================
--- src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java	(revision 670530)
+++ src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java	(working copy)
@@ -17,6 +17,7 @@
  */
 package org.apache.jmeter.protocol.mail.sampler;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.util.Properties;
@@ -54,6 +55,7 @@
 	private final static String DELETE = "delete"; // $NON-NLS-1$
 	private final static String NUM_MESSAGES = "num_messages"; // $NON-NLS-1$
 	private static final String NEW_LINE = "\n"; // $NON-NLS-1$
+	private final static String STORE_MIME_MESSAGE = "storeMimeMessage";
 	
 	// Needed by GUI
 	public final static String TYPE_POP3 = "pop3"; // $NON-NLS-1$
@@ -133,57 +135,10 @@
 				child.setSamplerData(cdata.toString());
 				cdata.setLength(0);
 				
-				cdata.append("Date: "); // $NON-NLS-1$
-				cdata.append(message.getSentDate());
-				cdata.append(NEW_LINE);
-
-				cdata.append("To: "); // $NON-NLS-1$
-				Address[] recips = message.getAllRecipients();
-				for (int j = 0; j < recips.length; j++) {
-					cdata.append(recips[j].toString());
-					if (j < recips.length - 1) {
-						cdata.append("; "); // $NON-NLS-1$
-					}
-				}
-				cdata.append(NEW_LINE);
-
-				cdata.append("From: "); // $NON-NLS-1$
-				Address[] from = message.getFrom();
-				for (int j = 0; j < from.length; j++) {
-					cdata.append(from[j].toString());
-					if (j < from.length - 1) {
-						cdata.append("; "); // $NON-NLS-1$
-					}
-				}
-				cdata.append(NEW_LINE);
-
-				cdata.append("Subject: "); // $NON-NLS-1$
-				cdata.append(message.getSubject());
-				cdata.append(NEW_LINE);
-				
-				cdata.append(NEW_LINE);
-				Object content = message.getContent();
-				if (content instanceof MimeMultipart) {
-					MimeMultipart mmp = (MimeMultipart) content;
-					int count = mmp.getCount();
-					cdata.append("Multipart. Count: ");
-					cdata.append(count);
-					cdata.append(NEW_LINE);
-					for (int j=0; j<count;j++){
-						BodyPart bodyPart = mmp.getBodyPart(j);
-						cdata.append("Type: ");
-						cdata.append(bodyPart.getContentType());
-						cdata.append(NEW_LINE);
-						try {
-							cdata.append(bodyPart.getContent());
-						} catch (UnsupportedEncodingException ex){
-							cdata.append(ex.getLocalizedMessage());
-						}
-						cdata.append(NEW_LINE);
-					}
+				if (!isStoreMimeMessage()) {
+					appendMessageData(cdata, message);
 				} else {
-				    cdata.append(content);
-					cdata.append(NEW_LINE);
+					appendMessageAsMime(cdata, message);
 				}
 
 				if (deleteMessages) {
@@ -231,7 +186,70 @@
 		parent.setSuccessful(isOK);
 		return parent;
 	}
+	
+	private void appendMessageData(StringBuffer cdata, Message message)
+			throws MessagingException, IOException {
+		cdata.append("Date: "); // $NON-NLS-1$
+		cdata.append(message.getSentDate());
+		cdata.append(NEW_LINE);
 
+		cdata.append("To: "); // $NON-NLS-1$
+		Address[] recips = message.getAllRecipients();
+		for (int j = 0; j < recips.length; j++) {
+			cdata.append(recips[j].toString());
+			if (j < recips.length - 1) {
+				cdata.append("; "); // $NON-NLS-1$
+			}
+		}
+		cdata.append(NEW_LINE);
+
+		cdata.append("From: "); // $NON-NLS-1$
+		Address[] from = message.getFrom();
+		for (int j = 0; j < from.length; j++) {
+			cdata.append(from[j].toString());
+			if (j < from.length - 1) {
+				cdata.append("; "); // $NON-NLS-1$
+			}
+		}
+		cdata.append(NEW_LINE);
+
+		cdata.append("Subject: "); // $NON-NLS-1$
+		cdata.append(message.getSubject());
+		cdata.append(NEW_LINE);
+		
+		cdata.append(NEW_LINE);
+		Object content = message.getContent();
+		if (content instanceof MimeMultipart) {
+			MimeMultipart mmp = (MimeMultipart) content;
+			int count = mmp.getCount();
+			cdata.append("Multipart. Count: ");
+			cdata.append(count);
+			cdata.append(NEW_LINE);
+			for (int j=0; j<count;j++){
+				BodyPart bodyPart = mmp.getBodyPart(j);
+				cdata.append("Type: ");
+				cdata.append(bodyPart.getContentType());
+				cdata.append(NEW_LINE);
+				try {
+					cdata.append(bodyPart.getContent());
+				} catch (UnsupportedEncodingException ex){
+					cdata.append(ex.getLocalizedMessage());
+				}
+				cdata.append(NEW_LINE);
+			}
+		} else {
+		    cdata.append(content);
+			cdata.append(NEW_LINE);
+		}
+	}
+	
+	private void appendMessageAsMime(StringBuffer cdata, Message message)
+			throws MessagingException, IOException {
+		ByteArrayOutputStream bout = new ByteArrayOutputStream();
+		message.writeTo(bout);
+		cdata.append(bout);
+	}
+
 	/**
 	 * Sets the type of protocol to use when talking with the remote mail
 	 * server. Either MailReaderSampler.TYPE_IMAP[S] or
@@ -362,4 +380,21 @@
 	public boolean getDeleteMessages() {
 		return getPropertyAsBoolean(DELETE);
 	}
+	
+	/**
+	 * @return Whether or not to store the retrieved message as MIME message in
+	 *         the sample result
+	 */
+	public boolean isStoreMimeMessage() {
+		return getPropertyAsBoolean(STORE_MIME_MESSAGE);
+	}
+
+	/**
+	 * @param storeMimeMessage
+	 *            Whether or not to store the retrieved message as MIME message in the
+	 *            sample result
+	 */
+	public void setStoreMimeMessage(boolean storeMimeMessage) {
+		setProperty(new BooleanProperty(STORE_MIME_MESSAGE, storeMimeMessage));
+	}
 }
