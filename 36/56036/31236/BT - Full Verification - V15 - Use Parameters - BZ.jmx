<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Bridgetown Project API Test. Demo: Create, Delete, Update, Filtering, Pagination" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVER" elementType="Argument">
            <stringProp name="Argument.name">SERVER</stringProp>
            <stringProp name="Argument.value">${__P(clp_host_name,crete)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(clp_port,8380)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">C:\Work\Testing\AssetHub\JMeter\Learning\Bridgetown\jks_Test_Name47.jtl</stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1389298714000</longProp>
        <longProp name="ThreadGroup.end_time">1389298714000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Testing for Browser" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Generate random UUID into variable v_Random_UUID" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="v_Random_UUID" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID1" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID1</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID2" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID2</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID3" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID3</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID4" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID4</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID5" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID5</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID6" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID6</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID501" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID501</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID502" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID502</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID503" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID503</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID504" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID504</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID505" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID505</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID506" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID506</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID507" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID507</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID508" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID508</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID509" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID509</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID510" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID510</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="v_Random_UUID511" elementType="Argument">
                <stringProp name="Argument.name">v_Random_UUID511</stringProp>
                <stringProp name="Argument.value">${__UUID}</stringProp>
                <stringProp name="Argument.desc">Generate random UUID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC-005. Verify default page size (currently 10)" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2041572916">v_Test_Case</stringProp>
                <stringProp name="-1764259113">v_How_Many</stringProp>
                <stringProp name="-440837872">v_Start_From</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-624670580">
                  <stringProp name="-797907844">TC-0592</stringProp>
                  <stringProp name="1568">11</stringProp>
                  <stringProp name="52470">501</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop to create test EQ records" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${v_How_Many}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">${v_Start_From}</stringProp>
                <stringProp name="CounterConfig.end">100000</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">v_Create_EQ_Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create test EQ" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;name&quot;:&quot;${v_Test_Case}-EQ-0${v_Create_EQ_Counter}&quot;,&#xd;
        &quot;erpCode&quot;:&quot;erpCode=${__V(v_Random_UUID${v_Create_EQ_Counter})}&quot;,&#xd;
        &quot;type&quot;:&quot;type=${__V(v_Random_UUID${v_Create_EQ_Counter})}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/Bridgetown/api/asset</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract ID of created EQ" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">v_EQ${v_Create_EQ_Counter}</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([^&quot;]+)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
