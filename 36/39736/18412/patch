141a142
> 			<th>Throughput</th>
145a147,148
> 			<xsl:variable name="startTime" select="(/testResults/*)[1]/@ts" />
> 			<xsl:variable name="finalTime" select="(/testResults/*)[position()=last()]/@ts + (/testResults/*)[position()=last()]/@t" />
151a155
> 			<xsl:variable name="allThroughput" select="1000 * $allCount div ($finalTime - $startTime)" />
183a188,192
> 				<xsl:call-template name="display-throughput">
> 					<xsl:with-param name="value" select="$allThroughput" />
> 				</xsl:call-template>
> 			</td>
> 			<td>
205a215
> 			<th>Throughput</th>
210a221,222
> 			<xsl:variable name="start" select="(../*[@lb = current()/@lb])[1]/@ts" />
> 			<xsl:variable name="final" select="(../*[@lb = current()/@lb])[position()=last()]/@ts + (../*[@lb = current()/@lb])[position()=last()]/@t" />
217a230
> 			<xsl:variable name="throughput" select="1000 * $count div ($final - $start)" />
260a274,278
> 				<xsl:call-template name="display-throughput">
> 					<xsl:with-param name="value" select="$throughput" />
> 				</xsl:call-template>
> 				</td>
> 				<td>
352,363c370,396
< 	<xsl:param name="nodes" select="/.." />
< 	<xsl:choose>
< 		<xsl:when test="not($nodes)">NaN</xsl:when>
< 		<xsl:otherwise>
< 			<xsl:for-each select="$nodes">
< 				<xsl:sort data-type="number" />
< 				<xsl:if test="position() = 1">
< 					<xsl:value-of select="number(.)" />
< 				</xsl:if>
< 			</xsl:for-each>
< 		</xsl:otherwise>
< 	</xsl:choose>
---
>   <xsl:param name="nodes" select="/.."/>
>   <xsl:param name="min"/>
>   <xsl:variable name="count" select="count($nodes)"/>
>   <xsl:variable name="aNode" select="$nodes[ceiling($count div 2)]"/>
>   <xsl:choose>
>     <xsl:when test="not($count)">
>       <xsl:value-of select="number($min)"/>
>     </xsl:when>
>     <xsl:when test="number($aNode) != number($aNode)">
>       <xsl:value-of select="number($aNode)"/>
>     </xsl:when>
>     <xsl:otherwise>
>       <xsl:call-template name="min">
>         <xsl:with-param name="nodes" select="$nodes[not(. >= number($aNode))]"/>
>         <xsl:with-param name="min">
>           <xsl:choose>
>             <xsl:when test="not($min) or $aNode &lt; $min">
>               <xsl:value-of select="$aNode"/>
>             </xsl:when>
>             <xsl:otherwise>
>               <xsl:value-of select="$min"/>
>             </xsl:otherwise>
>           </xsl:choose>
>         </xsl:with-param>
>       </xsl:call-template>
>     </xsl:otherwise>
>   </xsl:choose>
367,378c400,431
< 	<xsl:param name="nodes" select="/.." />
< 	<xsl:choose>
< 		<xsl:when test="not($nodes)">NaN</xsl:when>
< 		<xsl:otherwise>
< 			<xsl:for-each select="$nodes">
< 				<xsl:sort data-type="number" order="descending" />
< 				<xsl:if test="position() = 1">
< 					<xsl:value-of select="number(.)" />
< 				</xsl:if>
< 			</xsl:for-each>
< 		</xsl:otherwise>
< 	</xsl:choose>
---
>      <xsl:param name="nodes" select="/.."/>
>      <xsl:param name="max"/>
>   <xsl:variable name="count" select="count($nodes)"/>
>   <xsl:variable name="aNode" select="$nodes[ceiling($count div 2)]"/>
>   <xsl:choose>
>     <xsl:when test="not($count)">
>       <xsl:value-of select="number($max)"/>
>     </xsl:when>
>     <xsl:when test="number($aNode) != number($aNode)">
>       <xsl:value-of select="number($aNode)"/>
>     </xsl:when>
>     <xsl:otherwise>
>       <xsl:call-template name="max">
>         <xsl:with-param name="nodes" select="$nodes[not(. &lt;= number($aNode))]"/>
>         <xsl:with-param name="max">
>           <xsl:choose>
>             <xsl:when test="not($max) or $aNode > $max">
>               <xsl:value-of select="$aNode"/>
>             </xsl:when>
>             <xsl:otherwise>
>               <xsl:value-of select="$max"/>
>             </xsl:otherwise>
>           </xsl:choose>
>         </xsl:with-param>
>       </xsl:call-template>
>     </xsl:otherwise>
>   </xsl:choose>
> </xsl:template>
> 
> <xsl:template name="display-throughput">
> 	<xsl:param name="value" />
> 	<xsl:value-of select="format-number($value,'0.0 requests/s')" />
