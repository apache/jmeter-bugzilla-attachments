Index: SummaryReport.java
===================================================================
--- SummaryReport.java	(revision 1180092)
+++ SummaryReport.java	(working copy)
@@ -28,6 +28,8 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import javax.swing.BorderFactory;
+import javax.swing.Box;
 import javax.swing.BoxLayout;
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
@@ -69,89 +71,92 @@
 
     private static final String USE_GROUP_NAME = "useGroupName"; //$NON-NLS-1$
 
-    private static final String SAVE_HEADERS   = "saveHeaders"; //$NON-NLS-1$
+    private static final String SAVE_HEADERS = "saveHeaders"; //$NON-NLS-1$
 
     private static final String[] COLUMNS = {
-            "sampler_label",               //$NON-NLS-1$
-            "aggregate_report_count",      //$NON-NLS-1$
-            "average",                     //$NON-NLS-1$
-            "aggregate_report_min",        //$NON-NLS-1$
-            "aggregate_report_max",        //$NON-NLS-1$
-            "aggregate_report_stddev",     //$NON-NLS-1$
-            "aggregate_report_error%",     //$NON-NLS-1$
-            "aggregate_report_rate",       //$NON-NLS-1$
-            "aggregate_report_bandwidth",  //$NON-NLS-1$
-            "average_bytes",               //$NON-NLS-1$
-            };
+        "sampler_label",               //$NON-NLS-1$
+            "aggregate_report_count", //$NON-NLS-1$
+            "average", //$NON-NLS-1$
+            "aggregate_report_min", //$NON-NLS-1$
+            "aggregate_report_max", //$NON-NLS-1$
+            "aggregate_report_stddev", //$NON-NLS-1$
+            "aggregate_report_error%", //$NON-NLS-1$
+            "aggregate_report_rate", //$NON-NLS-1$
+            "aggregate_report_bandwidth", //$NON-NLS-1$
+            "average_bytes", //$NON-NLS-1$
+    };
 
-    private final String TOTAL_ROW_LABEL
-        = JMeterUtils.getResString("aggregate_report_total_label");  //$NON-NLS-1$
+    private final String TOTAL_ROW_LABEL 
+    	= JMeterUtils.getResString("aggregate_report_total_label"); //$NON-NLS-1$
 
     private JTable myJTable;
 
     private JScrollPane myScrollPane;
 
+    private final JCheckBox myAutoscroll = 
+            new JCheckBox(JMeterUtils.getResString("view_results_autoscroll"));
+
     private final JButton saveTable =
-        new JButton(JMeterUtils.getResString("aggregate_graph_save_table"));            //$NON-NLS-1$
+            new JButton(JMeterUtils.getResString("aggregate_graph_save_table")); //$NON-NLS-1$
 
     private final JCheckBox saveHeaders = // should header be saved with the data?
-        new JCheckBox(JMeterUtils.getResString("aggregate_graph_save_table_header"),true);    //$NON-NLS-1$
+    new JCheckBox(JMeterUtils.getResString("aggregate_graph_save_table_header"), true); //$NON-NLS-1$
 
     private final JCheckBox useGroupName =
-        new JCheckBox(JMeterUtils.getResString("aggregate_graph_use_group_name"));            //$NON-NLS-1$
+            new JCheckBox(JMeterUtils.getResString("aggregate_graph_use_group_name")); //$NON-NLS-1$
 
     private transient ObjectTableModel model;
 
     private final Map<String, Calculator> tableRows =
-        new ConcurrentHashMap<String, Calculator>();
+            new ConcurrentHashMap<String, Calculator>();
 
     // Column renderers
     private static final TableCellRenderer[] RENDERERS =
-        new TableCellRenderer[]{
-            null, // Label
-            null, // count
-            null, // Mean
-            null, // Min
-            null, // Max
-            new NumberRenderer("#0.00"), // Std Dev.
-            new NumberRenderer("#0.00%"), // Error %age
-            new RateRenderer("#.0"),      // Throughpur
-            new NumberRenderer("#0.00"),  // kB/sec
-            new NumberRenderer("#.0"),    // avg. pageSize
-        };
+            new TableCellRenderer[] {
+                    null, // Label
+                    null, // count
+                    null, // Mean
+                    null, // Min
+                    null, // Max
+                    new NumberRenderer("#0.00"), // Std Dev.
+                    new NumberRenderer("#0.00%"), // Error %age
+                    new RateRenderer("#.0"), // Throughpur
+                    new NumberRenderer("#0.00"), // kB/sec
+                    new NumberRenderer("#.0"), // avg. pageSize
+            };
 
     public SummaryReport() {
         super();
         model = new ObjectTableModel(COLUMNS,
                 Calculator.class,// All rows have this class
                 new Functor[] {
-                    new Functor("getLabel"),              //$NON-NLS-1$
-                    new Functor("getCount"),              //$NON-NLS-1$
-                    new Functor("getMeanAsNumber"),       //$NON-NLS-1$
-                    new Functor("getMin"),                //$NON-NLS-1$
-                    new Functor("getMax"),                //$NON-NLS-1$
-                    new Functor("getStandardDeviation"),  //$NON-NLS-1$
-                    new Functor("getErrorPercentage"),    //$NON-NLS-1$
-                    new Functor("getRate"),               //$NON-NLS-1$
-                    new Functor("getKBPerSecond"),        //$NON-NLS-1$
-                    new Functor("getAvgPageBytes"),       //$NON-NLS-1$
+                        new Functor("getLabel"), //$NON-NLS-1$
+                        new Functor("getCount"), //$NON-NLS-1$
+                        new Functor("getMeanAsNumber"), //$NON-NLS-1$
+                        new Functor("getMin"), //$NON-NLS-1$
+                        new Functor("getMax"), //$NON-NLS-1$
+                        new Functor("getStandardDeviation"), //$NON-NLS-1$
+                        new Functor("getErrorPercentage"), //$NON-NLS-1$
+                        new Functor("getRate"), //$NON-NLS-1$
+                        new Functor("getKBPerSecond"), //$NON-NLS-1$
+                        new Functor("getAvgPageBytes"), //$NON-NLS-1$
                 },
-                new Functor[] { null, null, null, null, null, null, null, null , null, null },
+                new Functor[] { null, null, null, null, null, null, null, null, null, null },
                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class,
-                              String.class, String.class, String.class, String.class, String.class });
+                        String.class, String.class, String.class, String.class, String.class });
         clearData();
         init();
     }
 
     /** @deprecated - only for use in testing */
     @Deprecated
-    public static boolean testFunctors(){
+    public static boolean testFunctors() {
         SummaryReport instance = new SummaryReport();
-        return instance.model.checkFunctors(null,instance.getClass());
+        return instance.model.checkFunctors(null, instance.getClass());
     }
 
     public String getLabelResource() {
-        return "summary_report";  //$NON-NLS-1$
+        return "summary_report"; //$NON-NLS-1$
     }
 
     public void add(SampleResult res) {
@@ -168,14 +173,17 @@
         /*
          * Synch is needed because multiple threads can update the counts.
          */
-        synchronized(row) {
+        synchronized (row) {
             row.addSample(res);
         }
         Calculator tot = tableRows.get(TOTAL_ROW_LABEL);
-        synchronized(tot) {
+        synchronized (tot) {
             tot.addSample(res);
         }
         model.fireTableDataChanged();
+        if (myAutoscroll.isSelected()) {
+            myJTable.scrollRectToVisible(myJTable.getCellRect(myJTable.getRowCount() - 1, 0, true));
+        }
     }
 
     /**
@@ -213,10 +221,15 @@
         this.add(mainPanel, BorderLayout.NORTH);
         this.add(myScrollPane, BorderLayout.CENTER);
         saveTable.addActionListener(this);
-        JPanel opts = new JPanel();
-        opts.add(useGroupName, BorderLayout.WEST);
-        opts.add(saveTable, BorderLayout.CENTER);
-        opts.add(saveHeaders, BorderLayout.EAST);
+        Box opts = Box.createHorizontalBox();
+        opts.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        opts.add(myAutoscroll);
+        opts.add(Box.createRigidArea(new Dimension(5, 5)));
+        opts.add(useGroupName);
+        opts.add(Box.createHorizontalGlue());
+        opts.add(saveTable);
+        opts.add(Box.createRigidArea(new Dimension(5, 5)));
+        opts.add(saveHeaders);
         this.add(opts,BorderLayout.SOUTH);
     }
 
@@ -243,7 +256,7 @@
             FileWriter writer = null;
             try {
                 writer = new FileWriter(chooser.getSelectedFile());
-                CSVSaveService.saveCSVStats(model,writer, saveHeaders.isSelected());
+                CSVSaveService.saveCSVStats(model, writer, saveHeaders.isSelected());
             } catch (FileNotFoundException e) {
                 log.warn(e.getMessage());
             } catch (IOException e) {
