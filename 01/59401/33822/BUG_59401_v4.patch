Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java	(revision 1740902)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java	(working copy)
@@ -31,9 +31,12 @@
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
 import javax.security.auth.Subject;
@@ -59,6 +62,7 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.config.CookieSpecs;
+import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
@@ -185,6 +189,42 @@
         }
     };
 
+    private static final String JMETER_RESPONSE_BACKUP_HEADERS = "__jmeter.RESPONSE_BACKUP_HEADERS";
+    
+    private static final Set<String> HEADERS_TO_SAVE = new HashSet<>(
+            Arrays.asList(new String[]{
+                    "content-length",
+                    "content-encoding",
+                    "content-md5"
+            }));
+    
+    private static final HttpResponseInterceptor RESPONSE_CONTENT_ENCODING = new ResponseContentEncoding() {
+        @Override
+        public void process(HttpResponse response, HttpContext context)
+                throws HttpException, IOException {
+            final HttpEntity entity = response.getEntity();
+            final HttpClientContext clientContext = HttpClientContext.adapt(context);
+            final RequestConfig requestConfig = clientContext.getRequestConfig();
+            context.removeAttribute(JMETER_RESPONSE_BACKUP_HEADERS);
+            if (requestConfig.isContentCompressionEnabled() && entity != null && entity.getContentLength() != 0) {
+                final Header ceheader = entity.getContentEncoding();
+                if (ceheader != null) {
+                    ArrayList<Header> headersToSave = new ArrayList<>(3);
+                    for (Header hdr : response.getAllHeaders()) {
+                        final String name = hdr.getName();
+                        if (HEADERS_TO_SAVE.contains(name.toLowerCase())) {
+                            headersToSave.add(hdr);                                
+                        }
+                    }
+                    if(!headersToSave.isEmpty()) {
+                        context.setAttribute(JMETER_RESPONSE_BACKUP_HEADERS, headersToSave);
+                    }
+                }
+            }
+            super.process(response, clientContext);
+        }
+    };
+    
     /**
      * 1 HttpClient instance per combination of (HttpClient,HttpClientKey)
      */
@@ -357,7 +397,7 @@
             res.setResponseMessage(statusLine.getReasonPhrase());
             res.setSuccessful(isSuccessCode(statusCode));
 
-            res.setResponseHeaders(getResponseHeaders(httpResponse));
+            res.setResponseHeaders(getResponseHeaders(httpResponse, localContext));
             if (res.isRedirect()) {
                 final Header headerLocation = httpResponse.getLastHeader(HTTPConstants.HEADER_LOCATION);
                 if (headerLocation == null) { // HTTP protocol violation, but avoids NPE
@@ -750,7 +790,7 @@
             }
             // see https://issues.apache.org/jira/browse/HTTPCORE-397
             ((AbstractHttpClient) httpClient).setReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE);
-            ((AbstractHttpClient) httpClient).addResponseInterceptor(new ResponseContentEncoding());
+            ((AbstractHttpClient) httpClient).addResponseInterceptor(RESPONSE_CONTENT_ENCODING);
             ((AbstractHttpClient) httpClient).addResponseInterceptor(METRICS_SAVER); // HACK
             ((AbstractHttpClient) httpClient).addRequestInterceptor(METRICS_RESETTER); 
             
@@ -894,20 +934,31 @@
      *
      * @param response
      *            containing the headers
+     * @param localContext {@link HttpContext}
      * @return string containing the headers, one per line
      */
-    private String getResponseHeaders(HttpResponse response) {
+    private String getResponseHeaders(HttpResponse response, HttpContext localContext) {
         StringBuilder headerBuf = new StringBuilder();
-        Header[] rh = response.getAllHeaders();
         headerBuf.append(response.getStatusLine());// header[0] is not the status line...
         headerBuf.append("\n"); // $NON-NLS-1$
 
+        Header[] rh = response.getAllHeaders();
         for (Header responseHeader : rh) {
             headerBuf.append(responseHeader.getName());
             headerBuf.append(": "); // $NON-NLS-1$
             headerBuf.append(responseHeader.getValue());
             headerBuf.append("\n"); // $NON-NLS-1$
         }
+        List<Header> backupHeaders = (List<Header>) localContext.getAttribute(JMETER_RESPONSE_BACKUP_HEADERS);
+        if(backupHeaders != null) {
+            for (Header responseHeader : backupHeaders) {
+                headerBuf.append(responseHeader.getName());
+                headerBuf.append(": "); // $NON-NLS-1$
+                headerBuf.append(responseHeader.getValue());
+                headerBuf.append("\n"); // $NON-NLS-1$
+            }
+        }
+
         return headerBuf.toString();
     }
 
