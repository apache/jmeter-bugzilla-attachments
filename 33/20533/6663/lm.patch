Index: LoggingManager.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/jorphan/org/apache/jorphan/logging/LoggingManager.java,v
retrieving revision 1.2
diff -u -r1.2 LoggingManager.java
--- LoggingManager.java	4 Jun 2003 14:31:44 -0000	1.2
+++ LoggingManager.java	6 Jun 2003 00:32:26 -0000
@@ -58,10 +58,10 @@
 import java.io.FileWriter;
 import java.io.PrintWriter;
 import java.io.Writer;
-import java.util.HashMap;
 import java.util.Iterator;
-import java.util.Map;
+import java.util.Properties;
 
+import org.apache.jorphan.util.ClassContext;
 import org.apache.log.Hierarchy;
 import org.apache.log.LogTarget;
 import org.apache.log.Logger;
@@ -78,88 +78,160 @@
 public class LoggingManager
 {
 	private static PatternFormatter format =
-		new PatternFormatter("%{time:MM/dd/yyyy h:mm:ss a} %{priority} - %{category}: %{message} %{throwable}\n");
-	private static LogTarget target;
+		new PatternFormatter("%{time:MM/dd/yyyy h:mm:ss a} %5.5{priority} - %{category}: %{message} %{throwable}\n");
+	private static LogTarget target; // used to hold the default logging target
 	public final static String LOG_FILE = "log_file";
 	public final static String LOG_PRIORITY = "log_level";
 	private static LoggingManager logManager = null;
 	
-	static
-	{
-		Map initProps = new HashMap();
-		initProps.put("log_level.jorphan","ERROR");
-		initializeLogging(initProps);
-	}
-	
 	private LoggingManager()
 	{
-		target = new NullOutputLogTarget();
+		target = new NullOutputLogTarget();// ensure that target is valid initially
 	}
 	public static LoggingManager getLogManager()
 	{
 		return logManager;
 	}
-	public static void initializeLogging(Map properties)
+		
+	/**
+	 * Initialise the logging system from the Jmeter properties.
+	 * Logkit loggers inherit from their parents.
+	 * 
+	 * Normally the jmeter properties file defines a single log file, so
+	 * set this as the default from "log_file", default "jmeter.log"
+	 * The default priority is set from "log_level", with a default of INFO
+	 * 
+	 */
+	public static void initializeLogging(Properties properties)
 	{
 		if (logManager == null)
 		{
 			logManager = new LoggingManager();
 		}
-		setLoggingLevels(properties,(String)properties.get(LOG_FILE));
+
+		// Set the top-level defaults
+		setTarget(makeWriter(properties.getProperty(LOG_FILE,"jmeter.log"),LOG_FILE));
+		setPriority(properties.getProperty(LOG_PRIORITY,"INFO"));
+		
+		setLoggingLevels(properties); // now set the individual categories (if any)
 	}
-	private static void setLoggingLevels(Map appProperties,String logFile)
-	{
-		WriterTarget tempTarget = null;
+	
+	/*
+	 * Helper method to handle log target creation
+	 * If there is an error creating the file, then it uses System.out
+	 */
+	private static Writer makeWriter(String logFile, String propName){
+		Writer wt;
 		try
 		{
-			tempTarget = new WriterTarget(new FileWriter(logFile),format);
+			wt = new FileWriter(logFile);
 		}
 		catch(Exception e){
-			target = new WriterTarget(new PrintWriter(System.out),format);
+			System.out.println(propName + "=" + logFile + " "+e.toString());
+			System.out.println("["+ propName + "-> System.out]");
+			wt = new PrintWriter(System.out);
 		}
-		Iterator names = appProperties.keySet().iterator();
-		while (names.hasNext())
+		return wt;
+    }
+    
+	/*
+	 * Handle LOG_PRIORITY.category=priority and LOG_FILE.category=file_name properties
+	 * If the prefix is detected, then remove it to get the category
+	 */
+	private static void setLoggingLevels(Properties appProperties)
+	{
+		Iterator props = appProperties.keySet().iterator();
+		while (props.hasNext())
 		{
-			String prop = (String) names.next();
-			if (prop.startsWith(LOG_PRIORITY))
+			String prop = (String) props.next();
+			if (prop.startsWith(LOG_PRIORITY+".")) // don't match the empty category
 			{
-				String name = prop.substring(LOG_PRIORITY.length() + 1);
-				logManager.setPriority(
-					Priority.getPriorityForName((String) appProperties.get(prop)),
-					name);
-				if(tempTarget != null)
-				{
-					logManager.setTarget(tempTarget,name);
-				}
-				else
-				{
-					logManager.setTarget(target,name);
-				}
+				String category = prop.substring(LOG_PRIORITY.length() + 1);
+				setPriority(appProperties.getProperty(prop),category);
+			}
+			if (prop.startsWith(LOG_FILE+"."))
+			{
+				String category = prop.substring(LOG_FILE.length() + 1);
+				String file = appProperties.getProperty(prop);
+				setTarget(new WriterTarget(makeWriter(file,prop),format),category);
 			}
 		}
 	}
+	
+	private final static String PACKAGE_PREFIX = "org.apache.";
+	/*
+	 * Stack contains the follow when the context is obtained:
+	 * 0 - getCallerClassNameAt()
+	 * 1 - this method
+	 * 2 - getLoggerForClass
+	 * 
+	 */
+	private static String getCallerClassName(){
+		String name = ClassContext.getCallerClassNameAt(3);
+		if (name.startsWith(PACKAGE_PREFIX)) {// remove the package prefix
+			name=name.substring(PACKAGE_PREFIX.length());
+		}
+		return name;
+	}
+	/**
+	 * Get the Logger for a class - no argument needed because the calling class name
+	 * is derived automatically from the call stack
+	 * 
+	 * @return Logger
+	 */
+	public static Logger getLoggerForClass()
+	{
+		String className = getCallerClassName();
+		return Hierarchy.getDefaultHierarchy().getLoggerFor(className);
+	}
+	/**
+	 * 
+	 * @param ignored - String
+	 * @deprecated - this version is temporary; use the no-argument version instead
+	 * @return
+	 */
+	public static Logger getLoggerForClass(String unused)
+	{
+		String className = getCallerClassName();
+		return Hierarchy.getDefaultHierarchy().getLoggerFor(className);
+	}
 	public static Logger getLoggerFor(String category)
 	{
 		return Hierarchy.getDefaultHierarchy().getLoggerFor(category);
 	}
-    
-	public void setPriority(Priority p, String category)
+	
+	public static void setPriority(String p, String category)
+	{
+		setPriority(Priority.getPriorityForName(p),category);
+	}
+	public static void setPriority(Priority p, String category)
 	{
 		Hierarchy.getDefaultHierarchy().getLoggerFor(category).setPriority(p);
 	}
-	
-	public void setTarget(LogTarget target,String category)
+	public static void setPriority(String p)
+	{
+		setPriority(Priority.getPriorityForName(p));
+	}
+	public static void setPriority(Priority p)
+	{
+		Hierarchy.getDefaultHierarchy().setDefaultPriority(p);
+	}
+	public static void setTarget(LogTarget target,String category)
 	{
-		Logger logger = getLoggerFor(category);
+		Logger logger = Hierarchy.getDefaultHierarchy().getLoggerFor(category); 
 		logger.setLogTargets(new LogTarget[]{target});
 	}
-	public void setTarget(Writer targetFile)
+	/**
+	 * Sets the default log target from the parameter
+	 * The existing target is first closed if necessary
+	 * 
+	 * @param targetFile (Writer)
+	 */
+	public static void setTarget(Writer targetFile)
 	{
 		if (target == null)
 		{
 			target = new WriterTarget(targetFile, format);
-			Hierarchy.getDefaultHierarchy().setDefaultLogTarget(
-				new WriterTarget(targetFile, format));
 		}
 		else
 		{
@@ -168,8 +240,7 @@
 				((WriterTarget)target).close();
 			}
 			target = new WriterTarget(targetFile, format);
-			Hierarchy.getDefaultHierarchy().setDefaultLogTarget(
-				new WriterTarget(targetFile, format));
 		}
+		Hierarchy.getDefaultHierarchy().setDefaultLogTarget(target);
 	}
 }
