<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2-SNAPSHOT.20190712">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVERS" elementType="Argument">
            <stringProp name="Argument.name">SERVERS</stringProp>
            <stringProp name="Argument.value">${__P(cb.servers,127.0.0.1)} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(cb.threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(cb.duration,600)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">${__P(cb.rampup,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULTS_FILE" elementType="Argument">
            <stringProp name="Argument.name">RESULTS_FILE</stringProp>
            <stringProp name="Argument.value">${__P(cb.resultsFile,Baseline)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESULTS_PATH" elementType="Argument">
            <stringProp name="Argument.name">RESULTS_PATH</stringProp>
            <stringProp name="Argument.value">${__P(cb.resultpath,results)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JVMS" elementType="Argument">
            <stringProp name="Argument.name">JVMS</stringProp>
            <stringProp name="Argument.value">${__P(cb.jvms,4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BUCKET" elementType="Argument">
            <stringProp name="Argument.name">BUCKET</stringProp>
            <stringProp name="Argument.value">${__P(cb.bucket,TEST_BUCKET)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(cb.password,Password@123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KEYPREFIX" elementType="Argument">
            <stringProp name="Argument.name">KEYPREFIX</stringProp>
            <stringProp name="Argument.value">${__P(cb.keyprefix,jmeter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXPIRY" elementType="Argument">
            <stringProp name="Argument.name">EXPIRY</stringProp>
            <stringProp name="Argument.value">${__P(cb.expiry,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">TIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(cb.timeout,5000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONNECTTIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">CONNECTTIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(cb.connecttimeout,5000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KVTIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">KVTIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(cb.kvtimeout,2500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KVENDPOINTS" elementType="Argument">
            <stringProp name="Argument.name">KVENDPOINTS</stringProp>
            <stringProp name="Argument.value">${__P(cb.kvendpoints,4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IOPOOLSIZE" elementType="Argument">
            <stringProp name="Argument.name">IOPOOLSIZE</stringProp>
            <stringProp name="Argument.value">${__P(cb.iopoolsize,4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REQBUFFSIZE" elementType="Argument">
            <stringProp name="Argument.name">REQBUFFSIZE</stringProp>
            <stringProp name="Argument.value">${__P(cb.reqbuffsize,2097152)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESBUFFSIZE" elementType="Argument">
            <stringProp name="Argument.name">RESBUFFSIZE</stringProp>
            <stringProp name="Argument.value">${__P(cb.resbuffsize,2097152)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CBDEBUG" elementType="Argument">
            <stringProp name="Argument.name">CBDEBUG</stringProp>
            <stringProp name="Argument.value">${__P(cb.debug,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">lib</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RESULTSFILE" elementType="Argument">
            <stringProp name="Argument.name">RESULTSFILE</stringProp>
            <stringProp name="Argument.value">${RESULTS_PATH}/${RESULTS_FILE}_${HOSTNAME}_Threads${THREADS}_Duration${DURATION}_JVMS${JVMS}_${__time(yyyyMMddHHmm)}.jtl</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ERRORS" elementType="Argument">
            <stringProp name="Argument.name">ERRORS</stringProp>
            <stringProp name="Argument.value">${RESULTS_PATH}/${RESULTS_FILE}_${HOSTNAME}_Threads${THREADS}_Duration${DURATION}_JVMS${JVMS}_${__time(yyyyMMddHHmm)}_errors.xml</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="myValue" elementType="Argument">
            <stringProp name="Argument.name">myValue</stringProp>
            <stringProp name="Argument.value">${__RandomString(2500,&quot;abcdefghijklmnopqrstuvwxyz1234567890&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="InitializeCBPool" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.env.CouchbaseEnvironment;
import com.couchbase.client.java.env.DefaultCouchbaseEnvironment;

int kvendpoints = Integer.parseInt(vars.get(&quot;KVENDPOINTS&quot;));
int iopoolsize = Integer.parseInt(vars.get(&quot;IOPOOLSIZE&quot;));
int reqbuffsize = Integer.parseInt(vars.get(&quot;REQBUFFSIZE&quot;));
int resbuffsize = Integer.parseInt(vars.get(&quot;RESBUFFSIZE&quot;));
int connecttimeout = Integer.parseInt(vars.get(&quot;CONNECTTIMEOUT&quot;));
int kvtimeout = Integer.parseInt(vars.get(&quot;KVTIMEOUT&quot;));
String bucketName = vars.get(&quot;BUCKET&quot;);
String pass = vars.get(&quot;PASSWORD&quot;);

List&lt;String&gt; nodes= new ArrayList&lt;String&gt;();
String servers = vars.get(&quot;SERVERS&quot;);
String[] arrServers=servers.split(&quot;,&quot;); 
    
for(String server: arrServers) {
  nodes.add(server);
  }

CouchbaseEnvironment env = DefaultCouchbaseEnvironment.builder().kvEndpoints(kvendpoints).connectTimeout(connecttimeout).kvTimeout(kvtimeout).ioPoolSize(iopoolsize).requestBufferSize(reqbuffsize).responseBufferSize(resbuffsize).build();

//log.info(&quot;Environemnt Details:::&quot; + env)
Cluster cluster = CouchbaseCluster.create(env, nodes);
Thread.sleep(5000)

if(cluster != null){
	bucket = cluster.openBucket(bucketName, pass);
}

log.info(&quot;Bucket object Details:::&quot; + bucket)
props.put(&quot;objBucket&quot;, bucket)
//vars.putObject(&quot;objBucket&quot;, bucket)
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StringDocument" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get-non-existent" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.util.concurrent.TimeUnit;
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.document.StringDocument;


//Creating java object and then type casting to Couchbase Bucket
Object obj = props.get(&quot;objBucket&quot;);
Bucket bucket = (Bucket) obj;
vars.putObject(&quot;bucketObj&quot;, bucket)

StringDocument cbDocument = null
Random rnd = new Random()
String randNumKey= rnd.nextInt(999999999).toString()
vars.put(&quot;myKey&quot;, randNumKey)
String key = vars.get(&quot;KEYPREFIX&quot;)+&quot;_&quot;+randNumKey
String value = vars.get(&quot;myValue&quot;)
String method = vars.get(&quot;METHOD&quot;)
long expiry = Long.parseLong(vars.get(&quot;EXPIRY&quot;))
long timeout = Long.parseLong(vars.get(&quot;TIMEOUT&quot;))

boolean useTimeout = timeout &gt; 0;

// Resetting the stop watch to to set current time as startTime.
SampleResult.setStartTime(System.currentTimeMillis());

try{
	long startTime = System.nanoTime();
	cbDocument = StringDocument.create(key);
		
	if(useTimeout){
		cbDocument = bucket.get(cbDocument,timeout, TimeUnit.MILLISECONDS)
		}else {
			cbDocument = bucket.get(cbDocument)
		}
		
	long endTime = System.nanoTime();

	if(cbDocument == null) {
		SampleResult.setResponseCode(&quot;204&quot;)
	  	SampleResult.setSuccessful(true)
	     SampleResult.setResponseMessage(&quot;Success&quot;)

	}else {
		
		String responseData = &quot;elapseTime: &quot;+ (endTime-startTime)+1 +&quot;\n&quot;+&quot;key: &quot;+key+&quot;\n&quot;+&quot;value: &quot;+cbDocument.content();
		SampleResult.setResponseData(responseData.getBytes());
		SampleResult.setResponseCodeOK();
		SampleResult.setBytes(responseData.length());

	}
}catch (Exception e) {
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Success&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; +e)
}

</stringProp>
        </JSR223Sampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getStatus" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">getStatus</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="NotFound" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${getStatus}&quot; == &quot;204&quot;,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="upsert" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.concurrent.TimeUnit;
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.document.StringDocument;


Bucket bucket = vars.getObject(&quot;bucketObj&quot;)

StringDocument cbDocument = null
Random rnd = new Random()
String key = vars.get(&quot;KEYPREFIX&quot;)+&quot;_&quot;+vars.get(&quot;myKey&quot;)
String value = vars.get(&quot;myValue&quot;)
String method = vars.get(&quot;METHOD&quot;)
int expiry = Integer.parseInt(vars.get(&quot;EXPIRY&quot;))
long timeout = Long.parseLong(vars.get(&quot;TIMEOUT&quot;))

boolean useTimeout = timeout &gt; 0;

// Resetting the stop watch to to set current time as startTime.
SampleResult.setStartTime(System.currentTimeMillis());

try{
	long startTime = System.nanoTime();
	cbDocument = StringDocument.create(key, expiry, value);
	
	if(useTimeout){
		cbDocument = bucket.upsert(cbDocument, timeout, TimeUnit.MILLISECONDS);
		}else {
			cbDocument = bucket.upsert(cbDocument);
		}
	long endTime = System.nanoTime();

	if(cbDocument == null) {
		SampleResult.setResponseCode(&quot;204&quot;)
	  	SampleResult.setSuccessful(true)
	     SampleResult.setResponseMessage(&quot;Success&quot;)

	}else {
		
		String responseData = &quot;elapseTime: &quot;+ (endTime-startTime)+1 +&quot;\n&quot;+&quot;key: &quot;+key+&quot;\n&quot;+&quot;value: &quot;+cbDocument.content();
		SampleResult.setResponseData(responseData.getBytes());
		SampleResult.setResponseCodeOK();
		SampleResult.setBytes(responseData.length());

	}
}catch (Exception e) {
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Success&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; +e)
}

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="get-exists" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.util.concurrent.TimeUnit;
import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.document.StringDocument;


Bucket bucket = vars.getObject(&quot;bucketObj&quot;)

StringDocument cbDocument = null
Random rnd = new Random()
String key = vars.get(&quot;KEYPREFIX&quot;)+&quot;_&quot;+vars.get(&quot;myKey&quot;)
String value = vars.get(&quot;myValue&quot;)
String method = vars.get(&quot;METHOD&quot;)
long expiry = Long.parseLong(vars.get(&quot;EXPIRY&quot;))
long timeout = Long.parseLong(vars.get(&quot;TIMEOUT&quot;))

boolean useTimeout = timeout &gt; 0;

// Resetting the stop watch to to set current time as startTime.
SampleResult.setStartTime(System.currentTimeMillis())

try{
	long startTime = System.nanoTime();
	cbDocument = StringDocument.create(key);
	
	if(useTimeout){
		cbDocument = bucket.get(cbDocument,timeout, TimeUnit.MILLISECONDS)
		}else {
			cbDocument = bucket.get(cbDocument)
		}

	long endTime = System.nanoTime();

	if(cbDocument == null) {
		SampleResult.setResponseCode(&quot;204&quot;)
	  	SampleResult.setSuccessful(true)
	     SampleResult.setResponseMessage(&quot;Success&quot;)

	}else {
		
		String responseData = &quot;elapseTime: &quot;+ (endTime-startTime)+1 +&quot;\n&quot;+&quot;key: &quot;+key+&quot;\n&quot;+&quot;value: &quot;+cbDocument.content();
		SampleResult.setResponseData(responseData.getBytes());
		SampleResult.setResponseCodeOK();
		SampleResult.setBytes(responseData.length());

	}
}catch (Exception e) {
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Success&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; +e)
}

</stringProp>
        </JSR223Sampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="getStatus" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">getStatus</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CloseBucket" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.couchbase.client.java.Bucket;


//Creating java object and then type casting to Couchbase Bucket
Object obj = props.get(&quot;objBucket&quot;);
Bucket bucket = (Bucket) obj;
if(bucket != null){
	try {
		bucket.close();
		log.info(&quot;Connection terminated successfully&quot;)		
		}catch (Exception e){
		log.info(&quot;Exeption while terminating the connection&quot;+e)
	}

}
	
	
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Errors" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${ERRORS}</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
