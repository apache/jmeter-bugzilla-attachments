Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2/src/core/org/apache/jmeter/util/BeanShellInterpreter.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2/src/core/org/apache/jmeter/util/BeanShellInterpreter.java	(revision 547213)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2/src/core/org/apache/jmeter/util/BeanShellInterpreter.java	(working copy)
@@ -155,50 +155,40 @@
 	}
 
 	private Object bshInvoke(Method m, String s, boolean shouldLog) throws JMeterException {
-		Object r = null;
-		final String errorString = "Error invoking bsh method: ";
-		try {
-			r = m.invoke(bshInstance, new Object[] { s });
-		} catch (IllegalArgumentException e) { // Programming error
-			log.error(errorString + m.getName());
-			throw new JMeterError(errorString + m.getName(), e);
-		} catch (IllegalAccessException e) { // Also programming error
-		    log.error(errorString + m.getName());
-			throw new JMeterError(errorString + m.getName(), e);
-		} catch (InvocationTargetException e) { // Can occur at run-time
-			// could be caused by the bsh Exceptions:
-			// EvalError, ParseException or TargetError
-			if (shouldLog) {
-				Throwable cause = e.getCause();
-				if (cause != null) {
-					log.error(errorString + m.getName() + "\t" + cause.getLocalizedMessage());
-				} else {
-					log.error(errorString + m.getName());
-				}
-			}
-			throw new JMeterException(errorString + m.getName(), e);
-		}
-		return r;
+        return bshInvoke(m, new Object[] { s }, shouldLog);
 	}
 
 	private Object bshInvoke(Method m, String s, Object o) throws JMeterException {
-		Object r = null;
-		try {
-			r = m.invoke(bshInstance, new Object[] { s, o });
-		} catch (IllegalArgumentException e) { // Programming error
-			log.error("Error invoking bsh method " + m.getName() + "\n", e);
-			throw new JMeterError("Error invoking bsh method " + m.getName(), e);
-		} catch (IllegalAccessException e) { // Also programming error
-			log.error("Error invoking bsh method " + m.getName() + "\n", e);
-			throw new JMeterError("Error invoking bsh method " + m.getName(), e);
-		} catch (InvocationTargetException e) { // Can occur at run-time
-			// could be caused by the bsh Exceptions:
-			// EvalError, ParseException or TargetError
-			log.error("Error invoking bsh method " + m.getName() + "\n", e);
-			throw new JMeterException("Error invoking bsh method " + m.getName(), e);
-		}
-		return r;
+        return bshInvoke(m, new Object[] { s, o }, true);
 	}
+    
+    private Object bshInvoke(Method m, Object[] o, boolean shouldLog) throws JMeterException {
+        Object r = null;
+        final String errorString = "Error invoking bsh method: ";
+        try {
+            r = m.invoke(bshInstance, o);
+        } catch (IllegalArgumentException e) { // Programming error
+            log.error(errorString + m.getName());
+            throw new JMeterError(errorString + m.getName(), e);
+        } catch (IllegalAccessException e) { // Also programming error
+            log.error(errorString + m.getName());
+            throw new JMeterError(errorString + m.getName(), e);
+        } catch (InvocationTargetException e) { // Can occur at run-time
+            // could be caused by the bsh Exceptions:
+            // EvalError, ParseException or TargetError
+            String message = errorString + m.getName();
+            Throwable cause = e.getCause();
+            if (cause != null) {
+                message += "\t" + cause.getLocalizedMessage();
+            }
+            
+            if (shouldLog) {
+                log.error(message);
+            }
+            throw new JMeterException(message, e);
+        }
+        return r;
+    }
 
 	public Object eval(String s) throws JMeterException {
 		return bshInvoke(bshEval, s);
