From f3ec62a4feab617f56a28887466b2a157f901191 Mon Sep 17 00:00:00 2001
From: ham1 <graham@ham1.co.uk>
Date: Sun, 12 Oct 2014 21:32:20 +0100
Subject: [PATCH] Minor code/comment formatting etc.

---
 .../jmeter/testbeans/gui/ComboStringEditor.java    | 16 ++++------
 .../org/apache/jmeter/util/BeanShellClient.java    |  8 ++---
 .../jmeter/protocol/http/sampler/HTTPHC4Impl.java  |  9 +++---
 .../protocol/http/sampler/HTTPHCAbstractImpl.java  |  4 +--
 .../jmeter/protocol/http/sampler/HTTPJavaImpl.java | 36 ++++++++++------------
 .../protocol/http/util/HTTPConstantsInterface.java |  1 -
 .../jmeter/report/gui/action/ReportDragNDrop.java  |  3 --
 7 files changed, 33 insertions(+), 44 deletions(-)

diff --git a/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java b/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
index e750703..1bd7890 100644
--- a/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
+++ b/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
@@ -51,14 +51,10 @@ class ComboStringEditor extends PropertyEditorSupport implements ItemListener, C
 
     private static final String[] EMPTY_STRING_ARRAY = new String[0];
 
-    /**
-     * The list of options to be offered by this editor.
-     */
+    /** The list of options to be offered by this editor. */
     private final String[] tags;
 
-    /**
-     * The edited property's default value.
-     */
+    /** The edited property's default value. */
     private String initialEditValue;
 
     private final JComboBox combo;
@@ -113,12 +109,12 @@ class ComboStringEditor extends PropertyEditorSupport implements ItemListener, C
         model = new DefaultComboBoxModel();
 
         if (rb != null && tags.length > 0) {
-            validTranslations=new HashMap<String, String>();
+            validTranslations = new HashMap<String, String>();
             for (String tag : this.tags) {
                 validTranslations.put(tag, rb.getString(tag));
             }
         } else {
-            validTranslations=null;
+            validTranslations = null;
         }
 
         if (!noUndefined) {
@@ -128,11 +124,11 @@ class ComboStringEditor extends PropertyEditorSupport implements ItemListener, C
             this.minTagIndex = Integer.MAX_VALUE;
             this.maxTagIndex = Integer.MIN_VALUE;
         } else {
-            this.minTagIndex=model.getSize(); // track where tags start ...
+            this.minTagIndex = model.getSize(); // track where tags start ...
             for (String tag : this.tags) {
                 model.addElement(translate(tag));
             }
-            this.maxTagIndex=model.getSize(); // ... and where they end
+            this.maxTagIndex = model.getSize(); // ... and where they end
         }
         if (!noEdit) {
             model.addElement(EDIT);
diff --git a/src/core/org/apache/jmeter/util/BeanShellClient.java b/src/core/org/apache/jmeter/util/BeanShellClient.java
index 0c2fe93..0ff9a56 100644
--- a/src/core/org/apache/jmeter/util/BeanShellClient.java
+++ b/src/core/org/apache/jmeter/util/BeanShellClient.java
@@ -27,7 +27,6 @@ import java.net.Socket;
 
 // N.B. Do not call any JMeter methods; the jar is standalone
 
-
 /**
  * Implements a client that can talk to the JMeter BeanShell server.
  */
@@ -60,8 +59,8 @@ public class BeanShellClient {
         sendLine("bsh.prompt=\"\";",os);// Prompt is unnecessary
 
         sendLine("String [] args={",os);
-        for (int i=MINARGS; i<args.length;i++){
-            sendLine("\""+args[i]+"\",\n",os);
+        for (int i=MINARGS; i<args.length; i++){
+            sendLine("\""+args[i]+"\",\n", os);
         }
         sendLine("};",os);
 
@@ -77,6 +76,7 @@ public class BeanShellClient {
         sockRead.join(); // wait for script to finish
         is.close();
         os.close();
+        sock.close();
     }
 
     private static void sendLine( String line, OutputStream outPipe )
@@ -91,7 +91,7 @@ public class BeanShellClient {
         private final InputStream is;
 
         public SockRead(InputStream _is) {
-            this.is=_is;
+            this.is = _is;
             //this.setDaemon(true);
         }
 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
index 2da156f..6f9ca6a 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
@@ -126,7 +126,6 @@ import org.apache.log.Logger;
 
 /**
  * HTTP Sampler using Apache HttpClient 4.x.
- *
  */
 public class HTTPHC4Impl extends HTTPHCAbstractImpl {
 
@@ -150,7 +149,6 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
             }
             return duration; // return the super-class value
         }
-        
     };
 
     /**
@@ -179,14 +177,15 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
     };
 
     private static final ThreadLocal<Map<HttpClientKey, HttpClient>> HTTPCLIENTS = 
-        new ThreadLocal<Map<HttpClientKey, HttpClient>>(){
+        new ThreadLocal<Map<HttpClientKey, HttpClient>>() {
         @Override
         protected Map<HttpClientKey, HttpClient> initialValue() {
             return new HashMap<HttpClientKey, HttpClient>();
         }
     };
 
-    // Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
+    /* Scheme used for slow HTTP sockets.
+     * Cannot be set as a default, because must be set on an HttpClient instance. */
     private static final Scheme SLOW_HTTP;
     
     // We always want to override the HTTPS scheme, because we want to trust all certificates and hosts
@@ -422,7 +421,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
         return res;
     }
 
-    /**
+	/**
      * Calls sendPostData if method is POST and sendEntityData if method is PUT or PATCH
      * Field HTTPSampleResult#queryString of result is modified in the 2 cases
      * @param method String HTTP method
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
index bcebd9e..5fd00b5 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
@@ -95,7 +95,7 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
         }
         nonProxyHostSuffixSize=nonProxyHostSuffix.size();
 
-        InetAddress inet=null;
+        InetAddress inet = null;
         String localHostOrIP =
             JMeterUtils.getPropDefault("httpclient.localaddress",""); // $NON-NLS-1$
         if (localHostOrIP.length() > 0){
@@ -124,7 +124,7 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
     }
 
     protected static boolean isPartialMatch(String host) {
-        for (int i=0;i<nonProxyHostSuffixSize;i++){
+        for (int i=0; i<nonProxyHostSuffixSize; i++){
             if (host.endsWith(nonProxyHostSuffix.get(i))) {
                 return true;
             }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
index 347359a..7b9f27f 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
@@ -52,17 +52,16 @@ import org.apache.log.Logger;
  *
  */
 public class HTTPJavaImpl extends HTTPAbstractImpl {
+    private static final Logger log = LoggingManager.getLoggerForClass();
+    
     private static final boolean OBEY_CONTENT_LENGTH =
         JMeterUtils.getPropDefault("httpsampler.obey_contentlength", false); // $NON-NLS-1$
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
-
     private static final int MAX_CONN_RETRIES =
-        JMeterUtils.getPropDefault("http.java.sampler.retries" // $NON-NLS-1$
-                ,10); // Maximum connection retries
+        JMeterUtils.getPropDefault("http.java.sampler.retries", 10); // $NON-NLS-1$
 
     static {
-        log.info("Maximum connection retries = "+MAX_CONN_RETRIES); // $NON-NLS-1$
+        log.info("Maximum connection retries = " + MAX_CONN_RETRIES); // $NON-NLS-1$
         // Temporary copies, so can set the final ones
     }
 
@@ -134,7 +133,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
         SSLManager sslmgr = null;
         if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
             try {
-                sslmgr=SSLManager.getInstance(); // N.B. this needs to be done before opening the connection
+                sslmgr = SSLManager.getInstance(); // N.B. this needs to be done before opening the connection
             } catch (Exception e) {
                 log.warn("Problem creating the SSLManager: ", e);
             }
@@ -179,7 +178,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
             }
         }
 
-        // a well-bahaved browser is supposed to send 'Connection: close'
+        // a well-behaved browser is supposed to send 'Connection: close'
         // with the last request to an HTTP server. Instead, most browsers
         // leave it to the server to close the connection after their
         // timeout period. Leave it to the JMeter user to decide.
@@ -247,7 +246,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
                 Throwable cause = e.getCause();
                 if (cause != null){
                     log.error("Cause: "+cause);
-                    if(cause instanceof Error) {
+                    if (cause instanceof Error) {
                         throw (Error)cause;
                     }
                 }
@@ -273,7 +272,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
             Throwable cause = e.getCause();
             if (cause != null){
                 log.error("Cause: "+cause);
-                if(cause instanceof Error) {
+                if (cause instanceof Error) {
                     throw (Error)cause;
                 }
             }
@@ -306,7 +305,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
         headerBuf.append("\n"); //$NON-NLS-1$
 
         String hfk;
-        for (int i = 1; (hfk=conn.getHeaderFieldKey(i)) != null; i++) {
+        for (int i = 1; (hfk = conn.getHeaderFieldKey(i)) != null; i++) {
             headerBuf.append(hfk);
             headerBuf.append(": "); // $NON-NLS-1$
             headerBuf.append(conn.getHeaderField(i));
@@ -384,10 +383,10 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
         // Get all the request properties, which are the headers set on the connection
         StringBuilder hdrs = new StringBuilder(100);
         Map<String, List<String>> requestHeaders = conn.getRequestProperties();
-        for(Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {
-            String headerKey=entry.getKey();
+        for (Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {
+            String headerKey = entry.getKey();
             // Exclude the COOKIE header, since cookie is reported separately in the sample
-            if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(headerKey)) {
+            if (!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(headerKey)) {
                 // value is a List of Strings
                 for (String value : entry.getValue()){
                     hdrs.append(headerKey);
@@ -520,12 +519,11 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
 
             res.setResponseData(responseData);
 
-            @SuppressWarnings("null") // Cannot be null here
             int errorLevel = conn.getResponseCode();
             String respMsg = conn.getResponseMessage();
-            String hdr=conn.getHeaderField(0);
+            String hdr = conn.getHeaderField(0);
             if (hdr == null) {
-                hdr="(null)";  // $NON-NLS-1$
+                hdr = "(null)";  // $NON-NLS-1$
             }
             if (errorLevel == -1){// Bug 38902 - sometimes -1 seems to be returned unnecessarily
                 if (respMsg != null) {// Bug 41902 - NPE
@@ -536,7 +534,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
                         log.warn("ResponseCode==-1; could not parse "+respMsg+" hdr: "+hdr);
                       }
                 } else {
-                    respMsg=hdr; // for result
+                    respMsg = hdr; // for result
                     log.warn("ResponseCode==-1 & null ResponseMessage. Header(0)= "+hdr);
                 }
             }
@@ -548,7 +546,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
             res.setSuccessful(isSuccessCode(errorLevel));
 
             if (respMsg == null) {// has been seen in a redirect
-                respMsg=hdr; // use header (if possible) if no message found
+                respMsg = hdr; // use header (if possible) if no message found
             }
             res.setResponseMessage(respMsg);
 
@@ -596,7 +594,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
             if (conn != null) { // May not exist
                 conn.disconnect();
             }
-            conn=null; // Don't process again
+            conn = null; // Don't process again
             return errorResult(e, res);
         } finally {
             // calling disconnect doesn't close the connection immediately,
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
index 82cadb6..0cdb2e2 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
@@ -22,7 +22,6 @@ package org.apache.jmeter.protocol.http.util;
 /**
  * Constants used in HTTP, mainly header names.
  */
-
 public interface HTTPConstantsInterface {
 
     int DEFAULT_HTTPS_PORT = 443;
diff --git a/src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java b/src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java
index a3b01cf..51b8bee 100644
--- a/src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java
+++ b/src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java
@@ -72,14 +72,12 @@ public class ReportDragNDrop extends AbstractAction {
         } else if (INSERT_BEFORE.equals(action) && canAddTo(parentNode)) {
             removeNodesFromParents(draggedNodes);
             for (int i = 0; i < draggedNodes.length; i++) {
-                @SuppressWarnings("null")
                 int index = parentNode.getIndex(currentNode); // can't be null - this is checked by canAddTo
                 ReportGuiPackage.getInstance().getTreeModel().insertNodeInto(draggedNodes[i], parentNode, index);
             }
         } else if (INSERT_AFTER.equals(action) && canAddTo(parentNode)) {
             removeNodesFromParents(draggedNodes);
             for (int i = 0; i < draggedNodes.length; i++) {
-                @SuppressWarnings("null")
                 int index = parentNode.getIndex(currentNode) + 1; // can't be null - this is checked by canAddTo
                 ReportGuiPackage.getInstance().getTreeModel().insertNodeInto(draggedNodes[i], parentNode, index);
             }
@@ -99,7 +97,6 @@ public class ReportDragNDrop extends AbstractAction {
             return false;
         }
         TestElement te = parentNode.getTestElement();
-        // System.out.println("Add to: "+te.getClass().getName());
         if (te instanceof Controller) {
             return true;
         }
-- 
1.9.1

