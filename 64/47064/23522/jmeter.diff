Index: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
===================================================================
--- src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java	(revision 767099)
+++ src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java	(working copy)
@@ -301,7 +301,7 @@
 	}
 
 	private boolean isRightClick(MouseEvent e) {
-		return (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
+		return e.isPopupTrigger() || (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
 	}
 
 	private void displayPopUp(MouseEvent e) {
Index: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
===================================================================
--- src/core/org/apache/jmeter/gui/action/KeyStrokes.java	(revision 767099)
+++ src/core/org/apache/jmeter/gui/action/KeyStrokes.java	(working copy)
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.gui.action;
 
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 
 import javax.swing.KeyStroke;
@@ -31,33 +32,33 @@
     private KeyStrokes(){
     }
 
-    public static final KeyStroke CUT = KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke COPY = KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke PASTE = KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_DOWN_MASK);
+    public static final KeyStroke CUT = KeyStroke.getKeyStroke(KeyEvent.VK_X, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke COPY = KeyStroke.getKeyStroke(KeyEvent.VK_C, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke PASTE = KeyStroke.getKeyStroke(KeyEvent.VK_V, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
     public static final KeyStroke REMOVE = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0);
-    public static final KeyStroke SAVE_GRAPHICS = KeyStroke.getKeyStroke(KeyEvent.VK_G, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke SAVE_GRAPHICS_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_G, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
-    public static final KeyStroke HELP = KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke WHAT_CLASS = KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke DEBUG_ON = KeyStroke.getKeyStroke(KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
-    public static final KeyStroke DEBUG_OFF = KeyStroke.getKeyStroke(KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke FUNCTIONS = KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke SSL_MANAGER = KeyStroke.getKeyStroke(KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke ACTION_START = KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke ACTION_STOP = KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke ACTION_SHUTDOWN = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke CLEAR = KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK|KeyEvent.SHIFT_DOWN_MASK);
-    public static final KeyStroke CLEAR_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke REMOTE_START_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke SAVE_GRAPHICS = KeyStroke.getKeyStroke(KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke SAVE_GRAPHICS_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke HELP = KeyStroke.getKeyStroke(KeyEvent.VK_H, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke WHAT_CLASS = KeyStroke.getKeyStroke(KeyEvent.VK_W, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke DEBUG_ON = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke DEBUG_OFF = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke FUNCTIONS = KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke SSL_MANAGER = KeyStroke.getKeyStroke(KeyEvent.VK_M, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke ACTION_START = KeyStroke.getKeyStroke(KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke ACTION_STOP = KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke ACTION_SHUTDOWN = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke CLEAR = KeyStroke.getKeyStroke(KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()|KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke CLEAR_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke REMOTE_START_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke REMOTE_STOP_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.ALT_DOWN_MASK);
-    public static final KeyStroke SAVE = KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke SAVE_ALL_AS = KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
-    public static final KeyStroke OPEN = KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke CLOSE = KeyStroke.getKeyStroke(KeyEvent.VK_L, KeyEvent.CTRL_DOWN_MASK);
-    public static final KeyStroke EXIT = KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_DOWN_MASK);
-	public static final KeyStroke COLLAPSE_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_DOWN_MASK);
+    public static final KeyStroke SAVE = KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke SAVE_ALL_AS = KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke OPEN = KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke CLOSE = KeyStroke.getKeyStroke(KeyEvent.VK_L, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+    public static final KeyStroke EXIT = KeyStroke.getKeyStroke(KeyEvent.VK_Q, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
+	public static final KeyStroke COLLAPSE_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());
 	// VK_PLUS + CTRL_DOWN_MASK did not work...
-	public static final KeyStroke EXPAND_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_DOWN_MASK | KeyEvent.SHIFT_DOWN_MASK);
+	public static final KeyStroke EXPAND_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() | KeyEvent.SHIFT_DOWN_MASK);
     
 
     /**
Index: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
===================================================================
--- src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java	(revision 767099)
+++ src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java	(working copy)
@@ -44,7 +44,7 @@
 
 		try {
 			String defaultUI = JMeterUtils.getPropDefault("jmeter.laf", UIManager
-					.getCrossPlatformLookAndFeelClassName());
+					.getSystemLookAndFeelClassName());
 			UIManager.setLookAndFeel(defaultUI);
 		} catch (IllegalAccessException e) {
 		} catch (ClassNotFoundException e) {
Index: src/core/org/apache/jmeter/util/JMeterVersion.java
===================================================================
--- src/core/org/apache/jmeter/util/JMeterVersion.java	(revision 767099)
+++ src/core/org/apache/jmeter/util/JMeterVersion.java	(working copy)
@@ -44,7 +44,7 @@
 	 * This ensures that JMeterUtils always gets the correct
 	 * version, even if JMeterUtils is not re-compiled during the build.
 	 */
-	private static final String VERSION = "2.3.2";
+	private static final String VERSION = "2.3.2.20090421";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2008 The Apache Software Foundation";
 
Index: src/reports/org/apache/jmeter/gui/util/ReportMenuBar.java
===================================================================
--- src/reports/org/apache/jmeter/gui/util/ReportMenuBar.java	(revision 767099)
+++ src/reports/org/apache/jmeter/gui/util/ReportMenuBar.java	(working copy)
@@ -19,6 +19,7 @@
 package org.apache.jmeter.gui.util;
 
 import java.awt.Component;
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.util.Collection;
 import java.util.Iterator;
@@ -231,7 +232,7 @@
 		helpMenu.setMnemonic('H');
 		JMenuItem contextHelp = new JMenuItem(JMeterUtils.getResString("help"), 'H');
 		contextHelp.setActionCommand("help");
-		contextHelp.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_MASK));
+		contextHelp.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		contextHelp.addActionListener(ReportActionRouter.getInstance());
 		help_about = new JMenuItem(JMeterUtils.getResString("about"), 'A');
 		help_about.setActionCommand("about");
@@ -246,7 +247,7 @@
 		JMenuItem functionHelper = new JMenuItem(JMeterUtils.getResString("function_dialog_menu_item"), 'F');
 		functionHelper.addActionListener(ReportActionRouter.getInstance());
 		functionHelper.setActionCommand("functions");
-		functionHelper.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK));
+		functionHelper.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		lafMenu = new JMenu(JMeterUtils.getResString("appearance"));
 		UIManager.LookAndFeelInfo lafs[] = UIManager.getInstalledLookAndFeels();
 		for (int i = 0; i < lafs.length; ++i) {
@@ -264,7 +265,7 @@
 			sslManager.addActionListener(ReportActionRouter.getInstance());
 			sslManager.setActionCommand("sslManager");
 			sslManager.setMnemonic('S');
-			sslManager.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, KeyEvent.CTRL_MASK));
+			sslManager.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 			optionsMenu.add(sslManager);
 		}
 		optionsMenu.add(makeLanguageMenu());
@@ -349,17 +350,17 @@
 		runMenu = new JMenu(JMeterUtils.getResString("run"));
 		runMenu.setMnemonic('R');
 		run_start = new JMenuItem(JMeterUtils.getResString("start"), 'S');
-		run_start.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_MASK));
+		run_start.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		run_start.addActionListener(ReportActionRouter.getInstance());
 		run_start.setActionCommand(ACTION_START);
 		run_stop = new JMenuItem(JMeterUtils.getResString("stop"), 'T');
-		run_stop.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, KeyEvent.CTRL_MASK));
+		run_stop.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		run_stop.setEnabled(false);
 		run_stop.addActionListener(ReportActionRouter.getInstance());
 		run_stop.setActionCommand(ACTION_STOP);
 
 		run_shut = new JMenuItem(JMeterUtils.getResString("shutdown"), 'Y');
-		run_shut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, KeyEvent.CTRL_MASK));
+		run_shut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		run_shut.setEnabled(false);
 		run_shut.addActionListener(ReportActionRouter.getInstance());
 		run_shut.setActionCommand(ACTION_SHUTDOWN);
@@ -370,14 +371,14 @@
 		run_clearAll = new JMenuItem(JMeterUtils.getResString("clear_all"), 'a');
 		run_clearAll.addActionListener(ReportActionRouter.getInstance());
 		run_clearAll.setActionCommand(ActionNames.CLEAR_ALL);
-		run_clearAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, KeyEvent.CTRL_MASK));
+		run_clearAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		runMenu.add(run_start);
 		if (remote_start != null) {
 			runMenu.add(remote_start);
 		}
 		remote_start_all = new JMenuItem(JMeterUtils.getResString("remote_start_all"), 'Z');
 		remote_start_all.setName("remote_start_all");
-		remote_start_all.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK));
+		remote_start_all.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		remote_start_all.addActionListener(ReportActionRouter.getInstance());
 		remote_start_all.setActionCommand("remote_start_all");
 		runMenu.add(remote_start_all);
@@ -418,19 +419,19 @@
 		fileMenu = new JMenu(JMeterUtils.getResString("file"));
 		fileMenu.setMnemonic('F');
 		JMenuItem file_save = new JMenuItem(JMeterUtils.getResString("save"), 'S');
-		file_save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK));
+		file_save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		file_save.setActionCommand("save");
 		file_save.addActionListener(ReportActionRouter.getInstance());
 		file_save.setEnabled(true);
 
 		file_save_as = new JMenuItem(JMeterUtils.getResString("save_all_as"), 'A');
-		file_save_as.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK));
+		file_save_as.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		file_save_as.setActionCommand("save_all_as");
 		file_save_as.addActionListener(ReportActionRouter.getInstance());
 		file_save_as.setEnabled(true);
 
 		file_load = new JMenuItem(JMeterUtils.getResString("menu_open"), 'O');
-		file_load.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
+		file_load.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		file_load.addActionListener(ReportActionRouter.getInstance());
 		// Set default SAVE menu item to disabled since the default node that
 		// is selected is ROOT, which does not allow items to be inserted.
@@ -438,12 +439,12 @@
 		file_load.setActionCommand("open");
 
 		file_close = new JMenuItem(JMeterUtils.getResString("menu_close"), 'C');
-		file_close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, KeyEvent.CTRL_MASK));
+		file_close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		file_close.setActionCommand("close");
 		file_close.addActionListener(ReportActionRouter.getInstance());
 
 		file_exit = new JMenuItem(JMeterUtils.getResString("exit"), 'X');
-		file_exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_MASK));
+		file_exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		file_exit.setActionCommand("exit");
 		file_exit.addActionListener(ReportActionRouter.getInstance());
 
Index: src/reports/org/apache/jmeter/gui/util/ReportMenuFactory.java
===================================================================
--- src/reports/org/apache/jmeter/gui/util/ReportMenuFactory.java	(revision 767099)
+++ src/reports/org/apache/jmeter/gui/util/ReportMenuFactory.java	(working copy)
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.gui.util;
 
+import java.awt.Toolkit;
 import java.awt.event.KeyEvent;
 import java.util.Collection;
 import java.util.Collections;
@@ -132,11 +133,11 @@
 					KeyEvent.VK_DELETE, 0)));
 		}
 		menu.add(makeMenuItem(JMeterUtils.getResString("cut"), "Cut", "Cut", KeyStroke.getKeyStroke(KeyEvent.VK_X,
-				KeyEvent.CTRL_MASK)));
+				Toolkit.getDefaultToolkit().getMenuShortcutKeyMask())));
 		menu.add(makeMenuItem(JMeterUtils.getResString("copy"), "Copy", "Copy", KeyStroke.getKeyStroke(KeyEvent.VK_C,
-				KeyEvent.CTRL_MASK)));
+				Toolkit.getDefaultToolkit().getMenuShortcutKeyMask())));
 		menu.add(makeMenuItem(JMeterUtils.getResString("paste"), "Paste", "Paste", KeyStroke.getKeyStroke(
-				KeyEvent.VK_V, KeyEvent.CTRL_MASK)));
+				KeyEvent.VK_V, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask())));
 		menu.add(makeMenuItem(JMeterUtils.getResString("paste_insert"), "Paste Insert", "Paste Insert"));
 	}
 
@@ -145,7 +146,7 @@
 		menu.add(makeMenuItem(JMeterUtils.getResString("open"), "Open", "open"));
 		menu.add(makeMenuItem(JMeterUtils.getResString("save_as"), "Save As", "save_as"));
 		JMenuItem savePicture = makeMenuItem(JMeterUtils.getResString("save_as_image"), "Save Image", "save_graphics",
-				KeyStroke.getKeyStroke(KeyEvent.VK_G, KeyEvent.CTRL_MASK));
+				KeyStroke.getKeyStroke(KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
 		menu.add(savePicture);
 		if (!(ReportGuiPackage.getInstance().getCurrentGui() instanceof Printable)) {
 			savePicture.setEnabled(false);
Index: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java
===================================================================
--- src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java	(revision 767099)
+++ src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java	(working copy)
@@ -286,7 +286,7 @@
 	}
 
 	private boolean isRightClick(MouseEvent e) {
-		return (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
+		return e.isPopupTrigger() || (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
 	}
 
 	/*
Index: src/reports/org/apache/jmeter/report/gui/action/ReportLookAndFeelCommand.java
===================================================================
--- src/reports/org/apache/jmeter/report/gui/action/ReportLookAndFeelCommand.java	(revision 767099)
+++ src/reports/org/apache/jmeter/report/gui/action/ReportLookAndFeelCommand.java	(working copy)
@@ -40,7 +40,7 @@
 
 		try {
 			String defaultUI = JMeterUtils.getPropDefault("jmeter.laf", UIManager
-					.getCrossPlatformLookAndFeelClassName());
+					.getSystemLookAndFeelClassName());
 			UIManager.setLookAndFeel(defaultUI);
 		} catch (Exception e) {
 		}
Index: bin/jmeter.properties
===================================================================
--- bin/jmeter.properties	(revision 767099)
+++ bin/jmeter.properties	(working copy)
@@ -75,7 +75,7 @@
 #  Metal   = javax.swing.plaf.metal.MetalLookAndFeel
 #  Motif   = com.sun.java.swing.plaf.motif.MotifLookAndFeel
 #  Windows = com.sun.java.swing.plaf.windows.WindowsLookAndFeel
-jmeter.laf=javax.swing.plaf.metal.MetalLookAndFeel
+#jmeter.laf=javax.swing.plaf.metal.MetalLookAndFeel
 
 # Icon definitions
 # default:
Index: bin/jmeter.sh
===================================================================
--- bin/jmeter.sh	(revision 767099)
+++ bin/jmeter.sh	(working copy)
@@ -27,4 +27,4 @@
 # Hopefully this is an universal option:
 SERVER=-server
 
-java $SERVER $JVM_ARGS -jar `dirname $0`/ApacheJMeter.jar "$@"
+java $SERVER $JVM_ARGS -Dapple.laf.useScreenMenuBar=true -jar `dirname $0`/ApacheJMeter.jar "$@"
