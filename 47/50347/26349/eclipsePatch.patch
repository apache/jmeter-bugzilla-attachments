Index: xdocs/building.xml
===================================================================
--- xdocs/building.xml	(revision 1039437)
+++ xdocs/building.xml	(working copy)
@@ -63,9 +63,9 @@
 </p>
 <h3>Compiling and packaging JMeter using Eclipse</h3>
 <p>
-Once you have downloaded the source from SVN or the release archives, you can configure Eclipse.
-The easiest way to do this is to replace the Eclipse .classpath file with the eclipse.classpath file provided with JMeter.
-This will set up the source-paths and most of the libraries.
+Once you have downloaded the source from SVN or the release archives and run the ant download_jars target to
+install the dependent jars, you can configure Eclipse. The easiest way to do this is to replace the Eclipse .classpath
+file with the eclipse.classpath file provided with JMeter. This will set up the source-paths and most of the libraries.
 <p>
 See also the file eclipse.readme.
 </p>
Index: eclipse.readme
===================================================================
--- eclipse.readme	(revision 1039437)
+++ eclipse.readme	(working copy)
@@ -10,7 +10,9 @@
 [This has been tested with Eclipse 3.2. It may not work with other versions.]
 
 The file eclipse.classpath is intended as a starter .classpath file 
-for building JMeter using Eclipse version 3.  
+for building JMeter using Eclipse version 3.  Make sure to execute
+the ant download_jars task to downlaad and install the jars referred
+to in the classpath before creating the Eclipse project.  
 
 Note that Eclipse does not handle RMI compilations, 
 nor is it easy to use for creating jar files.
@@ -83,4 +85,4 @@
  where "jmeterproject" is the name of the JMeter project.
  
  [It would be nicer to use ${project_loc}/bin 
- but unfortunately the Eclipse Debug view does not seem to preserve any of the project variables]
\ No newline at end of file
+ but unfortunately the Eclipse Debug view does not seem to preserve any of the project variables]
