Index: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
===================================================================
--- src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java	(revision 1035053)
+++ src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java	(working copy)
@@ -71,6 +71,8 @@
 
     private final JCheckBox useProperties = new JCheckBox(JMeterUtils.getResString("jms_use_properties_file"), false); //$NON-NLS-1$
 
+    private final JCheckBox useStaticDest = new JCheckBox(JMeterUtils.getResString("jms_use_static_dest"),true); //$NON-NLS-1$
+    
     private final JLabeledRadioI18N configChoice = new JLabeledRadioI18N("jms_config", CONFIG_ITEMS, USE_TEXT_RSC); //$NON-NLS-1$
 
     private final JLabeledTextField jndiICF = new JLabeledTextField(JMeterUtils.getResString("jms_initial_context_factory")); //$NON-NLS-1$
@@ -115,6 +117,7 @@
         PublisherSampler sampler = new PublisherSampler();
         this.configureTestElement(sampler);
         sampler.setUseJNDIProperties(String.valueOf(useProperties.isSelected()));
+        sampler.setUseStaticDest(String.valueOf(useStaticDest.isSelected()));
         sampler.setJNDIIntialContextFactory(jndiICF.getText());
         sampler.setProviderUrl(urlField.getText());
         sampler.setConnectionFactory(jndiConnFac.getText());
@@ -140,6 +143,7 @@
         PublisherSampler sampler = (PublisherSampler) s;
         this.configureTestElement(sampler);
         sampler.setUseJNDIProperties(String.valueOf(useProperties.isSelected()));
+        sampler.setUseStaticDest(String.valueOf(useStaticDest.isSelected()));
         sampler.setJNDIIntialContextFactory(jndiICF.getText());
         sampler.setProviderUrl(urlField.getText());
         sampler.setConnectionFactory(jndiConnFac.getText());
@@ -168,6 +172,7 @@
         add(mainPanel, BorderLayout.CENTER);
         
         mainPanel.add(useProperties);
+        mainPanel.add(useStaticDest);
         mainPanel.add(jndiICF);
         mainPanel.add(urlField);
         mainPanel.add(jndiConnFac);
@@ -195,6 +200,7 @@
     public void clearGui(){
         super.clearGui();
         useProperties.setSelected(false);
+        useStaticDest.setSelected(true);
         jndiICF.setText(""); // $NON-NLS-1$
         urlField.setText(""); // $NON-NLS-1$
         jndiConnFac.setText(""); // $NON-NLS-1$
@@ -219,6 +225,7 @@
         super.configure(el);
         PublisherSampler sampler = (PublisherSampler) el;
         useProperties.setSelected(sampler.getUseJNDIPropertiesAsBoolean());
+        useStaticDest.setSelected(sampler.getUseStaticDestAsBoolean());
         jndiICF.setText(sampler.getJNDIInitialContextFactory());
         urlField.setText(sampler.getProviderUrl());
         jndiConnFac.setText(sampler.getConnectionFactory());
Index: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
===================================================================
--- src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java	(revision 1035053)
+++ src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java	(working copy)
@@ -116,7 +116,7 @@
     private void initClient() throws JMSException, NamingException {
         publisher = new Publisher(getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), 
                 getProviderUrl(), getConnectionFactory(), getDestination(), isUseAuth(), getUsername(),
-                getPassword());
+                getPassword(), getUseStaticDestAsBoolean());
         ClientPool.addClient(publisher);
         log.debug("PublisherSampler.initClient called");
     }
@@ -152,13 +152,13 @@
         try {
             for (int idx = 0; idx < loop; idx++) {
                 if (JMSPublisherGui.TEXT_MSG_RSC.equals(type)){
-                    String tmsg = getMessageContent();
-                    Message msg = publisher.publish(tmsg);
+                    String tmsg = getMessageContent(); 
+                    Message msg = publisher.publish(tmsg,getDestination());
                     buffer.append(tmsg);
                     Utils.messageProperties(propBuffer, msg);
                 } else if (JMSPublisherGui.MAP_MSG_RSC.equals(type)){
                     Map<String, Object> m = getMapContent();
-                    Message msg = publisher.publish(m);
+                    Message msg = publisher.publish(m,getDestination());
                     Utils.messageProperties(propBuffer, msg);
                 } else if (JMSPublisherGui.OBJECT_MSG_RSC.equals(type)){
                     throw new JMSException(type+ " is not yet supported");
Index: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
===================================================================
--- src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java	(revision 1035053)
+++ src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java	(working copy)
@@ -61,6 +61,9 @@
     private static final String READ_RESPONSE = "jms.read_response"; // $NON-NLS-1$
     //--
 
+    //Custom Property
+    private static final String USE_STATIC_DEST = "jms.use_static_dest"; // $NON-NLS-1$
+
     // See BUG 45460. We need to keep the resource in order to interpret existing files
     private static final String REQUIRED = JMeterUtils.getResString("jms_auth_required"); // $NON-NLS-1$
 
@@ -288,8 +291,33 @@
         return getPropertyAsBoolean(USE_PROPERTIES_FILE);
     }
 
+    /**
+     * if the sampler should use a static destination, call the method with true
+     *
+     * @param properties
+     */
+    public void setUseStaticDest(String properties) {
+	    setProperty(USE_STATIC_DEST, properties);
+    }
 
     /**
+     * return whether the sampler should use a static destination.
+     *
+     * @return  whether the sampler should use a static destination.
+     */
+    public String getUseStaticDest() {
+	    return getPropertyAsString(USE_STATIC_DEST);
+    }
+
+    /**
+     * return the properties as boolean true/false.
+     *
+     * @return whether the sampler should use a static destination.
+     */
+    public boolean getUseStaticDestAsBoolean() {
+	    return getPropertyAsBoolean(USE_STATIC_DEST);
+    }
+    /**
      * Returns a String with the JMS Message Header values.
      *
      * @param message JMS Message
Index: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
===================================================================
--- src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java	(revision 1035053)
+++ src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java	(working copy)
@@ -48,6 +48,10 @@
 
     private final  MessageProducer producer;
 
+    private final Context ctx;
+
+    private final boolean staticDest;
+
     /**
      * Create a publisher using either the jndi.properties file or the provided parameters
      * @param useProps true if a jndi.properties file is to be used
@@ -58,39 +62,63 @@
      * @param useAuth (ignored if useProps is true)
      * @param securityPrincipal (ignored if useProps is true)
      * @param securityCredentials (ignored if useProps is true)
+     * @param useStaticDest true is the destination is not to change between loops
      * @throws JMSException if the context could not be initialised, or there was some other error
      * @throws NamingException 
      */
     public Publisher(boolean useProps, String initialContextFactory, String providerUrl, 
             String connfactory, String destinationName, boolean useAuth,
-            String securityPrincipal, String securityCredentials) throws JMSException, NamingException {
+            String securityPrincipal, String securityCredentials, boolean useStaticDest) throws JMSException, NamingException {
         super();
-        Context ctx = InitialContextFactory.getContext(useProps, initialContextFactory, 
+        ctx = InitialContextFactory.getContext(useProps, initialContextFactory, 
                 providerUrl, useAuth, securityPrincipal, securityCredentials);
         connection = Utils.getConnection(ctx, connfactory);
         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
-        Destination dest = Utils.lookupDestination(ctx, destinationName);
-        producer = session.createProducer(dest);
+        staticDest = useStaticDest;
+        if(staticDest) {
+            Destination dest = Utils.lookupDestination(ctx, destinationName);
+            producer = session.createProducer(dest);
+        }
+        else
+            producer = session.createProducer(null);
     }
 
-    public TextMessage publish(String text) throws JMSException {
+    public TextMessage publish(String text, String destinationName) throws JMSException, NamingException {
         TextMessage msg = session.createTextMessage(text);
-        producer.send(msg);
+        if(staticDest){
+            producer.send(msg);
+        }
+        else{
+            Destination dest = Utils.lookupDestination(ctx, destinationName);
+            producer.send(dest,msg);
+        }
         return msg;
     }
 
-    public ObjectMessage publish(Serializable contents) throws JMSException {
+    public ObjectMessage publish(Serializable contents, String destinationName) throws JMSException, NamingException {
         ObjectMessage msg = session.createObjectMessage(contents);
-        producer.send(msg);
+        if(staticDest){
+            producer.send(msg);
+        }
+        else{
+        	Destination dest = Utils.lookupDestination(ctx, destinationName);
+        	producer.send(dest,msg);
+        }
         return msg;
     }
 
-    public MapMessage publish(Map<String, Object> map) throws JMSException {
+    public MapMessage publish(Map<String, Object> map, String destinationName) throws JMSException, NamingException {
         MapMessage msg = session.createMapMessage();
         for (Entry<String, Object> me : map.entrySet()){
             msg.setObject(me.getKey(), me.getValue());                
         }
-        producer.send(msg);
+        if(staticDest){
+            producer.send(msg);
+        }
+        else{
+        	Destination dest = Utils.lookupDestination(ctx, destinationName);
+        	producer.send(dest,msg);
+        }
         return msg;
     }
 
Index: src/core/org/apache/jmeter/resources/messages.properties
===================================================================
--- src/core/org/apache/jmeter/resources/messages.properties	(revision 1035053)
+++ src/core/org/apache/jmeter/resources/messages.properties	(working copy)
@@ -376,6 +376,7 @@
 jms_use_file=From file
 jms_use_non_persistent_delivery=Use non-persistent delivery mode?
 jms_use_properties_file=Use jndi.properties file
+jms_use_static_dest=Use static destination
 jms_use_random_file=Random File
 jms_use_req_msgid_as_correlid=Use Request Message Id
 jms_use_res_msgid_as_correlid=Use Response Message Id
