--- jakarta-jmeter-r541884/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java.original	2007-05-19 14:14:14.000000000 +0100
+++ jakarta-jmeter-r541884/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java	2007-06-05 09:26:34.014806000 +0100
@@ -28,9 +28,12 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
+import java.lang.Character;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import javax.swing.BorderFactory;
 import javax.swing.ButtonGroup;
@@ -115,6 +118,8 @@
 
 	private static final String HTML_BUTTON_LABEL = "Render HTML";
 
+	private static final String JSON_BUTTON_LABEL = "Render JSON";
+
 	private static final String XML_BUTTON_LABEL = "Render XML";
 
 	private static final String TEXT_BUTTON_LABEL = "Show Text";
@@ -123,6 +128,8 @@
 
 	private static final String HTML_COMMAND = "html"; // $NON-NLS-1$
 
+	private static final String JSON_COMMAND = "json"; // $NON-NLS-1$
+
 	private static final String XML_COMMAND = "xml"; // $NON-NLS-1$
 
 	private static final String TEXT_COMMAND = "text"; // $NON-NLS-1$
@@ -135,6 +142,19 @@
 
 	private boolean textMode = true;
 
+	private static final String ESC_CHAR_REGEX = "\\\\[\"\\\\/bfnrt]|\\\\u[0-9A-Fa-f]{4}"; // $NON-NLS-1$
+
+	private static final String NORMAL_CHARACTER_REGEX = "[^\"\\\\]";  // $NON-NLS-1$
+
+	private static final String STRING_REGEX = "\"(" + ESC_CHAR_REGEX + "|" + NORMAL_CHARACTER_REGEX + ")*\""; // $NON-NLS-1$
+
+	// This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data.
+	private static final String OTHER_VALUE_REGEX = "[^\\{\\[\\]\\}\\,]*"; // $NON-NLS-1$
+
+	private static final String VALUE_OR_PAIR_REGEX = "((" + STRING_REGEX + "\\s*:)?\\s*(" + STRING_REGEX + "|" + OTHER_VALUE_REGEX + ")\\s*,?\\s*)"; // $NON-NLS-1$
+
+	private static final Pattern VALUE_OR_PAIR_PATTERN = Pattern.compile(VALUE_OR_PAIR_REGEX);
+
 	// set default command to Text
 	private String command = TEXT_COMMAND;
 
@@ -165,6 +185,8 @@
 
 	private JRadioButton htmlButton;
 
+	private JRadioButton jsonButton;
+
 	private JRadioButton xmlButton;
 
 	private JCheckBox downloadAll;
@@ -392,6 +414,8 @@
 								showTextResponse(response);
 							} else if (command.equals(HTML_COMMAND)) {
 								showRenderedResponse(response, res);
+							} else if (command.equals(JSON_COMMAND)) {
+								showRenderJSONResponse(response);
 							} else if (command.equals(XML_COMMAND)) {
 								showRenderXMLResponse(response);
 							}
@@ -435,6 +459,7 @@
 		resultsScrollPane.setViewportView(imageLabel);
 		textButton.setEnabled(false);
 		htmlButton.setEnabled(false);
+		jsonButton.setEnabled(false);
 		xmlButton.setEnabled(false);
 	}
 
@@ -446,6 +471,73 @@
 
 		textButton.setEnabled(true);
 		htmlButton.setEnabled(true);
+		jsonButton.setEnabled(true);
+		xmlButton.setEnabled(true);
+	}
+
+	// It might be useful also to make this available in the 'Request' tab, for
+	// when posting JSON.
+	private static String prettyJSON(String json) {
+		StringBuffer pretty = new StringBuffer(json.length() * 2); // Educated guess
+
+		final String tab = ":   "; // $NON-NLS-1$
+		StringBuffer index = new StringBuffer(""); // $NON-NLS-1$
+		String nl = ""; // $NON-NLS-1$
+
+		Matcher valueOrPair = VALUE_OR_PAIR_PATTERN.matcher(json);
+
+		boolean misparse = false;
+
+		for (int i = 0; i < json.length(); ) {
+			if ((json.charAt(i) == '{') || (json.charAt(i) == '[')) {
+				pretty.append(nl).append(index).append(json.charAt(i));
+				i++;
+				index.append(tab);
+				misparse = false;
+			}
+			else if ((json.charAt(i) == '}') || (json.charAt(i) == ']')) {
+				if (index.length() > 0) {
+					index.delete(0, tab.length());
+				}
+				pretty.append(nl).append(index).append(json.charAt(i));
+				i++;
+				int j = i;
+				while ((j < json.length()) && Character.isWhitespace(json.charAt(j))) {
+					j++;
+				}
+				if ((j < json.length()) && (json.charAt(j) == ',')) {
+					pretty.append(",");
+					i=j+1;
+				}
+				misparse = false;
+			}
+			else if (valueOrPair.find(i) && valueOrPair.group().length() > 0) {
+				pretty.append(nl).append(index).append(valueOrPair.group());
+				i=valueOrPair.end();
+				misparse = false;
+			}
+			else {
+				if (!misparse) {
+					pretty.append(nl).append("- Parse failed from:");
+				}
+				pretty.append(json.charAt(i));
+				i++;
+				misparse = true;
+			}
+			nl = "\n";
+		}
+		return pretty.toString();
+	}
+	
+	private void showRenderJSONResponse(String response) {
+		results.setContentType("text/plain"); // $NON-NLS-1$
+		results.setText(prettyJSON(response == null ? "" : response));
+		results.setCaretPosition(0);
+		resultsScrollPane.setViewportView(results);
+
+		textButton.setEnabled(true);
+		htmlButton.setEnabled(true);
+		jsonButton.setEnabled(true);
 		xmlButton.setEnabled(true);
 	}
 
@@ -508,6 +600,7 @@
 		resultsScrollPane.setViewportView(view);
 		textButton.setEnabled(true);
 		htmlButton.setEnabled(true);
+		jsonButton.setEnabled(true);
 		xmlButton.setEnabled(true);
 	}
 
@@ -551,7 +644,8 @@
 		command = e.getActionCommand();
 
 		if (command != null
-				&& (command.equals(TEXT_COMMAND) || command.equals(HTML_COMMAND) || command.equals(XML_COMMAND))) {
+				&& (command.equals(TEXT_COMMAND) || command.equals(HTML_COMMAND)
+ 				|| command.equals(JSON_COMMAND) || command.equals(XML_COMMAND))) {
 
 			textMode = command.equals(TEXT_COMMAND);
 
@@ -569,6 +663,8 @@
 				showTextResponse(response);
 			} else if (command.equals(HTML_COMMAND)) {
 				showRenderedResponse(response, res);
+			} else if (command.equals(JSON_COMMAND)) {
+				showRenderJSONResponse(response);
 			} else if (command.equals(XML_COMMAND)) {
 				showRenderXMLResponse(response);
 			}
@@ -626,6 +722,7 @@
 
 		textButton.setEnabled(true);
 		htmlButton.setEnabled(true);
+		jsonButton.setEnabled(true);
 		xmlButton.setEnabled(true);
 	}
 
@@ -644,6 +741,12 @@
 		htmlButton.setSelected(!textMode);
 		group.add(htmlButton);
 
+		jsonButton = new JRadioButton(JSON_BUTTON_LABEL);
+		jsonButton.setActionCommand(JSON_COMMAND);
+		jsonButton.addActionListener(this);
+		jsonButton.setSelected(!textMode);
+		group.add(jsonButton);
+
 		xmlButton = new JRadioButton(XML_BUTTON_LABEL);
 		xmlButton.setActionCommand(XML_COMMAND);
 		xmlButton.addActionListener(this);
@@ -655,6 +758,7 @@
 		JPanel pane = new JPanel();
 		pane.add(textButton);
 		pane.add(htmlButton);
+		pane.add(jsonButton);
 		pane.add(xmlButton);
 		pane.add(downloadAll);
 		return pane;
--- jakarta-jmeter-r541884/xdocs/usermanual/component_reference.xml.original	2007-06-06 13:57:24.148679000 +0100
+++ jakarta-jmeter-r541884/xdocs/usermanual/component_reference.xml	2007-06-06 14:02:09.530820000 +0100
@@ -1653,7 +1653,7 @@
 Note that the Request panel only shows the headers added by JMeter.
 It does not show any headers (such as Host) that may be added by the HTTP protocol implementation.
 <p>
-There are three ways to view the response, selectable by a radio
+There are four ways to view the response, selectable by a radio
 button.</p>
 <p>The default view shows all of the text contained in the
 response.</p>
@@ -1665,7 +1665,8 @@
 may download images and style-sheets etc referenced by the HTML. 
 If the checkbox is not selected, the renderer will not download images etc.
 </p>
-<p>The Render XML view will show response in tree style. 
+<p>The Render JSON view will show the response in tree style (also coping with JSON embedded in JavaScript).
+<p>The Render XML view will show the response in tree style. 
 Any DTD nodes or Prolog nodes will not show up in tree; however, response may contain those nodes.
 </p>
 </description>
