# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: C:\Users\ihayden\Documents\NetBeansProjects\JMeter\src\jorphan\org\apache\jorphan\reflect
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: ClassFinder.java
--- ClassFinder.java Base (BASE)
+++ ClassFinder.java Locally Modified (Based On LOCAL)
@@ -27,8 +27,10 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Enumeration;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.StringTokenizer;
 import java.util.TreeSet;
@@ -49,6 +51,7 @@
     private static final String DOT_JAR = ".jar"; // $NON-NLS-1$
     private static final String DOT_CLASS = ".class"; // $NON-NLS-1$
     private static final int DOT_CLASS_LEN = DOT_CLASS.length();
+    private static final Map<String, Set<String>> cache = new HashMap<String, Set<String>>();
 
     // static only
     private ClassFinder() {
@@ -174,9 +177,7 @@
                             return name.endsWith(DOT_JAR);
                         }
                     });
-                    for (int x = 0; x < jars.length; x++) {
-                        fullList.add(jars[x]);
-                    }
+                    fullList.addAll(Arrays.asList(jars));
                 }
             }
         }
@@ -518,8 +519,17 @@
 
     private static void findClassesInOnePath(String strPath, Set<String> listClasses) throws IOException {
         File file = new File(strPath);
+        String key = file.getCanonicalPath();
+        
+        if(cache.containsKey(key)) { // already parsed that directory
+            listClasses.addAll(cache.get(key));
+            return;
+        }
+        
+        Set<String> foundClasses = new HashSet<String>();
+
         if (file.isDirectory()) {
-            findClassesInPathsDir(strPath, file, listClasses);
+            findClassesInPathsDir(key, file, foundClasses);
         } else if (file.exists()) {
             ZipFile zipFile = null;
             try {
@@ -528,7 +538,7 @@
                 while (entries.hasMoreElements()) {
                     String strEntry = entries.nextElement().toString();
                     if (strEntry.endsWith(DOT_CLASS)) {
-                        listClasses.add(fixClassName(strEntry));
+                        foundClasses.add(fixClassName(strEntry));
                     }
                 }
             } catch (IOException e) {
@@ -540,6 +550,9 @@
                 }
             }
         }
+
+        cache.put(key, foundClasses);
+        listClasses.addAll(foundClasses);
\ No newline at end of file
     }
 
     private static void findClassesInPaths(List<String> listPaths, Set<String> listClasses) throws IOException {
