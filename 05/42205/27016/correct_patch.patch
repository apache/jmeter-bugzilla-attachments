Index: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
===================================================================
--- src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java	(revision 1104009)
+++ src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java	(working copy)
@@ -26,6 +26,8 @@
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
+import java.util.HashMap;
+import java.util.Map;
 
 import javax.swing.JLabel;
 import javax.swing.JMenuItem;
@@ -38,19 +40,23 @@
 
 import org.apache.jmeter.control.gui.TestPlanGui;
 import org.apache.jmeter.control.gui.WorkBenchGui;
+import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.MainFrame;
 import org.apache.jmeter.gui.action.ActionNames;
 import org.apache.jmeter.gui.action.ActionRouter;
+import org.apache.jmeter.gui.action.Command;
 import org.apache.jmeter.gui.action.KeyStrokes;
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
-public class JMeterTreeListener implements TreeSelectionListener, MouseListener, KeyListener, MouseMotionListener {
+public class JMeterTreeListener implements TreeSelectionListener, MouseListener, KeyListener, MouseMotionListener, ActionListener {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
+    private Map<String, Command> commandMap = new HashMap<String, Command>();
+
     // Container endWindow;
     // JPopupMenu pop;
     private TreePath currentPath;
@@ -319,4 +325,19 @@
             popup.requestFocus();
         }
     }
+
+    public void actionPerformed(ActionEvent e) {
+        Command command = this.commandMap.get(e.getActionCommand());
+        try {
+            command.doAction(e);
+        } catch (IllegalUserActionException e1) {
+            log.equals(e);
+        }
+    }
+
+    public void addCommand(Command command) {
+        for (String name : command.getActionNames()) {
+            this.commandMap.put(name, command);
+        }
+    }
 }
Index: src/core/org/apache/jmeter/gui/MainFrame.java
===================================================================
--- src/core/org/apache/jmeter/gui/MainFrame.java	(revision 1104009)
+++ src/core/org/apache/jmeter/gui/MainFrame.java	(working copy)
@@ -21,6 +21,7 @@
 import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.Dimension;
+import java.awt.FlowLayout;
 import java.awt.Font;
 import java.awt.Insets;
 import java.awt.event.ActionEvent;
@@ -57,6 +58,8 @@
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.gui.action.ActionNames;
 import org.apache.jmeter.gui.action.ActionRouter;
+import org.apache.jmeter.gui.action.CollapseExpand;
+import org.apache.jmeter.gui.action.Command;
 import org.apache.jmeter.gui.tree.JMeterCellRenderer;
 import org.apache.jmeter.gui.tree.JMeterTreeListener;
 import org.apache.jmeter.gui.util.JMeterMenuBar;
@@ -96,6 +99,8 @@
     /** The test tree. */
     private JTree tree;
 
+    private JPanel treeButtons;
+
     /** An image which is displayed when a test is running. */
     private ImageIcon runningIcon = JMeterUtils.getImage("thread.enabled.gif");// $NON-NLS-1$
 
@@ -389,8 +394,24 @@
 
         JSplitPane treeAndMain = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
 
+        JSplitPane treeAndButtons = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
+        treeAndButtons.setDividerLocation(30);
+        treeAndButtons.setDividerSize(0);
+
+        treeButtons = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        treeButtons.setAlignmentX(RIGHT_ALIGNMENT);
+
+        JButton expandAll = this.createButton(ActionNames.EXPAND_ALL);
+        JButton minimizeAll = this.createButton(ActionNames.COLLAPSE_ALL);
+
+        treeButtons.add(expandAll);
+        treeButtons.add(minimizeAll);
+
         treePanel = createTreePanel();
-        treeAndMain.setLeftComponent(treePanel);
+        treeAndButtons.setTopComponent(treeButtons);
+        treeAndButtons.setBottomComponent(treePanel);
+
+        treeAndMain.setLeftComponent(treeAndButtons);
 
         mainPanel = createMainPanel();
         treeAndMain.setRightComponent(mainPanel);
@@ -406,6 +427,30 @@
 
         setTitle(DEFAULT_TITLE);
         setIconImage(JMeterUtils.getImage("jmeter.jpg").getImage());// $NON-NLS-1$
+
+    }
+
+    private JButton createButton(String actionName) {
+        JButton button = null;
+        if (ActionNames.EXPAND_ALL.equals(actionName)) {
+            button = new JButton(new ImageIcon(JMeterUtils.getImage(
+                    "expandall.gif").getImage()));
+            button.setToolTipText("Expand All");
+        } else if (ActionNames.COLLAPSE_ALL.equals(actionName)) {
+            button = new JButton(new ImageIcon(JMeterUtils.getImage(
+                    "collapseall.gif").getImage()));
+            button.setToolTipText("Collapse All");
+        } else {
+            throw new IllegalArgumentException(actionName
+                    + " is not a valid option for this factory method.");
+        }
+
+        button.setActionCommand(actionName);
+        button.setAlignmentX(Component.LEFT_ALIGNMENT);
+        button.addActionListener(GuiPackage.getInstance().getTreeListener());
+        button.setPreferredSize(new Dimension(20, 20));
+        button.setSize(new Dimension(20, 20));
+        return button;
     }
 
     public void setExtendedFrameTitle(String fname) {
@@ -502,6 +547,9 @@
         treevar.addMouseMotionListener(treeListener);
         treevar.addKeyListener(treeListener);
 
+        Command collapseExpand = new CollapseExpand();
+        treeListener.addCommand(collapseExpand);
+
         return treevar;
     }
 

