From 12589840ea7919acf7c56b6d57be5af098b024e8 Mon Sep 17 00:00:00 2001
From: Felix Schumacher <felix.schumacher@internetallee.de>
Date: Sun, 4 Oct 2015 22:47:39 +0200
Subject: [PATCH 2/2] Use IETFUtils to extract mail values and really use the
 certificate holder

---
 .../apache/jmeter/assertions/SMIMEAssertion.java   | 44 ++++++++++------------
 1 file changed, 19 insertions(+), 25 deletions(-)

diff --git a/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java b/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
index a21bfe6..a9e95a1 100644
--- a/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
+++ b/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
@@ -31,6 +31,7 @@ import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -47,11 +48,12 @@ import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
+import org.bouncycastle.asn1.x500.AttributeTypeAndValue;
 import org.bouncycastle.asn1.x500.RDN;
 import org.bouncycastle.asn1.x500.X500Name;
 import org.bouncycastle.asn1.x500.style.BCStyle;
-import org.bouncycastle.asn1.x509.GeneralName;
-import org.bouncycastle.cert.jcajce.JcaX509CertificateHolder;
+import org.bouncycastle.asn1.x500.style.IETFUtils;
+import org.bouncycastle.cert.X509CertificateHolder;
 import org.bouncycastle.cms.CMSException;
 import org.bouncycastle.cms.SignerInformation;
 import org.bouncycastle.cms.SignerInformationStore;
@@ -63,7 +65,6 @@ import org.bouncycastle.mail.smime.SMIMESignedParser;
 import org.bouncycastle.operator.OperatorCreationException;
 import org.bouncycastle.operator.bc.BcDigestCalculatorProvider;
 import org.bouncycastle.util.Store;
-import org.bouncycastle.x509.extension.X509ExtensionUtil;
 
 /**
  * Helper class which isolates the BouncyCastle code.
@@ -161,13 +162,14 @@ class SMIMEAssertion {
 
                 if (certIt.hasNext()) {
                     // the signer certificate
-                    X509Certificate cert = (X509Certificate) certIt.next();
+                    X509CertificateHolder cert = (X509CertificateHolder) certIt.next();
 
                     if (testElement.isVerifySignature()) {
 
                         SignerInformationVerifier verifier = null;
                         try {
-                            verifier = new JcaSimpleSignerInfoVerifierBuilder().setProvider("BC").build(cert.getPublicKey());
+                            verifier = new JcaSimpleSignerInfoVerifierBuilder().setProvider("BC")
+                                    .build(cert);
                         } catch (OperatorCreationException e) {
                             log.error("Can't create a provider", e);
                         }
@@ -208,8 +210,8 @@ class SMIMEAssertion {
 
                         String subject = testElement.getSignerDn();
                         if (subject.length() > 0) {
-                            final X500Principal certPrincipal = cert.getSubjectX500Principal();
-                            log.debug(certPrincipal.getName(X500Principal.CANONICAL));
+                            final X500Name certPrincipal = cert.getSubject();
+                            log.debug(certPrincipal.toString());
                             X500Principal principal = new X500Principal(subject);
                             log.debug(principal.getName(X500Principal.CANONICAL));
                             if (!principal.equals(certPrincipal)) {
@@ -222,11 +224,11 @@ class SMIMEAssertion {
 
                         String issuer = testElement.getIssuerDn();
                         if (issuer.length() > 0) {
-                            final X500Principal issuerX500Principal = cert.getIssuerX500Principal();
-                            log.debug(issuerX500Principal.getName(X500Principal.CANONICAL));
+                            final X500Name issuerX500Name = cert.getIssuer();
+                            log.debug(issuerX500Name.toString());
                             X500Principal principal = new X500Principal(issuer);
                             log.debug(principal.getName(X500Principal.CANONICAL));
-                            if (!principal.equals(issuerX500Principal)) {
+                            if (!principal.equals(issuerX500Name.toString())) {
                                 res.setFailure(true);
                                 failureMessage
                                         .append("Issuer distinguished name of signer certificate does not match \"")
@@ -324,27 +326,19 @@ class SMIMEAssertion {
     /**
      * Extract email addresses from a certificate
      * 
-     * @param cert the X509 certificate
+     * @param cert the X509 certificate holder
      * @return a List of all email addresses found
      * @throws CertificateException
      */
-    private static List<String> getEmailFromCert(X509Certificate cert)
+    private static List<String> getEmailFromCert(X509CertificateHolder cert)
             throws CertificateException {
         List<String> res = new ArrayList<>();
 
-        X500Name subject = new JcaX509CertificateHolder(cert).getSubject();
-        for (RDN email : subject.getRDNs(BCStyle.EmailAddress)) {
-            res.add(email.toString());
-        }
-
-        Collection<?> subjectAltNames =
-            X509ExtensionUtil.getSubjectAlternativeNames(cert);
-        for (Object altNameObj : subjectAltNames) {
-            List<?> altName = (List<?>) altNameObj;
-            Integer type = (Integer) altName.get(0);
-            if (type.intValue() == GeneralName.rfc822Name) {
-                String address = (String) altName.get(1);
-                res.add(address);
+        X500Name subject = cert.getSubject();
+        for (RDN emails : subject.getRDNs(BCStyle.EmailAddress)) {
+            for (AttributeTypeAndValue emailAttr: emails.getTypesAndValues()) {
+                log.debug("Add email: " + IETFUtils.valueToString(emailAttr.getValue()));
+                res.add(IETFUtils.valueToString(emailAttr.getValue()));
             }
         }
 
-- 
1.9.1

