Index: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/gui/JMeterGUIComponent.java,v
retrieving revision 1.11
diff -u -r1.11 JMeterGUIComponent.java
--- src/core/org/apache/jmeter/gui/JMeterGUIComponent.java	27 Jun 2003 21:48:13 -0000	1.11
+++ src/core/org/apache/jmeter/gui/JMeterGUIComponent.java	26 Aug 2003 04:38:25 -0000
@@ -78,7 +78,6 @@
  *
  * @author    Michael Stover
  * @version   $Revision: 1.11 $
- * 
  */
 
 public interface JMeterGUIComponent
@@ -144,7 +143,9 @@
 
     /**
      * Set whether this component is enabled.
-     *      * @param enabled true for enabled, false for disabled.     */
+     *
+     * @param enabled true for enabled, false for disabled.
+     */
     void setEnabled(boolean enabled);
 
     /**
@@ -185,7 +186,9 @@
 
     /**
      * Sets the tree node which this component is associated with.
-     *      * @param node the tree node corresponding to this component     */
+     *
+     * @param node the tree node corresponding to this component.
+     */
     void setNode(JMeterTreeNode node);
     
     /**
Index: src/core/org/apache/jmeter/resources/messages.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages.properties,v
retrieving revision 1.51
diff -u -r1.51 messages.properties
--- src/core/org/apache/jmeter/resources/messages.properties	15 Jul 2003 16:27:58 -0000	1.51
+++ src/core/org/apache/jmeter/resources/messages.properties	26 Aug 2003 04:38:28 -0000
@@ -181,6 +181,7 @@
 send_file_mime_label=MIME Type:
 optional_tasks=Optional Tasks
 proxy_title=HTTP Proxy Server
+proxy_headers=Capture HTTP Headers
 view_results_title=View Results
 view_results_tree_title=View Results Tree
 view_graph_tree_title=View Graph Tree
@@ -396,4 +397,4 @@
 read_response_note3=the response content won't be logged.
 read_response_message=Read response is not checked. To see the response, please check the box in the sampler.
 wsdl_helper_error=The WSDL was not valid, please double check the url.
-wsdl_url_error=The WSDL was emtpy.
\ No newline at end of file
+wsdl_url_error=The WSDL was empty.
Index: src/core/org/apache/jmeter/resources/messages_de.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_de.properties,v
retrieving revision 1.42
diff -u -r1.42 messages_de.properties
--- src/core/org/apache/jmeter/resources/messages_de.properties	15 Jul 2003 16:27:58 -0000	1.42
+++ src/core/org/apache/jmeter/resources/messages_de.properties	26 Aug 2003 04:38:31 -0000
@@ -176,6 +176,7 @@
 send_file_mime_label=MIME Type:
 optional_tasks=Optional Tasks
 proxy_title=HTTP Proxy Server
+proxy_headers=Capture HTTP Headers
 view_results_title=View Results
 view_results_tree_title=View Results Tree
 view_graph_tree_title=View Graph Tree
@@ -384,4 +385,4 @@
 read_response_note3=the response content won't be logged.
 read_response_message=Read response is not checked. To see the response, please check the box in the sampler.
 wsdl_helper_error=The WSDL was not valid, please double check the url.
-wsdl_url_error=The WSDL was emtpy.
\ No newline at end of file
+wsdl_url_error=The WSDL was empty.
Index: src/core/org/apache/jmeter/resources/messages_ja.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_ja.properties,v
retrieving revision 1.39
diff -u -r1.39 messages_ja.properties
--- src/core/org/apache/jmeter/resources/messages_ja.properties	8 Aug 2003 13:18:11 -0000	1.39
+++ src/core/org/apache/jmeter/resources/messages_ja.properties	26 Aug 2003 04:38:35 -0000
@@ -181,6 +181,7 @@
 send_file_mime_label=MIME \u30bf\u30a4\u30d7:
 optional_tasks=\u30aa\u30d7\u30b7\u30e7\u30f3\u30bf\u30b9\u30af
 proxy_title=HTTP \u30d7\u30ed\u30ad\u30b7\u30b5\u30fc\u30d0
+proxy_headers=Capture HTTP Headers
 view_results_title=\u7d50\u679c\u8868\u793a
 view_results_tree_title=\u30c4\u30ea\u30fc\u3067\u7d50\u679c\u8868\u793a
 view_graph_tree_title=\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u3068\u30c4\u30ea\u30fc\u3067\u8868\u793a
Index: src/core/org/apache/jmeter/resources/messages_no.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_no.properties,v
retrieving revision 1.38
diff -u -r1.38 messages_no.properties
--- src/core/org/apache/jmeter/resources/messages_no.properties	15 Jul 2003 16:27:58 -0000	1.38
+++ src/core/org/apache/jmeter/resources/messages_no.properties	26 Aug 2003 04:38:37 -0000
@@ -165,6 +165,7 @@
 send_file_mime_label=MIME type:
 optional_tasks=Valgfrie oppgaver
 proxy_title=HTTP proxy server
+proxy_headers=Capture HTTP Headers
 view_results_title=Vis resultat
 view_results_tree_title=Vis resultattre
 cookie_manager_title=HTTP cookie manager
@@ -371,4 +372,4 @@
 read_response_note3=the response content won't be logged.
 read_response_message=Read response is not checked. To see the response, please check the box in the sampler.
 wsdl_helper_error=The WSDL was not valid, please double check the url.
-wsdl_url_error=The WSDL was emtpy.
\ No newline at end of file
+wsdl_url_error=The WSDL was empty.
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,v
retrieving revision 1.15
diff -u -r1.15 HttpRequestHdr.java
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	16 Aug 2003 17:22:51 -0000	1.15
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	26 Aug 2003 04:38:45 -0000
@@ -369,7 +369,8 @@
         {
             String TEST_REQ =
                 "GET http://localhost/matrix.html?"
-                    + "update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=" +                        "&d= HTTP/1.0\n\n";
+                    + "update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=" +
+                      "&d= HTTP/1.0\n\n";
             HttpRequestHdr req = new HttpRequestHdr();
             req.parse(new java.io.ByteArrayInputStream(TEST_REQ.getBytes()));
             HTTPSampler s = req.getSampler();
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java,v
retrieving revision 1.9
diff -u -r1.9 Proxy.java
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java	8 Aug 2003 13:18:11 -0000	1.9
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java	26 Aug 2003 04:38:47 -0000
@@ -90,6 +90,8 @@
     /** Target to receive the generated sampler. */
     private ProxyControl target;
 
+    /** Whether or not to capture the HTTP headers. */
+    private boolean captureHttpHeaders;
 
     /**
      * Default constructor.
@@ -121,8 +123,9 @@
         Socket clientSocket,
         ProxyControl target)
     {
-        this.target = target;
         this.clientSocket = clientSocket;
+        this.target = target;
+        this.captureHttpHeaders = target.getCaptureHttpHeaders();
     }
 
     /**
@@ -132,17 +135,20 @@
     {
         HttpRequestHdr request = new HttpRequestHdr();
         byte[] serverResponse = new byte[0];
-        HeaderManager headers = new HeaderManager();
+        HeaderManager headers = null;
         HTTPSampler sampler = new HTTPSampler();
         try
         {
             byte[] clientRequest =
                 request.parse(
                     new BufferedInputStream(clientSocket.getInputStream()));
-            headers = request.getHeaderManager();
 
             sampler = request.getSampler();
-            sampler.setHeaderManager(headers);
+            if (captureHttpHeaders)
+            {
+                headers = request.getHeaderManager();
+                sampler.setHeaderManager(headers);
+            }
 
             serverResponse = sampler.sample().getResponseData();
             writeToClient(
@@ -150,7 +156,6 @@
                 new BufferedOutputStream(clientSocket.getOutputStream()));
             headers.removeHeaderNamed("cookie");
 
-           
         }
         catch (UnknownHostException uhe)
         {
@@ -164,10 +169,9 @@
         }
         finally
         {
-            target.deliverSampler(
-                                       sampler,
-                                       new TestElement[] { headers },
-                                       serverResponse);
+            target.deliverSampler(sampler,
+                                  new TestElement[] { headers },
+                                  serverResponse);
             try
             {
                 clientSocket.close();
@@ -235,4 +239,4 @@
             log.warn("Exception while writing error", e);
         }
     }
-}
\ No newline at end of file
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java,v
retrieving revision 1.25
diff -u -r1.25 ProxyControl.java
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java	16 Aug 2003 17:22:51 -0000	1.25
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java	26 Aug 2003 04:38:50 -0000
@@ -77,6 +77,7 @@
 import org.apache.jmeter.protocol.http.control.RecordingController;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -103,6 +104,7 @@
         new PatternCacheLRU(1000, new Perl5Compiler());
     transient Perl5Matcher matcher;
     public final static String PORT = "ProxyControlGui.port";
+    public final static String CAPTURE_HTTP_HEADERS = "ProxyControlGui.capture_http_headers";
     public final static String EXCLUDE_LIST = "ProxyControlGui.exclude_list";
     public final static String INCLUDE_LIST = "ProxyControlGui.include_list";
 
@@ -110,6 +112,7 @@
     {
         matcher = new Perl5Matcher();
         setPort(DEFAULT_PORT);
+        setCaptureHttpHeaders(false);
         setExcludeList(new HashSet());
         setIncludeList(new HashSet());
     }
@@ -123,7 +126,12 @@
     {
         setProperty(PORT,port);
     }
-    
+  
+    public void setCaptureHttpHeaders(boolean capture)
+    {
+        setProperty(new BooleanProperty(CAPTURE_HTTP_HEADERS,capture));
+    }
+  
     public void setIncludeList(Collection list)
     {
         setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet(list)));
@@ -148,6 +156,11 @@
         return DEFAULT_PORT;
     }
 
+    public boolean getCaptureHttpHeaders()
+    {
+        return getPropertyAsBoolean(CAPTURE_HTTP_HEADERS);
+    }
+
     public Class getGuiClass()
     {
         return org.apache.jmeter.protocol.http.proxy.gui.ProxyControlGui.class;
@@ -342,7 +355,7 @@
             {
                 sampler.setPort(HTTPSampler.UNSPECIFIED_PORT);
             }
-            
+
             if (sampler
                 .getPath()
                 .equals(urlConfig.getPropertyAsString(HTTPSampler.PATH)))
@@ -430,8 +443,11 @@
             GuiPackage.getInstance().getReplacer().reverseReplace(sampler);
             for (int i = 0; i < configs.length; i++)
             {
-                GuiPackage.getInstance().getReplacer().reverseReplace(
-                    configs[i]);
+                if (configs[i] != null)
+                {
+                    GuiPackage.getInstance().getReplacer().reverseReplace(
+                        configs[i]);
+                }
             }
         }
         catch (InvalidVariableException e)
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java,v
retrieving revision 1.19
diff -u -r1.19 ProxyControlGui.java
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java	5 Jun 2003 19:53:14 -0000	1.19
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java	26 Aug 2003 04:38:52 -0000
@@ -70,6 +70,7 @@
 import javax.swing.BorderFactory;
 import javax.swing.Box;
 import javax.swing.JButton;
+import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
@@ -96,8 +97,9 @@
 import org.apache.log.Logger;
 
 /****************************************
- * Title: Jakarta-JMeter Description: Copyright: Copyright (c) 2001 Company:
- * Apache
+ * This GUI component is used to configure the HTTP Proxy.
+ *
+ *@see org.apache.jmeter.protocol.http.proxy.ProxyControl
  *
  *@author    Michael Stover
  *@created   $Date: 2003/06/05 19:53:14 $
@@ -116,6 +118,12 @@
     private static transient Logger log =
             Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.gui");
     private JTextField portField;
+    /**
+     * Used to indicate that HTTP request headers should be captured.
+     * The default is to <b>not</b> capture the HTTP request headers,
+     * which are specific to particular browser settings.
+     */
+    private JCheckBox httpHeaders;
 
     private ProxyControl model;
 
@@ -138,6 +146,9 @@
     private static final String EXCLUDE_COL =
         JMeterUtils.getResString("patterns_to_exclude");
 
+    /**
+     * The only constructor.
+     */
     public ProxyControlGui()
     {
         super();
@@ -149,6 +160,9 @@
         return MenuFactory.getDefaultTimerMenu();
     }
 
+    /**
+     * Used to create a <b>TestElement</b> to capture the GUI details.
+     */
     public TestElement createTestElement()
     {
         if (model == null)
@@ -160,15 +174,21 @@
         return model;
     }
 
+    /**
+     * This method creates the <b>ProxyControl</b>. Following the
+     * <b>MVC</b> pattern, the ProxyControl is the <b>model</b> component
+     * for which this component is the <b>view</b> and <b>controller</b>.
+     *
+     *@see org.apache.jmeter.protocol.http.proxy.ProxyControl
+     */
     protected ProxyControl makeProxyControl()
-        {
-            ProxyControl local = new ProxyControl();
-            return local;
-        }
+    {
+        ProxyControl local = new ProxyControl();
+        return local;
+    }
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement el)
     {
@@ -176,18 +196,29 @@
         if(el instanceof ProxyControl)
         {
             ((ProxyControl)el).setPort(portField.getText());
+            ((ProxyControl)el).setCaptureHttpHeaders(httpHeaders.isSelected());
             setIncludeListInProxyControl((ProxyControl)el);
             setExcludeListInProxyControl((ProxyControl)el);
             model = (ProxyControl)el;
         }
     }
 
+    /**
+     * Used to set the list of URL patterns to be included in the proxy recording.
+     *
+     *@see org.apache.jmeter.protocol.http.proxy.ProxyControl#addIncludedPattern(java.lang.String) 
+     */
     protected void setIncludeListInProxyControl(ProxyControl element)
     {
         List includeList = getDataList(includeModel, INCLUDE_COL);
         element.setIncludeList(includeList);
     }
 
+    /**
+     * Used to set the list of URL patterns to be excluded from the proxy recording.
+     *
+     *@see org.apache.jmeter.protocol.http.proxy.ProxyControl#addExcludedPattern(java.lang.String) 
+     */
     protected void setExcludeListInProxyControl(ProxyControl element)
     {
         List excludeList = getDataList(excludeModel, EXCLUDE_COL);
@@ -215,12 +246,16 @@
         return Arrays.asList(new String[] { MenuFactory.NON_TEST_ELEMENTS });
     }
 
+    /**
+     * Used to configure the GUI according to the supplied <b>TestElement</b>.
+     */
     public void configure(TestElement element)
     {
         log.debug("Configuring gui with " + element);
         super.configure(element);
         model = (ProxyControl)element;
         portField.setText(model.getPropertyAsString(ProxyControl.PORT));
+        httpHeaders.setSelected(model.getPropertyAsBoolean(ProxyControl.CAPTURE_HTTP_HEADERS));
         populateTable(includeModel, model.getIncludePatterns().iterator());
         populateTable(excludeModel, model.getExcludePatterns().iterator());
         repaint();
@@ -236,6 +271,7 @@
         model.fireTableDataChanged();
     }
 
+    /** This callback method is used to respond to User Interface events. */
     public void focusLost(FocusEvent e)
     {
         try
@@ -246,14 +282,11 @@
         {}
     }
 
+    /** This callback method is used to respond to User Interface events. */
     public void focusGained(FocusEvent e)
     {}
 
-    /****************************************
-     * !ToDo (Method description)
-     *
-     *@param action  !ToDo (Parameter description)
-     ***************************************/
+    /** This callback method is used to respond to User Interface events. */
     public void actionPerformed(ActionEvent action)
     {
         String command = action.getActionCommand();
@@ -275,6 +308,10 @@
             model = (ProxyControl) createTestElement();
             startProxy();
         }
+        else if (command.equals(ProxyControl.CAPTURE_HTTP_HEADERS))
+        {
+            enableRestart();
+        }
         else if (command.equals(ADD_EXCLUDE))
         {
             excludeModel.addNewRow();
@@ -330,27 +367,15 @@
         }
     }
 
-    /****************************************
-     * !ToDo (Method description)
-     *
-     *@param e  !ToDo (Parameter description)
-     ***************************************/
+    /** This callback method is used to respond to User Interface events. */
     public void keyPressed(KeyEvent e)
     {}
 
-    /****************************************
-     * !ToDo (Method description)
-     *
-     *@param e  !ToDo (Parameter description)
-     ***************************************/
+    /** This callback method is used to respond to User Interface events. */
     public void keyTyped(KeyEvent e)
     {}
 
-    /****************************************
-     * !ToDo (Method description)
-     *
-     *@param e  !ToDo (Parameter description)
-     ***************************************/
+    /** This callback method is used to respond to User Interface events. */
     public void keyReleased(KeyEvent e)
     {
         String fieldName = e.getComponent().getName();
@@ -382,6 +407,7 @@
                 }
             }
         }
+        enableRestart();
     }
 
     private void init()
@@ -437,9 +463,18 @@
         JLabel label = new JLabel(JMeterUtils.getResString("port"));
         label.setLabelFor(portField);
 
+        httpHeaders = new JCheckBox(JMeterUtils.getResString("proxy_headers"));
+        httpHeaders.setName(ProxyControl.CAPTURE_HTTP_HEADERS);
+        httpHeaders.setSelected(false);
+        httpHeaders.addActionListener(this);
+        httpHeaders.setActionCommand(ProxyControl.CAPTURE_HTTP_HEADERS);
+
         HorizontalPanel panel = new HorizontalPanel();
         panel.add(label);
         panel.add(portField);
+        panel.add(Box.createHorizontalStrut(10));
+        panel.add(httpHeaders);
+
         return panel;
     }
 
