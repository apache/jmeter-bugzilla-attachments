From 03d116bdb00cb93c15c4091dd755fb14bcd31c5b Mon Sep 17 00:00:00 2001
From: Felix Schumacher <felix.schumacher@internetallee.de>
Date: Sun, 8 Mar 2020 16:58:35 +0100
Subject: [PATCH 2/2] Recurse into sampleResults for getSampleList

---
 .../AbstractScopedTestElement.java            | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java b/src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java
index ecacd7a29b..518d9fee2a 100644
--- a/src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java
+++ b/src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java
@@ -18,6 +18,7 @@
 package org.apache.jmeter.testelement;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -157,8 +158,24 @@ public abstract class AbstractScopedTestElement extends AbstractTestElement {
             sampleList.add(result);
         }
         if (isScopeChildren(scope) || isScopeAll(scope)) {
-            Collections.addAll(sampleList, result.getSubResults());
+            recurseResults(sampleList, result);
         }
         return sampleList;
     }
+
+    private void recurseResults(List<SampleResult> resultList, SampleResult sampleResult) {
+        Collections.addAll(resultList, sampleResult.getSubResults());
+        recurseResults(resultList, sampleResult.getSubResults(), 3);
+    }
+
+    private void recurseResults(List<SampleResult> resultList, SampleResult[] sampleResult, int level) {
+        if (level < 0) {
+            return;
+        }
+        for (SampleResult child: sampleResult) {
+            Collections.addAll(resultList, child.getSubResults());
+            recurseResults(resultList, child.getSubResults(), level - 1);
+        }
+    }
+
 }
-- 
2.17.1

