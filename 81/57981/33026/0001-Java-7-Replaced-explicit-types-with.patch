From b52bdb88fff0f3a8903ff8d0d332818f2362551b Mon Sep 17 00:00:00 2001
From: Graham <graham@ham1.co.uk>
Date: Fri, 21 Aug 2015 23:37:13 +0100
Subject: [PATCH 1/1] Java 7: Replaced explicit types with <>

---
 .../apache/jmeter/assertions/CompareAssertion.java |  2 +-
 .../assertions/CompareAssertionBeanInfo.java       |  2 +-
 .../apache/jmeter/assertions/SMIMEAssertion.java   |  2 +-
 .../jmeter/control/CriticalSectionController.java  |  2 +-
 .../apache/jmeter/control/IncludeController.java   |  4 +--
 .../apache/jmeter/control/ModuleController.java    |  2 +-
 .../jmeter/control/RandomOrderController.java      |  2 +-
 .../jmeter/extractor/DebugPostProcessor.java       |  4 +--
 .../org/apache/jmeter/extractor/HtmlExtractor.java |  2 +-
 .../apache/jmeter/extractor/RegexExtractor.java    |  4 +--
 .../apache/jmeter/extractor/XPathExtractor.java    |  2 +-
 .../apache/jmeter/modifiers/UserParameters.java    |  2 +-
 .../jmeter/modifiers/gui/UserParametersGui.java    |  2 +-
 .../org/apache/jmeter/reporters/MailerModel.java   |  2 +-
 .../org/apache/jmeter/sampler/DebugSampler.java    |  4 +--
 .../org/apache/jmeter/sampler/TestAction.java      |  2 +-
 .../jmeter/timers/ConstantThroughputTimer.java     |  2 +-
 .../jmeter/visualizers/PropertyControlGui.java     |  2 +-
 .../jmeter/visualizers/RenderAsCssJQuery.java      |  2 +-
 .../apache/jmeter/visualizers/RenderAsRegexp.java  |  2 +-
 .../apache/jmeter/visualizers/RenderAsXPath.java   |  2 +-
 .../apache/jmeter/visualizers/RequestPanel.java    |  2 +-
 .../visualizers/RespTimeGraphVisualizer.java       | 12 +++----
 .../jmeter/visualizers/StatGraphProperties.java    |  8 ++---
 .../jmeter/visualizers/StatGraphVisualizer.java    |  9 +++--
 .../apache/jmeter/visualizers/StatVisualizer.java  |  3 +-
 .../apache/jmeter/visualizers/SummaryReport.java   |  3 +-
 .../visualizers/ViewResultsFullVisualizer.java     |  2 +-
 .../backend/AbstractBackendListenerClient.java     |  2 +-
 .../visualizers/backend/BackendListener.java       |  8 ++---
 .../visualizers/backend/BackendListenerGui.java    |  4 +--
 .../graphite/AbstractGraphiteMetricsSender.java    |  2 +-
 .../graphite/GraphiteBackendListenerClient.java    |  8 ++---
 .../graphite/PickleGraphiteMetricsSender.java      |  2 +-
 .../graphite/SocketOutputStreamPoolFactory.java    |  2 +-
 .../graphite/TextGraphiteMetricsSender.java        |  2 +-
 .../apache/jmeter/visualizers/utils/Colors.java    |  2 +-
 src/core/org/apache/jmeter/JMeter.java             |  9 ++---
 src/core/org/apache/jmeter/NewDriver.java          |  2 +-
 src/core/org/apache/jmeter/config/Arguments.java   |  2 +-
 .../apache/jmeter/control/GenericController.java   | 16 +++------
 .../apache/jmeter/control/TransactionSampler.java  |  2 +-
 .../apache/jmeter/engine/DistributedRunner.java    |  8 ++---
 .../apache/jmeter/engine/StandardJMeterEngine.java | 14 ++++----
 src/core/org/apache/jmeter/engine/TreeCloner.java  |  2 +-
 .../jmeter/engine/util/CompoundVariable.java       |  7 ++--
 .../apache/jmeter/engine/util/FunctionParser.java  |  4 +--
 .../apache/jmeter/engine/util/ValueReplacer.java   |  4 +--
 src/core/org/apache/jmeter/gui/GUIFactory.java     |  6 ++--
 src/core/org/apache/jmeter/gui/GuiPackage.java     | 14 ++++----
 src/core/org/apache/jmeter/gui/MainFrame.java      |  2 +-
 .../org/apache/jmeter/gui/SavePropertyDialog.java  |  2 +-
 src/core/org/apache/jmeter/gui/UndoHistory.java    |  6 ++--
 .../org/apache/jmeter/gui/action/AboutCommand.java |  2 +-
 .../org/apache/jmeter/gui/action/ActionRouter.java | 16 ++++-----
 .../org/apache/jmeter/gui/action/AddParent.java    |  2 +-
 .../org/apache/jmeter/gui/action/AddToTree.java    |  2 +-
 src/core/org/apache/jmeter/gui/action/Analyze.java |  2 +-
 .../apache/jmeter/gui/action/ChangeLanguage.java   |  2 +-
 .../org/apache/jmeter/gui/action/ChangeParent.java |  2 +-
 .../org/apache/jmeter/gui/action/CheckDirty.java   |  4 +--
 src/core/org/apache/jmeter/gui/action/Clear.java   |  2 +-
 src/core/org/apache/jmeter/gui/action/Close.java   |  2 +-
 .../apache/jmeter/gui/action/CollapseExpand.java   |  2 +-
 src/core/org/apache/jmeter/gui/action/Copy.java    |  4 +--
 .../jmeter/gui/action/CreateFunctionDialog.java    |  2 +-
 src/core/org/apache/jmeter/gui/action/Cut.java     |  2 +-
 .../org/apache/jmeter/gui/action/Duplicate.java    |  2 +-
 .../org/apache/jmeter/gui/action/EditCommand.java  |  2 +-
 .../apache/jmeter/gui/action/EnableComponent.java  |  2 +-
 .../org/apache/jmeter/gui/action/ExitCommand.java  |  2 +-
 src/core/org/apache/jmeter/gui/action/Help.java    |  2 +-
 src/core/org/apache/jmeter/gui/action/Load.java    |  2 +-
 .../jmeter/gui/action/LoadRecentProject.java       |  6 ++--
 .../gui/action/LoggerPanelEnableDisable.java       |  2 +-
 .../jmeter/gui/action/LookAndFeelCommand.java      |  4 +--
 src/core/org/apache/jmeter/gui/action/Move.java    |  2 +-
 src/core/org/apache/jmeter/gui/action/Paste.java   |  2 +-
 .../org/apache/jmeter/gui/action/RemoteStart.java  |  4 +--
 src/core/org/apache/jmeter/gui/action/Remove.java  |  2 +-
 .../jmeter/gui/action/ResetSearchCommand.java      |  2 +-
 .../apache/jmeter/gui/action/RevertProject.java    |  2 +-
 .../jmeter/gui/action/SSLManagerCommand.java       |  2 +-
 src/core/org/apache/jmeter/gui/action/Save.java    |  8 ++---
 .../org/apache/jmeter/gui/action/SaveGraphics.java |  2 +-
 .../jmeter/gui/action/SearchTreeCommand.java       |  2 +-
 .../apache/jmeter/gui/action/SearchTreeDialog.java |  2 +-
 src/core/org/apache/jmeter/gui/action/Start.java   |  2 +-
 .../apache/jmeter/gui/action/StopStoppables.java   |  2 +-
 .../apache/jmeter/gui/action/TemplatesCommand.java |  2 +-
 src/core/org/apache/jmeter/gui/action/ToolBar.java |  2 +-
 .../org/apache/jmeter/gui/action/UndoCommand.java  |  2 +-
 src/core/org/apache/jmeter/gui/action/What.java    |  2 +-
 .../gui/action/template/TemplateManager.java       |  4 +--
 .../apache/jmeter/gui/tree/JMeterTreeModel.java    |  2 +-
 .../org/apache/jmeter/gui/tree/JMeterTreeNode.java |  2 +-
 .../jmeter/gui/tree/JMeterTreeTransferHandler.java |  4 +--
 .../org/apache/jmeter/gui/util/FileListPanel.java  |  2 +-
 .../org/apache/jmeter/gui/util/FilePanelEntry.java |  2 +-
 .../apache/jmeter/gui/util/JLabeledRadioI18N.java  |  6 ++--
 .../org/apache/jmeter/gui/util/JMeterMenuBar.java  | 14 ++++----
 .../org/apache/jmeter/gui/util/JMeterToolBar.java  | 12 +++----
 .../org/apache/jmeter/gui/util/MenuFactory.java    | 27 +++++++--------
 .../jmeter/reporters/AbstractListenerElement.java  |  2 +-
 .../org/apache/jmeter/reporters/FileReporter.java  |  2 +-
 .../apache/jmeter/reporters/ResultCollector.java   |  2 +-
 .../org/apache/jmeter/reporters/Summariser.java    |  2 +-
 .../apache/jmeter/samplers/AsynchSampleSender.java |  4 +--
 .../apache/jmeter/samplers/BatchSampleSender.java  |  2 +-
 src/core/org/apache/jmeter/samplers/Entry.java     |  4 +--
 .../apache/jmeter/samplers/HoldSampleSender.java   |  2 +-
 .../org/apache/jmeter/samplers/SampleResult.java   |  6 ++--
 .../jmeter/samplers/StatisticalSampleSender.java   |  4 +--
 .../org/apache/jmeter/save/CSVSaveService.java     |  2 +-
 src/core/org/apache/jmeter/save/SaveService.java   |  2 +-
 .../jmeter/save/converters/ConversionHelp.java     |  2 +-
 .../converters/TestResultWrapperConverter.java     |  2 +-
 .../org/apache/jmeter/services/FileServer.java     |  2 +-
 .../apache/jmeter/testbeans/TestBeanHelper.java    |  2 +-
 .../jmeter/testbeans/gui/ComboStringEditor.java    |  2 +-
 .../apache/jmeter/testbeans/gui/TableEditor.java   |  2 +-
 .../apache/jmeter/testbeans/gui/TestBeanGUI.java   |  6 ++--
 .../testelement/AbstractScopedTestElement.java     |  2 +-
 .../jmeter/testelement/AbstractTestElement.java    |  4 +--
 .../org/apache/jmeter/testelement/TestPlan.java    |  4 +--
 .../jmeter/testelement/VariablesCollection.java    |  2 +-
 .../testelement/property/CollectionProperty.java   |  2 +-
 .../threads/FindTestElementsUpToRootTraverser.java |  6 ++--
 .../org/apache/jmeter/threads/JMeterContext.java   |  2 +-
 .../org/apache/jmeter/threads/JMeterThread.java    |  4 +--
 .../org/apache/jmeter/threads/JMeterVariables.java |  2 +-
 .../jmeter/threads/RemoteThreadsListenerImpl.java  |  2 +-
 .../org/apache/jmeter/threads/TestCompiler.java    | 40 +++++++++++-----------
 .../org/apache/jmeter/threads/ThreadGroup.java     |  2 +-
 src/core/org/apache/jmeter/util/JMeterUtils.java   | 12 +++----
 .../apache/jmeter/util/JSR223BeanInfoSupport.java  |  2 +-
 .../org/apache/jmeter/util/JsseSSLManager.java     |  2 +-
 .../jmeter/util/PropertiesBasedPrefixResolver.java |  2 +-
 .../jmeter/util/keystore/JmeterKeyStore.java       | 10 +++---
 .../jmeter/functions/AbstractHostIPName.java       |  2 +-
 .../org/apache/jmeter/functions/BeanShell.java     |  2 +-
 .../org/apache/jmeter/functions/CSVRead.java       |  2 +-
 .../org/apache/jmeter/functions/CharFunction.java  |  2 +-
 .../org/apache/jmeter/functions/EscapeHtml.java    |  2 +-
 .../jmeter/functions/EscapeOroRegexpChars.java     |  2 +-
 .../org/apache/jmeter/functions/EvalFunction.java  |  2 +-
 .../apache/jmeter/functions/EvalVarFunction.java   |  2 +-
 .../jmeter/functions/FileRowColContainer.java      |  6 ++--
 .../org/apache/jmeter/functions/FileToString.java  |  2 +-
 .../org/apache/jmeter/functions/FileWrapper.java   |  5 ++-
 .../org/apache/jmeter/functions/IntSum.java        |  2 +-
 .../apache/jmeter/functions/IterationCounter.java  |  2 +-
 .../org/apache/jmeter/functions/JavaScript.java    |  2 +-
 .../org/apache/jmeter/functions/Jexl2Function.java |  4 +--
 .../org/apache/jmeter/functions/JexlFunction.java  |  2 +-
 .../org/apache/jmeter/functions/LogFunction.java   |  2 +-
 .../org/apache/jmeter/functions/LogFunction2.java  |  2 +-
 .../org/apache/jmeter/functions/LongSum.java       |  2 +-
 .../org/apache/jmeter/functions/Property.java      |  2 +-
 .../org/apache/jmeter/functions/Property2.java     |  2 +-
 .../org/apache/jmeter/functions/Random.java        |  2 +-
 .../org/apache/jmeter/functions/RandomString.java  |  2 +-
 .../org/apache/jmeter/functions/RegexFunction.java |  8 ++---
 .../org/apache/jmeter/functions/SamplerName.java   |  2 +-
 .../org/apache/jmeter/functions/SetProperty.java   |  2 +-
 .../org/apache/jmeter/functions/SplitFunction.java |  2 +-
 .../apache/jmeter/functions/StringFromFile.java    |  2 +-
 .../org/apache/jmeter/functions/TestPlanName.java  |  2 +-
 .../org/apache/jmeter/functions/ThreadNumber.java  |  2 +-
 .../org/apache/jmeter/functions/TimeFunction.java  |  4 +--
 .../org/apache/jmeter/functions/UnEscape.java      |  2 +-
 .../org/apache/jmeter/functions/UnEscapeHtml.java  |  2 +-
 .../org/apache/jmeter/functions/UrlDecode.java     |  2 +-
 .../org/apache/jmeter/functions/UrlEncode.java     |  2 +-
 .../org/apache/jmeter/functions/Uuid.java          |  2 +-
 .../org/apache/jmeter/functions/Variable.java      |  2 +-
 .../org/apache/jmeter/functions/XPath.java         |  2 +-
 .../org/apache/jmeter/functions/XPathWrapper.java  |  4 +--
 .../apache/commons/cli/avalon/CLArgsParser.java    |  4 +--
 .../org/apache/jorphan/collections/Data.java       | 18 +++++-----
 .../org/apache/jorphan/collections/HashTree.java   |  6 ++--
 .../apache/jorphan/collections/ListedHashTree.java |  2 +-
 .../apache/jorphan/collections/SearchByClass.java  |  4 +--
 .../org/apache/jorphan/exec/KeyToolUtils.java      |  8 ++---
 .../apache/jorphan/gui/AbstractTreeTableModel.java | 14 ++++----
 src/jorphan/org/apache/jorphan/gui/GuiUtils.java   |  2 +-
 .../org/apache/jorphan/gui/JLabeledChoice.java     |  4 +--
 .../org/apache/jorphan/gui/JLabeledTextArea.java   |  4 +--
 .../org/apache/jorphan/gui/JLabeledTextField.java  |  4 +--
 .../org/apache/jorphan/gui/ObjectTableModel.java   | 26 +++++++-------
 .../org/apache/jorphan/math/StatCalculator.java    |  4 +--
 .../org/apache/jorphan/reflect/ClassFinder.java    |  6 ++--
 .../org/apache/jorphan/util/JOrphanUtils.java      |  4 +--
 .../java/control/gui/JUnitTestSamplerGui.java      |  2 +-
 .../jmeter/visualizers/MonitorAccumModel.java      |  4 +--
 .../jmeter/visualizers/MonitorHealthPanel.java     |  2 +-
 .../visualizers/MonitorPerformancePanel.java       |  2 +-
 .../apache/jmeter/monitor/model/StatusImpl.java    |  2 +-
 .../apache/jmeter/monitor/model/WorkersImpl.java   |  2 +-
 .../jmeter/monitor/parser/MonitorHandler.java      |  2 +-
 .../jmeter/protocol/ftp/sampler/FTPSampler.java    |  2 +-
 .../jmeter/protocol/http/control/AuthManager.java  |  4 +--
 .../protocol/http/control/CookieManager.java       |  2 +-
 .../protocol/http/control/DNSCacheManager.java     |  2 +-
 .../protocol/http/control/HC4CookieHandler.java    |  4 +--
 .../protocol/http/control/HeaderManager.java       |  6 ++--
 .../protocol/http/control/HttpMirrorServer.java    |  2 +-
 .../protocol/http/control/HttpMirrorThread.java    |  2 +-
 .../protocol/http/control/KerberosManager.java     |  5 ++-
 .../jmeter/protocol/http/gui/CookiePanel.java      |  4 +--
 .../protocol/http/modifier/AnchorModifier.java     |  6 ++--
 .../http/modifier/RegExUserParameters.java         |  2 +-
 .../modifier/UserParameterXMLContentHandler.java   |  6 ++--
 .../protocol/http/modifier/UserSequence.java       |  2 +-
 .../jmeter/protocol/http/parser/HTMLParser.java    |  4 +--
 .../protocol/http/parser/HtmlParsingUtils.java     |  2 +-
 .../http/parser/LagartoBasedHtmlParser.java        |  4 +--
 .../http/proxy/AbstractSamplerCreator.java         |  2 +-
 .../jmeter/protocol/http/proxy/HttpRequestHdr.java |  2 +-
 .../apache/jmeter/protocol/http/proxy/Proxy.java   |  4 +--
 .../jmeter/protocol/http/proxy/ProxyControl.java   |  6 ++--
 .../protocol/http/proxy/SamplerCreatorFactory.java |  2 +-
 .../protocol/http/proxy/gui/ProxyControlGui.java   |  2 +-
 .../jmeter/protocol/http/sampler/HTTPHC3Impl.java  |  4 +--
 .../jmeter/protocol/http/sampler/HTTPHC4Impl.java  |  4 +--
 .../protocol/http/sampler/HTTPHCAbstractImpl.java  |  4 +--
 .../protocol/http/sampler/HTTPSamplerBase.java     |  8 ++---
 .../jmeter/protocol/http/sampler/HttpWebdav.java   |  4 +--
 .../protocol/http/sampler/WebServiceSampler.java   |  2 +-
 .../jmeter/protocol/http/util/ConversionUtils.java |  2 +-
 .../jmeter/protocol/http/util/HTTPArgument.java    |  2 +-
 .../jmeter/protocol/http/util/WSDLHelper.java      |  6 ++--
 .../protocol/http/util/accesslog/LogFilter.java    |  4 +--
 .../http/util/accesslog/SessionFilter.java         |  2 +-
 .../protocol/http/util/accesslog/TCLogParser.java  |  2 +-
 .../protocol/http/visualizers/RequestViewHTTP.java |  2 +-
 .../protocol/java/config/gui/JavaConfigGui.java    |  4 +--
 .../jmeter/protocol/java/sampler/BSFSampler.java   |  2 +-
 .../protocol/java/sampler/BeanShellSampler.java    |  2 +-
 .../protocol/java/sampler/JSR223Sampler.java       |  2 +-
 .../jmeter/protocol/java/sampler/JavaSampler.java  |  2 +-
 .../protocol/jdbc/AbstractJDBCTestElement.java     | 10 +++---
 .../protocol/jdbc/config/DataSourceElement.java    |  2 +-
 .../jdbc/config/DataSourceElementBeanInfo.java     |  2 +-
 .../jmeter/protocol/jdbc/sampler/JDBCSampler.java  |  2 +-
 .../jmeter/protocol/jms/client/ClientPool.java     |  4 +--
 .../protocol/jms/client/InitialContextFactory.java |  2 +-
 .../protocol/jms/client/ReceiveSubscriber.java     |  4 +--
 .../jmeter/protocol/jms/sampler/JMSProperties.java |  2 +-
 .../jmeter/protocol/jms/sampler/JMSSampler.java    |  2 +-
 .../jmeter/protocol/jms/sampler/MessageAdmin.java  |  2 +-
 .../protocol/jms/sampler/PublisherSampler.java     |  2 +-
 .../protocol/ldap/config/gui/LDAPArguments.java    |  6 ++--
 .../protocol/ldap/sampler/LDAPExtSampler.java      | 10 +++---
 .../jmeter/protocol/ldap/sampler/LDAPSampler.java  |  2 +-
 .../jmeter/protocol/ldap/sampler/LdapClient.java   |  2 +-
 .../protocol/ldap/sampler/LdapExtClient.java       |  2 +-
 .../protocol/mail/sampler/MailReaderSampler.java   |  2 +-
 .../jmeter/protocol/smtp/sampler/SmtpSampler.java  |  4 +--
 .../protocol/smtp/sampler/gui/SmtpPanel.java       |  4 +--
 .../smtp/sampler/protocol/SendMailCommand.java     |  2 +-
 .../jmeter/protocol/mongodb/mongo/MongoUtils.java  |  2 +-
 .../jmeter/protocol/system/SystemSampler.java      |  6 ++--
 .../jmeter/protocol/tcp/sampler/TCPSampler.java    |  4 +--
 264 files changed, 493 insertions(+), 505 deletions(-)

diff --git a/src/components/org/apache/jmeter/assertions/CompareAssertion.java b/src/components/org/apache/jmeter/assertions/CompareAssertion.java
index 1bafa8c..c1b3f2c 100644
--- a/src/components/org/apache/jmeter/assertions/CompareAssertion.java
+++ b/src/components/org/apache/jmeter/assertions/CompareAssertion.java
@@ -157,7 +157,7 @@ public class CompareAssertion extends AbstractTestElement implements Assertion,
 
     @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
-        responses = new LinkedList<SampleResult>();
+        responses = new LinkedList<>();
     }
 
     public void iterationEnd(LoopIterationEvent iterEvent) {
diff --git a/src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java b/src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java
index e55b72f..1ec7962 100644
--- a/src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java
+++ b/src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java
@@ -48,7 +48,7 @@ public class CompareAssertionBeanInfo extends BeanInfoSupport {
         p.setValue(TableEditor.OBJECT_PROPERTIES, // These are the names of the get/set methods
                 new String[]{SubstitutionElement.REGEX, SubstitutionElement.SUBSTITUTE});
         p.setValue(NOT_UNDEFINED,Boolean.TRUE);
-        p.setValue(DEFAULT,new ArrayList<Object>());
+        p.setValue(DEFAULT, new ArrayList<>());
         p.setValue(MULTILINE,Boolean.TRUE);
 
     }
diff --git a/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java b/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
index b99e1d7..0915a25 100644
--- a/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
+++ b/src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
@@ -321,7 +321,7 @@ class SMIMEAssertion {
      */
     private static List<String> getEmailFromCert(X509Certificate cert)
             throws CertificateException {
-        List<String> res = new ArrayList<String>();
+        List<String> res = new ArrayList<>();
 
         X509Principal subject = PrincipalUtil.getSubjectX509Principal(cert);
         Iterator<?> addressIt = subject.getValues(X509Name.EmailAddress).iterator();
diff --git a/src/components/org/apache/jmeter/control/CriticalSectionController.java b/src/components/org/apache/jmeter/control/CriticalSectionController.java
index 7714fbc..ceba65b 100644
--- a/src/components/org/apache/jmeter/control/CriticalSectionController.java
+++ b/src/components/org/apache/jmeter/control/CriticalSectionController.java
@@ -70,7 +70,7 @@ public class CriticalSectionController extends GenericController implements
 
     private static final String LOCK_NAME = "CriticalSectionController.lockName"; //$NON-NLS-1$
 
-    private static final ConcurrentHashMap<String, ReentrantLock> LOCK_MAP = new ConcurrentHashMap<String, ReentrantLock>();
+    private static final ConcurrentHashMap<String, ReentrantLock> LOCK_MAP = new ConcurrentHashMap<>();
 
     private transient volatile ReentrantLock currentLock;
 
diff --git a/src/components/org/apache/jmeter/control/IncludeController.java b/src/components/org/apache/jmeter/control/IncludeController.java
index 437f671..3a87149 100644
--- a/src/components/org/apache/jmeter/control/IncludeController.java
+++ b/src/components/org/apache/jmeter/control/IncludeController.java
@@ -173,7 +173,7 @@ public class IncludeController extends GenericController implements ReplaceableC
      * @return HashTree Subset within Test Fragment or Empty HashTree
      */
     private HashTree getProperBranch(HashTree tree) {
-        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<>(tree.list()).iterator();
         while (iter.hasNext()) {
             TestElement item = (TestElement) iter.next();
 
@@ -194,7 +194,7 @@ public class IncludeController extends GenericController implements ReplaceableC
 
 
     private void removeDisabledItems(HashTree tree) {
-        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<>(tree.list()).iterator();
         while (iter.hasNext()) {
             TestElement item = (TestElement) iter.next();
             if (!item.isEnabled()) {
diff --git a/src/components/org/apache/jmeter/control/ModuleController.java b/src/components/org/apache/jmeter/control/ModuleController.java
index e83e9f8..0c496f3 100644
--- a/src/components/org/apache/jmeter/control/ModuleController.java
+++ b/src/components/org/apache/jmeter/control/ModuleController.java
@@ -100,7 +100,7 @@ public class ModuleController extends GenericController implements ReplaceableCo
     }
 
     private void setNodePath() {
-        List<String> nodePath = new ArrayList<String>();
+        List<String> nodePath = new ArrayList<>();
         if (selectedNode != null) {
             TreeNode[] path = selectedNode.getPath();
             for (TreeNode node : path) {
diff --git a/src/components/org/apache/jmeter/control/RandomOrderController.java b/src/components/org/apache/jmeter/control/RandomOrderController.java
index 50a107c..71d5159 100644
--- a/src/components/org/apache/jmeter/control/RandomOrderController.java
+++ b/src/components/org/apache/jmeter/control/RandomOrderController.java
@@ -62,7 +62,7 @@ public class RandomOrderController extends GenericController implements Serializ
         int numElements = this.subControllersAndSamplers.size();
 
         // Create a new list containing numElements null elements.
-        List<TestElement> reordered = new ArrayList<TestElement>(this.subControllersAndSamplers.size());
+        List<TestElement> reordered = new ArrayList<>(this.subControllersAndSamplers.size());
         for (int i = 0; i < numElements; i++) {
             reordered.add(null);
         }
diff --git a/src/components/org/apache/jmeter/extractor/DebugPostProcessor.java b/src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
index 71f7213..3df35e6 100644
--- a/src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
+++ b/src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
@@ -94,7 +94,7 @@ public class DebugPostProcessor extends AbstractTestElement implements PostProce
     }
 
     private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         while (iter.hasNext()) {
             JMeterProperty item = iter.next();
             map.put(item.getName(), item.getStringValue());
@@ -104,7 +104,7 @@ public class DebugPostProcessor extends AbstractTestElement implements PostProce
 
     private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
diff --git a/src/components/org/apache/jmeter/extractor/HtmlExtractor.java b/src/components/org/apache/jmeter/extractor/HtmlExtractor.java
index f9ebfc2..423f969 100644
--- a/src/components/org/apache/jmeter/extractor/HtmlExtractor.java
+++ b/src/components/org/apache/jmeter/extractor/HtmlExtractor.java
@@ -177,7 +177,7 @@ public class HtmlExtractor extends AbstractScopedTestElement implements PostProc
             String expression, String attribute, int matchNumber,
             SampleResult previousResult) {
         int found = 0;
-        List<String> result = new ArrayList<String>();
+        List<String> result = new ArrayList<>();
         if (isScopeVariable()){
             String inputString=vars.get(getVariableName());
             if(!StringUtils.isEmpty(inputString)) {
diff --git a/src/components/org/apache/jmeter/extractor/RegexExtractor.java b/src/components/org/apache/jmeter/extractor/RegexExtractor.java
index 41aa61e..08fdfdc 100644
--- a/src/components/org/apache/jmeter/extractor/RegexExtractor.java
+++ b/src/components/org/apache/jmeter/extractor/RegexExtractor.java
@@ -192,7 +192,7 @@ public class RegexExtractor extends AbstractScopedTestElement implements PostPro
         }
 
         Perl5Matcher matcher = JMeterUtils.getMatcher();
-        List<MatchResult> matches = new ArrayList<MatchResult>();
+        List<MatchResult> matches = new ArrayList<>();
         int found = 0;
 
         if (isScopeVariable()){
@@ -315,7 +315,7 @@ public class RegexExtractor extends AbstractScopedTestElement implements PostPro
             return;
         }
         // Contains Strings and Integers
-        List<Object> combined = new ArrayList<Object>();
+        List<Object> combined = new ArrayList<>();
         String rawTemplate = getTemplate();
         PatternMatcher matcher = JMeterUtils.getMatcher();
         Pattern templatePattern = JMeterUtils.getPatternCache().getPattern("\\$(\\d+)\\$"  // $NON-NLS-1$
diff --git a/src/components/org/apache/jmeter/extractor/XPathExtractor.java b/src/components/org/apache/jmeter/extractor/XPathExtractor.java
index a767dcb..9a16cba 100644
--- a/src/components/org/apache/jmeter/extractor/XPathExtractor.java
+++ b/src/components/org/apache/jmeter/extractor/XPathExtractor.java
@@ -124,7 +124,7 @@ public class XPathExtractor extends AbstractScopedTestElement implements
         vars.put(matchNR, "0"); // In case parse fails // $NON-NLS-1$
         vars.remove(concat(refName,"1")); // In case parse fails // $NON-NLS-1$
 
-        List<String> matches = new ArrayList<String>();
+        List<String> matches = new ArrayList<>();
         try{
             if (isScopeVariable()){
                 String inputString=vars.get(getVariableName());
diff --git a/src/components/org/apache/jmeter/modifiers/UserParameters.java b/src/components/org/apache/jmeter/modifiers/UserParameters.java
index 1510d6d..5083f66 100644
--- a/src/components/org/apache/jmeter/modifiers/UserParameters.java
+++ b/src/components/org/apache/jmeter/modifiers/UserParameters.java
@@ -123,7 +123,7 @@ public class UserParameters extends AbstractTestElement implements Serializable,
         if (threadValues.size() > 0) {
             return (CollectionProperty) threadValues.get(getThreadContext().getThreadNum() % threadValues.size());
         }
-        return new CollectionProperty("noname", new LinkedList<Object>());
+        return new CollectionProperty("noname", new LinkedList<>());
     }
 
     public boolean isPerIteration() {
diff --git a/src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java b/src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
index 50b3c9a..b70d4e5 100644
--- a/src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
+++ b/src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
@@ -131,7 +131,7 @@ public class UserParametersGui extends AbstractPreProcessorGui {
         GuiUtils.stopTableEditing(paramTable);
         UserParameters userParams = ((UserParameters) params);
         userParams.setNames(new CollectionProperty(UserParameters.NAMES, tableModel.getColumnData(NAME_COL_RESOURCE)));
-        CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList<Object>());
+        CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList<>());
         log.debug("making threadlists from gui");
         for (int col = 1; col < tableModel.getColumnCount(); col++) {
             threadLists.addItem(tableModel.getColumnData(getUserColName(col)));
diff --git a/src/components/org/apache/jmeter/reporters/MailerModel.java b/src/components/org/apache/jmeter/reporters/MailerModel.java
index 048e654..3a33c58 100644
--- a/src/components/org/apache/jmeter/reporters/MailerModel.java
+++ b/src/components/org/apache/jmeter/reporters/MailerModel.java
@@ -152,7 +152,7 @@ public class MailerModel extends AbstractTestElement implements Serializable {
      */
     public List<String> getAddressList() {
         String addressees = getToAddress();
-        List<String> addressList = new ArrayList<String>();
+        List<String> addressList = new ArrayList<>();
 
         if (addressees != null) {
 
diff --git a/src/components/org/apache/jmeter/sampler/DebugSampler.java b/src/components/org/apache/jmeter/sampler/DebugSampler.java
index 2a6490c..7932209 100644
--- a/src/components/org/apache/jmeter/sampler/DebugSampler.java
+++ b/src/components/org/apache/jmeter/sampler/DebugSampler.java
@@ -43,7 +43,7 @@ public class DebugSampler extends AbstractSampler implements TestBean {
 
     private static final long serialVersionUID = 232L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -91,7 +91,7 @@ public class DebugSampler extends AbstractSampler implements TestBean {
 
     private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
diff --git a/src/components/org/apache/jmeter/sampler/TestAction.java b/src/components/org/apache/jmeter/sampler/TestAction.java
index 17f48bf..64e3ac7 100644
--- a/src/components/org/apache/jmeter/sampler/TestAction.java
+++ b/src/components/org/apache/jmeter/sampler/TestAction.java
@@ -46,7 +46,7 @@ public class TestAction extends AbstractSampler implements Interruptible {
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
diff --git a/src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java b/src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
index 002a36c..d346dd5 100644
--- a/src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
+++ b/src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
@@ -98,7 +98,7 @@ public class ConstantThroughputTimer extends AbstractTestElement implements Time
 
     //For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
     private static final ConcurrentMap<AbstractThreadGroup, ThroughputInfo> threadGroupsInfoMap =
-        new ConcurrentHashMap<AbstractThreadGroup, ThroughputInfo>();
+            new ConcurrentHashMap<>();
 
 
     /**
diff --git a/src/components/org/apache/jmeter/visualizers/PropertyControlGui.java b/src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
index c07fbf9..5a32b3a 100644
--- a/src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
+++ b/src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
@@ -149,7 +149,7 @@ public class PropertyControlGui extends AbstractConfigGui implements
             return;
         }
         Set<Map.Entry<Object, Object>> s = p.entrySet();
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
diff --git a/src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java b/src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
index 333957c..9705181 100644
--- a/src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
+++ b/src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
@@ -123,7 +123,7 @@ public class RenderAsCssJQuery implements ResultRenderer, ActionListener {
 
     private String process(String textToParse) {
         try {
-            List<String> result = new ArrayList<String>();
+            List<String> result = new ArrayList<>();
             Extractor extractor = HtmlExtractor.getExtractorImpl(cssJqueryLabeledChoice.getText());
             final int nbFound = extractor.extract(
                     cssJqueryField.getText(), attributeField.getText(), -1, textToParse, result, 0, null);
diff --git a/src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java b/src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java
index 11cf1b4..ef78392 100644
--- a/src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java
+++ b/src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java
@@ -126,7 +126,7 @@ public class RenderAsRegexp implements ResultRenderer, ActionListener {
         } catch (MalformedCachePatternException e) {
             return e.toString();
         }
-        List<MatchResult> matches = new LinkedList<MatchResult>();
+        List<MatchResult> matches = new LinkedList<>();
         while (matcher.contains(input, pattern)) {
             matches.add(matcher.getMatch());
         }
diff --git a/src/components/org/apache/jmeter/visualizers/RenderAsXPath.java b/src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
index dbc6b83..0ab7fbe 100644
--- a/src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
+++ b/src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
@@ -135,7 +135,7 @@ public class RenderAsXPath implements ResultRenderer, ActionListener {
     private String process(String textToParse, XPathExtractor extractor) {
         try {
             Document doc = parseResponse(textToParse, extractor);
-            List<String> matchStrings = new ArrayList<String>();
+            List<String> matchStrings = new ArrayList<>();
             XPathUtil.putValuesForXPathInList(doc, xpathExpressionField.getText(),
                     matchStrings, extractor.getFragment());
             StringBuilder builder = new StringBuilder();
diff --git a/src/components/org/apache/jmeter/visualizers/RequestPanel.java b/src/components/org/apache/jmeter/visualizers/RequestPanel.java
index 073ad94..8bae3fb 100644
--- a/src/components/org/apache/jmeter/visualizers/RequestPanel.java
+++ b/src/components/org/apache/jmeter/visualizers/RequestPanel.java
@@ -51,7 +51,7 @@ public class RequestPanel {
      * and Create Request Panel
      */
     public RequestPanel() {
-        listRequestView = new LinkedList<RequestView>();
+        listRequestView = new LinkedList<>();
         List<String> classesToAdd = Collections.<String> emptyList();
         try {
             classesToAdd = JMeterUtils.findClassesThatExtend(RequestView.class);
diff --git a/src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
index 1e5f50e..bc3981d 100644
--- a/src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
@@ -261,12 +261,12 @@ public class RespTimeGraphVisualizer extends AbstractVisualizer implements Actio
     /**
      * We want to retain insertion order, so LinkedHashMap is necessary
      */
-    private final Map<String, RespTimeGraphLineBean> seriesNames = new LinkedHashMap<String, RespTimeGraphLineBean>();
+    private final Map<String, RespTimeGraphLineBean> seriesNames = new LinkedHashMap<>();
 
     /**
      * We want to retain insertion order, so LinkedHashMap is necessary
      */
-    private final Map<String, Map<Long, StatCalculatorLong>> pList = new LinkedHashMap<String, Map<Long, StatCalculatorLong>>();
+    private final Map<String, Map<Long, StatCalculatorLong>> pList = new LinkedHashMap<>();
 
     private long durationTest = 0;
     
@@ -278,7 +278,7 @@ public class RespTimeGraphVisualizer extends AbstractVisualizer implements Actio
 
     private final List<Color> listColors = Colors.getColors();
 
-    private final List<RespTimeGraphDataBean> internalList = new ArrayList<RespTimeGraphDataBean>(); // internal list of all results
+    private final List<RespTimeGraphDataBean> internalList = new ArrayList<>(); // internal list of all results
 
     public RespTimeGraphVisualizer() {
         init();
@@ -331,7 +331,7 @@ public class RespTimeGraphVisualizer extends AbstractVisualizer implements Actio
                             value.addValue(respTime, 1);
                         } else {
                             // We want to retain insertion order, so LinkedHashMap is necessary
-                            Map<Long, StatCalculatorLong> newSubList = new LinkedHashMap<Long, StatCalculatorLong>(5);
+                            Map<Long, StatCalculatorLong> newSubList = new LinkedHashMap<>(5);
                             StatCalculatorLong helper = new StatCalculatorLong();
                             helper.addValue(Long.valueOf(sampleResult.getTime()),1);
                             newSubList.put(startTimeIntervalLong,  helper);
@@ -403,7 +403,7 @@ public class RespTimeGraphVisualizer extends AbstractVisualizer implements Actio
 
         double nanLast = 0;
         double nanBegin = 0;
-        List<Double> nanList = new ArrayList<Double>();
+        List<Double> nanList = new ArrayList<>();
         int s = 0;
         for (Map<Long, StatCalculatorLong> subList : pList.values()) {
             int idx = 0;
@@ -557,7 +557,7 @@ public class RespTimeGraphVisualizer extends AbstractVisualizer implements Actio
                 // Reload data form internal list of results
                 synchronized (lockInterval) {
                     if (internalList.size() >= 2) {
-                        List<RespTimeGraphDataBean> tempList = new ArrayList<RespTimeGraphDataBean>();
+                        List<RespTimeGraphDataBean> tempList = new ArrayList<>();
                         tempList.addAll(internalList);
                         this.clearData();
                         for (RespTimeGraphDataBean data : tempList) {
diff --git a/src/components/org/apache/jmeter/visualizers/StatGraphProperties.java b/src/components/org/apache/jmeter/visualizers/StatGraphProperties.java
index e560247..5c601ce 100644
--- a/src/components/org/apache/jmeter/visualizers/StatGraphProperties.java
+++ b/src/components/org/apache/jmeter/visualizers/StatGraphProperties.java
@@ -35,7 +35,7 @@ public class StatGraphProperties {
     public static final String[] strokeWidth = { "1.0f", "1.5f", "2.0f", "2.5f", "3.0f", "3.5f", "4.0f", "4.5f", "5.0f", "5.5f", "6.0f", "6.5f"};
 
     public static Map<String, String> getFontNameMap() {
-        Map<String, String> fontNameMap = new LinkedHashMap<String, String>(2);
+        Map<String, String> fontNameMap = new LinkedHashMap<>(2);
         fontNameMap.put(JMeterUtils.getResString("font.sansserif"), "SansSerif"); //$NON-NLS-1$ //$NON-NLS-1$
         fontNameMap.put(JMeterUtils.getResString("font.serif"), "Serif"); //$NON-NLS-1$
         return fontNameMap;
@@ -43,7 +43,7 @@ public class StatGraphProperties {
 
     @SuppressWarnings("boxing")
     public static Map<String, Integer> getFontStyleMap() {
-        Map<String, Integer> fontStyleMap = new LinkedHashMap<String, Integer>(3);
+        Map<String, Integer> fontStyleMap = new LinkedHashMap<>(3);
         fontStyleMap.put(JMeterUtils.getResString("fontstyle.normal"), Font.PLAIN); //$NON-NLS-1$
         fontStyleMap.put(JMeterUtils.getResString("fontstyle.bold"), Font.BOLD); //$NON-NLS-1$
         fontStyleMap.put(JMeterUtils.getResString("fontstyle.italic"), Font.ITALIC); //$NON-NLS-1$
@@ -52,7 +52,7 @@ public class StatGraphProperties {
 
     @SuppressWarnings("boxing")
     public static Map<String, Integer> getPlacementNameMap() {
-        Map<String, Integer> placementNameMap = new LinkedHashMap<String, Integer>(4);
+        Map<String, Integer> placementNameMap = new LinkedHashMap<>(4);
         placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.bottom"), LegendAreaProperties.BOTTOM); //$NON-NLS-1$
         placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.right"), LegendAreaProperties.RIGHT); //$NON-NLS-1$
         placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.left"), LegendAreaProperties.LEFT); //$NON-NLS-1$
@@ -62,7 +62,7 @@ public class StatGraphProperties {
     
     public static Map<String, Shape> getPointShapeMap() {
         // We want to retain insertion order, so LinkedHashMap is necessary
-        Map<String, Shape> pointShapeMap = new LinkedHashMap<String, Shape>(5);
+        Map<String, Shape> pointShapeMap = new LinkedHashMap<>(5);
         pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_circle"), PointChartProperties.SHAPE_CIRCLE); //$NON-NLS-1$
         pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_diamond"), PointChartProperties.SHAPE_DIAMOND); //$NON-NLS-1$
         pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_square"), PointChartProperties.SHAPE_SQUARE); //$NON-NLS-1$
diff --git a/src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java b/src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
index 5d659a2..5185707 100644
--- a/src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
@@ -157,8 +157,7 @@ public class StatGraphVisualizer extends AbstractVisualizer implements Clearable
      */
     private final transient Object lock = new Object();
     
-    private final Map<String, SamplingStatCalculator> tableRows =
-        new ConcurrentHashMap<String, SamplingStatCalculator>();
+    private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();
 
     private AxisGraph graphPanel = null;
 
@@ -219,7 +218,7 @@ public class StatGraphVisualizer extends AbstractVisualizer implements Clearable
 
     private JComboBox<String> columnsList = new JComboBox<>(GRAPH_COLUMNS);
 
-    private List<BarGraph> eltList = new ArrayList<BarGraph>();
+    private List<BarGraph> eltList = new ArrayList<>();
 
     private JCheckBox columnSelection = new JCheckBox(JMeterUtils.getResString("aggregate_graph_column_selection"), false); //$NON-NLS-1$
 
@@ -597,11 +596,11 @@ public class StatGraphVisualizer extends AbstractVisualizer implements Clearable
      * @return the data from the model
      */
     public static List<List<Object>> getAllTableData(ObjectTableModel model, Format[] formats) {
-        List<List<Object>> data = new ArrayList<List<Object>>();
+        List<List<Object>> data = new ArrayList<>();
         if (model.getRowCount() > 0) {
             for (int rw=0; rw < model.getRowCount(); rw++) {
                 int cols = model.getColumnCount();
-                List<Object> column = new ArrayList<Object>();
+                List<Object> column = new ArrayList<>();
                 data.add(column);
                 for (int idx=0; idx < cols; idx++) {
                     Object val = model.getValueAt(rw,idx);
diff --git a/src/components/org/apache/jmeter/visualizers/StatVisualizer.java b/src/components/org/apache/jmeter/visualizers/StatVisualizer.java
index b536326..0bcf1da 100644
--- a/src/components/org/apache/jmeter/visualizers/StatVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/StatVisualizer.java
@@ -88,8 +88,7 @@ public class StatVisualizer extends AbstractVisualizer implements Clearable, Act
      */
     private final transient Object lock = new Object();
 
-    private final Map<String, SamplingStatCalculator> tableRows =
-        new ConcurrentHashMap<String, SamplingStatCalculator>();
+    private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();
 
     public StatVisualizer() {
         super();
diff --git a/src/components/org/apache/jmeter/visualizers/SummaryReport.java b/src/components/org/apache/jmeter/visualizers/SummaryReport.java
index 7772a9e..af12a91 100644
--- a/src/components/org/apache/jmeter/visualizers/SummaryReport.java
+++ b/src/components/org/apache/jmeter/visualizers/SummaryReport.java
@@ -104,8 +104,7 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
      */
     private final transient Object lock = new Object();
 
-    private final Map<String, Calculator> tableRows =
-        new ConcurrentHashMap<String, Calculator>();
+    private final Map<String, Calculator> tableRows = new ConcurrentHashMap<>();
 
     // Column renderers
     private static final TableCellRenderer[] RENDERERS =
diff --git a/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java b/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
index 2176e7a..30eecc0 100644
--- a/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
+++ b/src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
@@ -322,7 +322,7 @@ implements ActionListener, TreeSelectionListener, Clearable, ItemListener {
         }
         String textRenderer = JMeterUtils.getResString("view_results_render_text"); // $NON-NLS-1$
         Object textObject = null;
-        Map<String, ResultRenderer> map = new HashMap<String, ResultRenderer>(classesToAdd.size());
+        Map<String, ResultRenderer> map = new HashMap<>(classesToAdd.size());
         for (String clazz : classesToAdd) {
             try {
                 // Instantiate render classes
diff --git a/src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java b/src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
index 5cd28cd..d701846 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
@@ -56,7 +56,7 @@ public abstract class AbstractBackendListenerClient implements BackendListenerCl
     private static final Logger LOGGER = LoggingManager.getLoggerForClass();
     private UserMetric userMetrics = new UserMetric();
     
-    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<String, SamplerMetric>();
+    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
 
     /* Implements BackendListenerClient.setupTest(BackendListenerContext) */
     @Override
diff --git a/src/components/org/apache/jmeter/visualizers/backend/BackendListener.java b/src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
index eab20c3..7f2e42b 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
@@ -111,8 +111,8 @@ public class BackendListener extends AbstractTestElement
      * per server. But we need the total to be shared.
      */
     //@GuardedBy("LOCK") - needed to ensure consistency between this and instanceCount
-    private static final Map<String, ListenerClientData> queuesByTestElementName = 
-            new ConcurrentHashMap<String, ListenerClientData>();
+    private static final Map<String, ListenerClientData> queuesByTestElementName =
+            new ConcurrentHashMap<>();
 
     /**
      * Create a BackendListener.
@@ -208,7 +208,7 @@ public class BackendListener extends AbstractTestElement
         @Override
         public void run() {
             boolean isDebugEnabled = LOGGER.isDebugEnabled();
-            List<SampleResult> sampleResults = new ArrayList<SampleResult>(listenerClientData.queue.size());
+            List<SampleResult> sampleResults = new ArrayList<>(listenerClientData.queue.size());
             try {
                 try {
 
@@ -322,7 +322,7 @@ public class BackendListener extends AbstractTestElement
                 BackendListenerContext context = new BackendListenerContext((Arguments)getArguments().clone());
 
                 listenerClientData = new ListenerClientData();
-                listenerClientData.queue = new ArrayBlockingQueue<SampleResult>(queueSize); 
+                listenerClientData.queue = new ArrayBlockingQueue<>(queueSize);
                 listenerClientData.queueWaits = new AtomicLong(0L);
                 listenerClientData.queueWaitTime = new AtomicLong(0L);
                 listenerClientData.latch = new CountDownLatch(1);
diff --git a/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java b/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
index 4be2bed..9881649 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
@@ -110,7 +110,7 @@ public class BackendListenerGui extends AbstractListenerGui implements ActionLis
      * @return a panel containing the relevant components
      */
     private JPanel createClassnamePanel() {
-        List<String> possibleClasses = new ArrayList<String>();
+        List<String> possibleClasses = new ArrayList<>();
 
         try {
             // Find all the classes which implement the BackendListenerClient
@@ -244,7 +244,7 @@ public class BackendListenerGui extends AbstractListenerGui implements ActionLis
      */
     private static final boolean checkContainsClassName(ComboBoxModel<?> model, String className) {
         int size = model.getSize();
-        Set<String> set = new HashSet<String>(size);
+        Set<String> set = new HashSet<>(size);
         for (int i = 0; i < size; i++) {
             set.add((String)model.getElementAt(i));
         }
diff --git a/src/components/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java b/src/components/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java
index 0d2842f..35f5758 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java
@@ -47,7 +47,7 @@ abstract class AbstractGraphiteMetricsSender implements GraphiteMetricsSender {
         config.setMinEvictableIdleTimeMillis(TimeUnit.MINUTES.toMillis(3));
         config.setTimeBetweenEvictionRunsMillis(TimeUnit.MINUTES.toMillis(3));
 
-        return new GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream>(
+        return new GenericKeyedObjectPool<>(
                 new SocketOutputStreamPoolFactory(SOCKET_CONNECT_TIMEOUT_MS, SOCKET_TIMEOUT), config);
     }
     
diff --git a/src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java b/src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
index 7a9fb49..78f456f 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
@@ -233,9 +233,9 @@ public class GraphiteBackendListenerClient extends AbstractBackendListenerClient
         rootMetricsPrefix = context.getParameter("rootMetricsPrefix", DEFAULT_METRICS_PREFIX);
         String percentilesAsString = context.getParameter("percentiles", DEFAULT_METRICS_PREFIX);
         String[]  percentilesStringArray = percentilesAsString.split(SEPARATOR);
-        okPercentiles = new HashMap<String, Float>(percentilesStringArray.length);
-        koPercentiles = new HashMap<String, Float>(percentilesStringArray.length);
-        allPercentiles = new HashMap<String, Float>(percentilesStringArray.length);
+        okPercentiles = new HashMap<>(percentilesStringArray.length);
+        koPercentiles = new HashMap<>(percentilesStringArray.length);
+        allPercentiles = new HashMap<>(percentilesStringArray.length);
         DecimalFormat format = new DecimalFormat("0.##");
         for (int i = 0; i < percentilesStringArray.length; i++) {
             if(!StringUtils.isEmpty(percentilesStringArray[i].trim())) {
@@ -260,7 +260,7 @@ public class GraphiteBackendListenerClient extends AbstractBackendListenerClient
         this.graphiteMetricsManager = (GraphiteMetricsSender) clazz.newInstance();
         graphiteMetricsManager.setup(graphiteHost, graphitePort, rootMetricsPrefix);
         String[] samplers = samplersList.split(SEPARATOR);
-        samplersToFilter = new HashSet<String>();
+        samplersToFilter = new HashSet<>();
         for (String samplerName : samplers) {
             samplersToFilter.add(samplerName);
         }
diff --git a/src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java b/src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java
index 8cb428e..03435f3 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java
@@ -53,7 +53,7 @@ class PickleGraphiteMetricsSender extends AbstractGraphiteMetricsSender {
     private String prefix;
 
     // graphite expects a python-pickled list of nested tuples.
-    private List<MetricTuple> metrics = new LinkedList<MetricTuple>();
+    private List<MetricTuple> metrics = new LinkedList<>();
 
     private GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool;
 
diff --git a/src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStreamPoolFactory.java b/src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStreamPoolFactory.java
index 767884a..0a4854e 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStreamPoolFactory.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStreamPoolFactory.java
@@ -81,6 +81,6 @@ public class SocketOutputStreamPoolFactory
 
     @Override
     public PooledObject<SocketOutputStream> wrap(SocketOutputStream outputStream) {
-        return new DefaultPooledObject<SocketOutputStream>(outputStream);
+        return new DefaultPooledObject<>(outputStream);
     }
 }
diff --git a/src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java b/src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java
index a980d44..1b6b361 100644
--- a/src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java
+++ b/src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java
@@ -36,7 +36,7 @@ class TextGraphiteMetricsSender extends AbstractGraphiteMetricsSender {
         
     private String prefix;
 
-    private List<MetricTuple> metrics = new ArrayList<MetricTuple>();
+    private List<MetricTuple> metrics = new ArrayList<>();
 
     private GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool;
 
diff --git a/src/components/org/apache/jmeter/visualizers/utils/Colors.java b/src/components/org/apache/jmeter/visualizers/utils/Colors.java
index 3b3ffa2..9fab901 100644
--- a/src/components/org/apache/jmeter/visualizers/utils/Colors.java
+++ b/src/components/org/apache/jmeter/visualizers/utils/Colors.java
@@ -78,7 +78,7 @@ public class Colors {
 
         String[] oList = order.split(ENTRY_SEP);
 
-        List<Color> listColors = new ArrayList<Color>();
+        List<Color> listColors = new ArrayList<>();
         for (String key : oList) {
             String trimmed = key.trim();
             String property = p.getProperty(trimmed);
diff --git a/src/core/org/apache/jmeter/JMeter.java b/src/core/org/apache/jmeter/JMeter.java
index 8ff7617..9df9358 100644
--- a/src/core/org/apache/jmeter/JMeter.java
+++ b/src/core/org/apache/jmeter/JMeter.java
@@ -756,7 +756,8 @@ public class JMeter implements JMeterPlugin {
             treeModel.addSubTree(tree, root);
 
             // Hack to resolve ModuleControllers in non GUI mode
-            SearchByClass<ReplaceableController> replaceableControllers = new SearchByClass<ReplaceableController>(ReplaceableController.class);
+            SearchByClass<ReplaceableController> replaceableControllers =
+                    new SearchByClass<>(ReplaceableController.class);
             tree.traverse(replaceableControllers);
             Collection<ReplaceableController> replaceableControllersRes = replaceableControllers.getSearchResults();
             for (Iterator<ReplaceableController> iter = replaceableControllersRes.iterator(); iter.hasNext();) {
@@ -792,7 +793,7 @@ public class JMeter implements JMeterPlugin {
             // when NON GUI mode is used
             tree.add(tree.getArray()[0], new RemoteThreadsListenerTestElement());
 
-            List<JMeterEngine> engines = new LinkedList<JMeterEngine>();
+            List<JMeterEngine> engines = new LinkedList<>();
             tree.add(tree.getArray()[0], new ListenToTest(parent, (remoteStart && remoteStop) ? engines : null));
             println("Created the tree successfully using "+testFile);
             if (!remoteStart) {
@@ -804,7 +805,7 @@ public class JMeter implements JMeterPlugin {
                 engines.add(engine);
             } else {
                 java.util.StringTokenizer st = new java.util.StringTokenizer(remote_hosts_string, ",");//$NON-NLS-1$
-                List<String> hosts = new LinkedList<String>();
+                List<String> hosts = new LinkedList<>();
                 while (st.hasMoreElements()) {
                     hosts.add((String) st.nextElement());
                 }
@@ -829,7 +830,7 @@ public class JMeter implements JMeterPlugin {
      * @param tree The {@link HashTree} to convert
      */
     public static void convertSubTree(HashTree tree) {
-        LinkedList<Object> copyList = new LinkedList<Object>(tree.list());
+        LinkedList<Object> copyList = new LinkedList<>(tree.list());
         for (Object o  : copyList) {
             if (o instanceof TestElement) {
                 TestElement item = (TestElement) o;
diff --git a/src/core/org/apache/jmeter/NewDriver.java b/src/core/org/apache/jmeter/NewDriver.java
index dd75ae6..c4579c7 100644
--- a/src/core/org/apache/jmeter/NewDriver.java
+++ b/src/core/org/apache/jmeter/NewDriver.java
@@ -52,7 +52,7 @@ public final class NewDriver {
     private static final String jmDir;
 
     static {
-        final List<URL> jars = new LinkedList<URL>();
+        final List<URL> jars = new LinkedList<>();
         final String initial_classpath = System.getProperty(JAVA_CLASS_PATH);
 
         // Find JMeter home dir from the initial classpath
diff --git a/src/core/org/apache/jmeter/config/Arguments.java b/src/core/org/apache/jmeter/config/Arguments.java
index 2b5f811..a1e0b95 100644
--- a/src/core/org/apache/jmeter/config/Arguments.java
+++ b/src/core/org/apache/jmeter/config/Arguments.java
@@ -81,7 +81,7 @@ public class Arguments extends ConfigTestElement implements Serializable {
      */
     public Map<String, String> getArgumentsAsMap() {
         PropertyIterator iter = getArguments().iterator();
-        Map<String, String> argMap = new LinkedHashMap<String, String>();
+        Map<String, String> argMap = new LinkedHashMap<>();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();
             // Because CollectionProperty.mergeIn will not prevent adding two
diff --git a/src/core/org/apache/jmeter/control/GenericController.java b/src/core/org/apache/jmeter/control/GenericController.java
index 5d1e73f..3409761 100644
--- a/src/core/org/apache/jmeter/control/GenericController.java
+++ b/src/core/org/apache/jmeter/control/GenericController.java
@@ -54,8 +54,7 @@ public class GenericController extends AbstractTestElement implements Controller
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private transient LinkedList<LoopIterationListener> iterationListeners =
-        new LinkedList<LoopIterationListener>();
+    private transient LinkedList<LoopIterationListener> iterationListeners = new LinkedList<>();
 
     // Only create the map if it is required
     private transient ConcurrentMap<TestElement, Object> children = 
@@ -64,8 +63,7 @@ public class GenericController extends AbstractTestElement implements Controller
     private static final Object DUMMY = new Object();
 
     // May be replaced by RandomOrderController
-    protected transient List<TestElement> subControllersAndSamplers =
-        new ArrayList<TestElement>();
+    protected transient List<TestElement> subControllersAndSamplers = new ArrayList<>();
 
     /**
      * Index of current sub controller or sampler
@@ -422,13 +420,9 @@ public class GenericController extends AbstractTestElement implements Controller
     }
     
     protected Object readResolve(){
-        iterationListeners =
-                new LinkedList<LoopIterationListener>();
-        children = 
-                TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();
-        
-        subControllersAndSamplers =
-                new ArrayList<TestElement>();
+        iterationListeners = new LinkedList<>();
+        children = TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();
+        subControllersAndSamplers = new ArrayList<>();
 
         return this;
     }
diff --git a/src/core/org/apache/jmeter/control/TransactionSampler.java b/src/core/org/apache/jmeter/control/TransactionSampler.java
index c6cc2dc..150a0b3 100644
--- a/src/core/org/apache/jmeter/control/TransactionSampler.java
+++ b/src/core/org/apache/jmeter/control/TransactionSampler.java
@@ -41,7 +41,7 @@ import org.apache.jmeter.testelement.TestElement;
 public class TransactionSampler extends AbstractSampler {
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
diff --git a/src/core/org/apache/jmeter/engine/DistributedRunner.java b/src/core/org/apache/jmeter/engine/DistributedRunner.java
index a272c0f..ec073e3 100644
--- a/src/core/org/apache/jmeter/engine/DistributedRunner.java
+++ b/src/core/org/apache/jmeter/engine/DistributedRunner.java
@@ -57,7 +57,7 @@ public class DistributedRunner {
     private final int retriesNumber;
     private PrintStream stdout = new PrintStream(new SilentOutputStream());
     private PrintStream stderr = new PrintStream(new SilentOutputStream());
-    private final Map<String, JMeterEngine> engines = new HashMap<String, JMeterEngine>();
+    private final Map<String, JMeterEngine> engines = new HashMap<>();
 
 
     public DistributedRunner() {
@@ -73,7 +73,7 @@ public class DistributedRunner {
 
     public void init(List<String> addresses, HashTree tree) {
         // converting list into mutable version
-        List<String> addrs = new LinkedList<String>(addresses);
+        List<String> addrs = new LinkedList<>(addresses);
 
         for (int tryNo = 0; tryNo < retriesNumber; tryNo++) {
             if (tryNo > 0) {
@@ -144,7 +144,7 @@ public class DistributedRunner {
      * Start all engines that were previously initiated
      */
     public void start() {
-        List<String> addresses = new LinkedList<String>();
+        List<String> addresses = new LinkedList<>();
         addresses.addAll(engines.keySet());
         start(addresses);
     }
@@ -169,7 +169,7 @@ public class DistributedRunner {
      * Stop all engines that were previously initiated
      */
     public void stop() {
-        List<String> addresses = new LinkedList<String>();
+        List<String> addresses = new LinkedList<>();
         addresses.addAll(engines.keySet());
         stop(addresses);
     }
diff --git a/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java b/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
index f4999bd..0af9902 100644
--- a/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
+++ b/src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
@@ -80,7 +80,7 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
      * Only used by the function parser so far.
      * The list is merged with the testListeners and then cleared.
      */
-    private static final List<TestStateListener> testList = new ArrayList<TestStateListener>();
+    private static final List<TestStateListener> testList = new ArrayList<>();
 
     /** Whether to call System.exit(0) in exit after stopping RMI */
     private static final boolean REMOTE_SYSTEM_EXIT = JMeterUtils.getPropDefault("jmeterengine.remote.system.exit", false);
@@ -111,7 +111,7 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
     private final String host;
 
     // The list of current thread groups; may be setUp, main, or tearDown.
-    private final List<AbstractThreadGroup> groups = new CopyOnWriteArrayList<AbstractThreadGroup>();
+    private final List<AbstractThreadGroup> groups = new CopyOnWriteArrayList<>();
 
     public static void stopEngineNow() {
         if (engine != null) {// May be null if called from Unit test
@@ -164,7 +164,7 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
     @Override
     public void configure(HashTree testTree) {
         // Is testplan serialised?
-        SearchByClass<TestPlan> testPlan = new SearchByClass<TestPlan>(TestPlan.class);
+        SearchByClass<TestPlan> testPlan = new SearchByClass<>(TestPlan.class);
         testTree.traverse(testPlan);
         Object[] plan = testPlan.getSearchResults().toArray();
         if (plan.length == 0) {
@@ -323,7 +323,7 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
          * Notification of test listeners needs to happen after function
          * replacement, but before setting RunningVersion to true.
          */
-        SearchByClass<TestStateListener> testListeners = new SearchByClass<TestStateListener>(TestStateListener.class); // TL - S&E
+        SearchByClass<TestStateListener> testListeners = new SearchByClass<>(TestStateListener.class); // TL - S&E
         test.traverse(testListeners);
 
         // Merge in any additional test listeners
@@ -338,9 +338,9 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
         List<?> testLevelElements = new LinkedList<Object>(test.list(test.getArray()[0]));
         removeThreadGroups(testLevelElements);
 
-        SearchByClass<SetupThreadGroup> setupSearcher = new SearchByClass<SetupThreadGroup>(SetupThreadGroup.class);
-        SearchByClass<AbstractThreadGroup> searcher = new SearchByClass<AbstractThreadGroup>(AbstractThreadGroup.class);
-        SearchByClass<PostThreadGroup> postSearcher = new SearchByClass<PostThreadGroup>(PostThreadGroup.class);
+        SearchByClass<SetupThreadGroup> setupSearcher = new SearchByClass<>(SetupThreadGroup.class);
+        SearchByClass<AbstractThreadGroup> searcher = new SearchByClass<>(AbstractThreadGroup.class);
+        SearchByClass<PostThreadGroup> postSearcher = new SearchByClass<>(PostThreadGroup.class);
 
         test.traverse(setupSearcher);
         test.traverse(searcher);
diff --git a/src/core/org/apache/jmeter/engine/TreeCloner.java b/src/core/org/apache/jmeter/engine/TreeCloner.java
index c114a03..4b25857 100644
--- a/src/core/org/apache/jmeter/engine/TreeCloner.java
+++ b/src/core/org/apache/jmeter/engine/TreeCloner.java
@@ -33,7 +33,7 @@ public class TreeCloner implements HashTreeTraverser {
 
     private final ListedHashTree newTree;
 
-    private final LinkedList<Object> objects = new LinkedList<Object>();
+    private final LinkedList<Object> objects = new LinkedList<>();
 
     private final boolean honourNoThreadClone;
 
diff --git a/src/core/org/apache/jmeter/engine/util/CompoundVariable.java b/src/core/org/apache/jmeter/engine/util/CompoundVariable.java
index 0eb1244..1a53ab5 100644
--- a/src/core/org/apache/jmeter/engine/util/CompoundVariable.java
+++ b/src/core/org/apache/jmeter/engine/util/CompoundVariable.java
@@ -48,14 +48,13 @@ public class CompoundVariable implements Function {
     private static final FunctionParser functionParser = new FunctionParser();
 
     // Created during class init; not modified thereafter 
-    private static final Map<String, Class<? extends Function>> functions =
-        new HashMap<String, Class<? extends Function>>();
+    private static final Map<String, Class<? extends Function>> functions = new HashMap<>();
 
     private boolean hasFunction, isDynamic;
 
     private String permanentResults;
 
-    private LinkedList<Object> compiledComponents = new LinkedList<Object>();
+    private LinkedList<Object> compiledComponents = new LinkedList<>();
 
     static {
         try {
@@ -171,7 +170,7 @@ public class CompoundVariable implements Function {
     /** {@inheritDoc} */
     @Override
     public List<String> getArgumentDesc() {
-        return new LinkedList<String>();
+        return new LinkedList<>();
     }
 
     public void clear() {
diff --git a/src/core/org/apache/jmeter/engine/util/FunctionParser.java b/src/core/org/apache/jmeter/engine/util/FunctionParser.java
index 830a3bb..7cffe30 100644
--- a/src/core/org/apache/jmeter/engine/util/FunctionParser.java
+++ b/src/core/org/apache/jmeter/engine/util/FunctionParser.java
@@ -55,7 +55,7 @@ class FunctionParser {
      */
     LinkedList<Object> compileString(String value) throws InvalidVariableException {
         StringReader reader = new StringReader(value);
-        LinkedList<Object> result = new LinkedList<Object>();
+        LinkedList<Object> result = new LinkedList<>();
         StringBuilder buffer = new StringBuilder();
         char previous = ' '; // TODO - why use space?
         char[] current = new char[1];
@@ -183,7 +183,7 @@ class FunctionParser {
      * @throws InvalidVariableException when evaluation of variables fail
      */
     LinkedList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException {
-        LinkedList<CompoundVariable> result = new LinkedList<CompoundVariable>();
+        LinkedList<CompoundVariable> result = new LinkedList<>();
         StringBuilder buffer = new StringBuilder();
         char[] current = new char[1];
         char previous = ' ';
diff --git a/src/core/org/apache/jmeter/engine/util/ValueReplacer.java b/src/core/org/apache/jmeter/engine/util/ValueReplacer.java
index 7ee90ae..b4919ad 100644
--- a/src/core/org/apache/jmeter/engine/util/ValueReplacer.java
+++ b/src/core/org/apache/jmeter/engine/util/ValueReplacer.java
@@ -43,7 +43,7 @@ public class ValueReplacer {
 
     private final CompoundVariable masterFunction = new CompoundVariable();
 
-    private Map<String, String> variables = new HashMap<String, String>();
+    private Map<String, String> variables = new HashMap<>();
 
     public ValueReplacer() {
     }
@@ -157,7 +157,7 @@ public class ValueReplacer {
      * @throws InvalidVariableException when <code>transform</code> throws an {@link InvalidVariableException} while transforming a value
      */
     private Collection<JMeterProperty> replaceValues(PropertyIterator iter, ValueTransformer transform) throws InvalidVariableException {
-        List<JMeterProperty> props = new LinkedList<JMeterProperty>();
+        List<JMeterProperty> props = new LinkedList<>();
         while (iter.hasNext()) {
             JMeterProperty val = iter.next();
             if (log.isDebugEnabled()) {
diff --git a/src/core/org/apache/jmeter/gui/GUIFactory.java b/src/core/org/apache/jmeter/gui/GUIFactory.java
index 7f7bcd4..7646f56 100644
--- a/src/core/org/apache/jmeter/gui/GUIFactory.java
+++ b/src/core/org/apache/jmeter/gui/GUIFactory.java
@@ -32,13 +32,13 @@ import org.apache.jmeter.testbeans.gui.TestBeanGUI;
  */
 public final class GUIFactory {
     /** A Map from String to JMeterGUIComponent of registered GUI classes. */
-    private static final Map<String, JMeterGUIComponent> GUI_MAP = new HashMap<String, JMeterGUIComponent>();
+    private static final Map<String, JMeterGUIComponent> GUI_MAP = new HashMap<>();
 
     /** A Map from String to ImageIcon of registered icons. */
-    private static final Map<String, ImageIcon> ICON_MAP = new HashMap<String, ImageIcon>();
+    private static final Map<String, ImageIcon> ICON_MAP = new HashMap<>();
 
     /** A Map from String to ImageIcon of registered icons. */
-    private static final Map<String, ImageIcon> DISABLED_ICON_MAP = new HashMap<String, ImageIcon>();
+    private static final Map<String, ImageIcon> DISABLED_ICON_MAP = new HashMap<>();
 
     /**
      * Prevent instantiation since this is a static utility class.
diff --git a/src/core/org/apache/jmeter/gui/GuiPackage.java b/src/core/org/apache/jmeter/gui/GuiPackage.java
index 120da8b..aec49c1 100644
--- a/src/core/org/apache/jmeter/gui/GuiPackage.java
+++ b/src/core/org/apache/jmeter/gui/GuiPackage.java
@@ -82,19 +82,19 @@ public final class GuiPackage implements LocaleChangeListener, HistoryListener {
      * Map from TestElement to JMeterGUIComponent, mapping the nodes in the tree
      * to their corresponding GUI components.
      */
-    private Map<TestElement, JMeterGUIComponent> nodesToGui = new HashMap<TestElement, JMeterGUIComponent>();
+    private Map<TestElement, JMeterGUIComponent> nodesToGui = new HashMap<>();
 
     /**
      * Map from Class to JMeterGUIComponent, mapping the Class of a GUI
      * component to an instance of that component.
      */
-    private Map<Class<?>, JMeterGUIComponent> guis = new HashMap<Class<?>, JMeterGUIComponent>();
+    private Map<Class<?>, JMeterGUIComponent> guis = new HashMap<>();
 
     /**
      * Map from Class to TestBeanGUI, mapping the Class of a TestBean to an
      * instance of TestBeanGUI to be used to edit such components.
      */
-    private Map<Class<?>, JMeterGUIComponent> testBeanGUIs = new HashMap<Class<?>, JMeterGUIComponent>();
+    private Map<Class<?>, JMeterGUIComponent> testBeanGUIs = new HashMap<>();
 
     /** The currently selected node in the tree. */
     private JMeterTreeNode currentNode = null;
@@ -637,9 +637,9 @@ public final class GuiPackage implements LocaleChangeListener, HistoryListener {
 
         // Forget about all GUIs we've created so far: we'll need to re-created
         // them all!
-        guis = new HashMap<Class<?>, JMeterGUIComponent>();
-        nodesToGui = new HashMap<TestElement, JMeterGUIComponent>();
-        testBeanGUIs = new HashMap<Class<?>, JMeterGUIComponent>();
+        guis = new HashMap<>();
+        nodesToGui = new HashMap<>();
+        testBeanGUIs = new HashMap<>();
 
         // BeanInfo objects also contain locale-sensitive data -- flush them
         // away:
@@ -766,7 +766,7 @@ public final class GuiPackage implements LocaleChangeListener, HistoryListener {
      * @return copy of list of {@link Stoppable}s
      */
     public List<Stoppable> getStoppables() {
-        ArrayList<Stoppable> list = new ArrayList<Stoppable>();
+        ArrayList<Stoppable> list = new ArrayList<>();
         list.addAll(stoppables);
         return list;
     }
diff --git a/src/core/org/apache/jmeter/gui/MainFrame.java b/src/core/org/apache/jmeter/gui/MainFrame.java
index f7c5df9..88c292a 100644
--- a/src/core/org/apache/jmeter/gui/MainFrame.java
+++ b/src/core/org/apache/jmeter/gui/MainFrame.java
@@ -164,7 +164,7 @@ public class MainFrame extends JFrame implements TestStateListener, Remoteable,
     private JButton runningIndicator;
 
     /** The set of currently running hosts. */
-    private final Set<String> hosts = new HashSet<String>();
+    private final Set<String> hosts = new HashSet<>();
 
     /** A message dialog shown while JMeter threads are stopping. */
     private JDialog stoppingMessage;
diff --git a/src/core/org/apache/jmeter/gui/SavePropertyDialog.java b/src/core/org/apache/jmeter/gui/SavePropertyDialog.java
index 192de4b..90bc845 100644
--- a/src/core/org/apache/jmeter/gui/SavePropertyDialog.java
+++ b/src/core/org/apache/jmeter/gui/SavePropertyDialog.java
@@ -55,7 +55,7 @@ public class SavePropertyDialog extends JDialog implements ActionListener {
 
     private static final long serialVersionUID = 232L;
 
-    private static final Map<String, Functor> functors = new HashMap<String, Functor>();
+    private static final Map<String, Functor> functors = new HashMap<>();
 
     private static final String NAME_SAVE_PFX   = "save";  // $NON-NLS-1$ i.e. boolean saveXXX()
     private static final String NAME_SET_PREFIX = "set";   // $NON-NLS-1$ i.e. void setXXX(boolean)
diff --git a/src/core/org/apache/jmeter/gui/UndoHistory.java b/src/core/org/apache/jmeter/gui/UndoHistory.java
index 2965355..5c10fb6 100644
--- a/src/core/org/apache/jmeter/gui/UndoHistory.java
+++ b/src/core/org/apache/jmeter/gui/UndoHistory.java
@@ -83,7 +83,7 @@ public class UndoHistory implements TreeModelListener, Serializable {
     /**
      * temporary storage for GUI tree expansion state
      */
-    private ArrayList<Integer> savedExpanded = new ArrayList<Integer>();
+    private ArrayList<Integer> savedExpanded = new ArrayList<>();
 
     /**
      * temporary storage for GUI tree selected row
@@ -95,7 +95,7 @@ public class UndoHistory implements TreeModelListener, Serializable {
 
     private static final int HISTORY_SIZE = JMeterUtils.getPropDefault("undo.history.size", 0);
 
-    private List<UndoHistoryItem> history = new LimitedArrayList<UndoHistoryItem>(HISTORY_SIZE);
+    private List<UndoHistoryItem> history = new LimitedArrayList<>(HISTORY_SIZE);
 
     /**
      * flag to prevent recursive actions
@@ -105,7 +105,7 @@ public class UndoHistory implements TreeModelListener, Serializable {
     /**
      * History listeners
      */
-    private List<HistoryListener> listeners = new ArrayList<UndoHistory.HistoryListener>();
+    private List<HistoryListener> listeners = new ArrayList<>();
 
     public UndoHistory() {
     }
diff --git a/src/core/org/apache/jmeter/gui/action/AboutCommand.java b/src/core/org/apache/jmeter/gui/action/AboutCommand.java
index fedc577..0532f52 100644
--- a/src/core/org/apache/jmeter/gui/action/AboutCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/AboutCommand.java
@@ -53,7 +53,7 @@ public class AboutCommand implements Command {
     private static JDialog about;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.ABOUT);
         commandSet = Collections.unmodifiableSet(commands);
     }
diff --git a/src/core/org/apache/jmeter/gui/action/ActionRouter.java b/src/core/org/apache/jmeter/gui/action/ActionRouter.java
index 6e6d5ed..35f6df8 100644
--- a/src/core/org/apache/jmeter/gui/action/ActionRouter.java
+++ b/src/core/org/apache/jmeter/gui/action/ActionRouter.java
@@ -44,13 +44,13 @@ public final class ActionRouter implements ActionListener {
 
     private static volatile ActionRouter router;
 
-    private Map<String, Set<Command>> commands = new HashMap<String, Set<Command>>();
+    private Map<String, Set<Command>> commands = new HashMap<>();
 
     private final Map<String, HashSet<ActionListener>> preActionListeners =
-        new HashMap<String, HashSet<ActionListener>>();
+            new HashMap<>();
 
     private final Map<String, HashSet<ActionListener>> postActionListeners =
-        new HashMap<String, HashSet<ActionListener>>();
+            new HashMap<>();
 
     private ActionRouter() {
     }
@@ -124,7 +124,7 @@ public final class ActionRouter implements ActionListener {
      *         <code>actionName</code>
      */
     public Set<Command> getAction(String actionName) {
-        Set<Command> set = new HashSet<Command>();
+        Set<Command> set = new HashSet<>();
         for (Command c : commands.get(actionName)) {
             try {
                 set.add(c);
@@ -190,7 +190,7 @@ public final class ActionRouter implements ActionListener {
         if (action != null) {
             HashSet<ActionListener> set = preActionListeners.get(action.getName());
             if (set == null) {
-                set = new HashSet<ActionListener>();
+                set = new HashSet<>();
             }
             set.add(listener);
             preActionListeners.put(action.getName(), set);
@@ -233,7 +233,7 @@ public final class ActionRouter implements ActionListener {
         if (action != null) {
             HashSet<ActionListener> set = postActionListeners.get(action.getName());
             if (set == null) {
-                set = new HashSet<ActionListener>();
+                set = new HashSet<>();
             }
             set.add(listener);
             postActionListeners.put(action.getName(), set);
@@ -295,7 +295,7 @@ public final class ActionRouter implements ActionListener {
                     // Ignore the classes which are specific to the reporting tool
                     "org.apache.jmeter.report.gui", // $NON-NLS-1$ // notContains - classname should not contain this string
                     false); // annotations - true if classnames are annotations
-            commands = new HashMap<String, Set<Command>>(listClasses.size());
+            commands = new HashMap<>(listClasses.size());
             if (listClasses.isEmpty()) {
                 log.fatalError("!!!!!Uh-oh, didn't find any action handlers!!!!!");
                 throw new JMeterError("No action handlers found - check JMeterHome and libraries");
@@ -306,7 +306,7 @@ public final class ActionRouter implements ActionListener {
                 for (String commandName : command.getActionNames()) {
                     Set<Command> commandObjects = commands.get(commandName);
                     if (commandObjects == null) {
-                        commandObjects = new HashSet<Command>();
+                        commandObjects = new HashSet<>();
                         commands.put(commandName, commandObjects);
                     }
                     commandObjects.add(command);
diff --git a/src/core/org/apache/jmeter/gui/action/AddParent.java b/src/core/org/apache/jmeter/gui/action/AddParent.java
index dd43910..75f0f4a 100644
--- a/src/core/org/apache/jmeter/gui/action/AddParent.java
+++ b/src/core/org/apache/jmeter/gui/action/AddParent.java
@@ -35,7 +35,7 @@ import org.apache.log.Logger;
 public class AddParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ADD_PARENT);
diff --git a/src/core/org/apache/jmeter/gui/action/AddToTree.java b/src/core/org/apache/jmeter/gui/action/AddToTree.java
index 822d228..cb7c789 100644
--- a/src/core/org/apache/jmeter/gui/action/AddToTree.java
+++ b/src/core/org/apache/jmeter/gui/action/AddToTree.java
@@ -40,7 +40,7 @@ public class AddToTree implements Command {
     private static final Set<String> commandSet;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.ADD);
         commandSet = Collections.unmodifiableSet(commands);
     }
diff --git a/src/core/org/apache/jmeter/gui/action/Analyze.java b/src/core/org/apache/jmeter/gui/action/Analyze.java
index def9d7a..da02ded 100644
--- a/src/core/org/apache/jmeter/gui/action/Analyze.java
+++ b/src/core/org/apache/jmeter/gui/action/Analyze.java
@@ -30,7 +30,7 @@ import org.apache.jmeter.reporters.FileReporter;
 import org.apache.jmeter.util.JMeterUtils;
 
 public class Analyze implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ANALYZE_FILE);
diff --git a/src/core/org/apache/jmeter/gui/action/ChangeLanguage.java b/src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
index 369fe99..4430c46 100644
--- a/src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
+++ b/src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
@@ -33,7 +33,7 @@ import org.apache.log.Logger;
  * @version $Revision$
  */
 public class ChangeLanguage implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
diff --git a/src/core/org/apache/jmeter/gui/action/ChangeParent.java b/src/core/org/apache/jmeter/gui/action/ChangeParent.java
index 1ade698..cee3a8d 100644
--- a/src/core/org/apache/jmeter/gui/action/ChangeParent.java
+++ b/src/core/org/apache/jmeter/gui/action/ChangeParent.java
@@ -38,7 +38,7 @@ import org.apache.log.Logger;
 public class ChangeParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CHANGE_PARENT);
diff --git a/src/core/org/apache/jmeter/gui/action/CheckDirty.java b/src/core/org/apache/jmeter/gui/action/CheckDirty.java
index df0edaa..c7b3148 100644
--- a/src/core/org/apache/jmeter/gui/action/CheckDirty.java
+++ b/src/core/org/apache/jmeter/gui/action/CheckDirty.java
@@ -49,7 +49,7 @@ public class CheckDirty extends AbstractAction implements HashTreeTraverser, Act
 
     private boolean dirty = false;
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CHECK_DIRTY);
@@ -61,7 +61,7 @@ public class CheckDirty extends AbstractAction implements HashTreeTraverser, Act
     }
 
     public CheckDirty() {
-        previousGuiItems = new HashMap<JMeterTreeNode, TestElement>();
+        previousGuiItems = new HashMap<>();
         ActionRouter.getInstance().addPreActionListener(ExitCommand.class, this);
     }
 
diff --git a/src/core/org/apache/jmeter/gui/action/Clear.java b/src/core/org/apache/jmeter/gui/action/Clear.java
index 3d995da..b9a3e4b 100644
--- a/src/core/org/apache/jmeter/gui/action/Clear.java
+++ b/src/core/org/apache/jmeter/gui/action/Clear.java
@@ -38,7 +38,7 @@ import org.apache.log.Logger;
 public class Clear implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CLEAR);
diff --git a/src/core/org/apache/jmeter/gui/action/Close.java b/src/core/org/apache/jmeter/gui/action/Close.java
index 9c5dcbb..3c59bea 100644
--- a/src/core/org/apache/jmeter/gui/action/Close.java
+++ b/src/core/org/apache/jmeter/gui/action/Close.java
@@ -36,7 +36,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Close implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CLOSE);
diff --git a/src/core/org/apache/jmeter/gui/action/CollapseExpand.java b/src/core/org/apache/jmeter/gui/action/CollapseExpand.java
index cb20e89..2b3b79c 100644
--- a/src/core/org/apache/jmeter/gui/action/CollapseExpand.java
+++ b/src/core/org/apache/jmeter/gui/action/CollapseExpand.java
@@ -32,7 +32,7 @@ import org.apache.jmeter.gui.GuiPackage;
  */
 public class CollapseExpand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.COLLAPSE_ALL);
diff --git a/src/core/org/apache/jmeter/gui/action/Copy.java b/src/core/org/apache/jmeter/gui/action/Copy.java
index 01315d1..b9ddd33 100644
--- a/src/core/org/apache/jmeter/gui/action/Copy.java
+++ b/src/core/org/apache/jmeter/gui/action/Copy.java
@@ -43,7 +43,7 @@ import org.apache.log.Logger;
 public class Copy extends AbstractAction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final HashSet<String> commands = new HashSet<String>();
+    private static final HashSet<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.COPY);
@@ -94,7 +94,7 @@ public class Copy extends AbstractAction {
      * @return JMeterTreeNode[]
      */
     static JMeterTreeNode[] keepOnlyAncestors(JMeterTreeNode[] currentNodes) {
-        List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodes = new ArrayList<>();
         for (int i = 0; i < currentNodes.length; i++) {
             boolean exclude = false;
             for (int j = 0; j < currentNodes.length; j++) {
diff --git a/src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java b/src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
index febe940..96446fd 100644
--- a/src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
+++ b/src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
@@ -29,7 +29,7 @@ public class CreateFunctionDialog extends AbstractAction {
 
     private static final Set<String> commands;
     static {
-        commands = new HashSet<String>();
+        commands = new HashSet<>();
         commands.add(ActionNames.FUNCTIONS);
     }
 
diff --git a/src/core/org/apache/jmeter/gui/action/Cut.java b/src/core/org/apache/jmeter/gui/action/Cut.java
index a6c1086..5a629ea 100644
--- a/src/core/org/apache/jmeter/gui/action/Cut.java
+++ b/src/core/org/apache/jmeter/gui/action/Cut.java
@@ -29,7 +29,7 @@ import org.apache.jmeter.gui.tree.JMeterTreeNode;
  * Implements the Cut menu item command
  */
 public class Cut extends AbstractAction {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CUT);
diff --git a/src/core/org/apache/jmeter/gui/action/Duplicate.java b/src/core/org/apache/jmeter/gui/action/Duplicate.java
index d1d9241..b00f55d 100644
--- a/src/core/org/apache/jmeter/gui/action/Duplicate.java
+++ b/src/core/org/apache/jmeter/gui/action/Duplicate.java
@@ -37,7 +37,7 @@ import org.apache.jmeter.gui.tree.JMeterTreeNode;
  */
 public class Duplicate extends AbstractAction {
 
-    private static final HashSet<String> commands = new HashSet<String>();
+    private static final HashSet<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.DUPLICATE);
diff --git a/src/core/org/apache/jmeter/gui/action/EditCommand.java b/src/core/org/apache/jmeter/gui/action/EditCommand.java
index eeb6285..c837a38 100644
--- a/src/core/org/apache/jmeter/gui/action/EditCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/EditCommand.java
@@ -30,7 +30,7 @@ import org.apache.jmeter.gui.NamePanel;
  * Implements the Edit menu item.
  */
 public class EditCommand implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.EDIT);
diff --git a/src/core/org/apache/jmeter/gui/action/EnableComponent.java b/src/core/org/apache/jmeter/gui/action/EnableComponent.java
index d9823da..0f88564 100644
--- a/src/core/org/apache/jmeter/gui/action/EnableComponent.java
+++ b/src/core/org/apache/jmeter/gui/action/EnableComponent.java
@@ -33,7 +33,7 @@ import org.apache.log.Logger;
 public class EnableComponent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ENABLE);
diff --git a/src/core/org/apache/jmeter/gui/action/ExitCommand.java b/src/core/org/apache/jmeter/gui/action/ExitCommand.java
index 558e01a..66fa8ec 100644
--- a/src/core/org/apache/jmeter/gui/action/ExitCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/ExitCommand.java
@@ -29,7 +29,7 @@ import org.apache.jmeter.util.JMeterUtils;
 
 public class ExitCommand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.EXIT);
diff --git a/src/core/org/apache/jmeter/gui/action/Help.java b/src/core/org/apache/jmeter/gui/action/Help.java
index eda2f49..b4bb3bc 100644
--- a/src/core/org/apache/jmeter/gui/action/Help.java
+++ b/src/core/org/apache/jmeter/gui/action/Help.java
@@ -42,7 +42,7 @@ import org.apache.log.Logger;
 public class Help implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final String HELP_DOCS = "file:///"  // $NON-NLS-1$
         + JMeterUtils.getJMeterHome()
diff --git a/src/core/org/apache/jmeter/gui/action/Load.java b/src/core/org/apache/jmeter/gui/action/Load.java
index 730bfa2..06c6b7f 100644
--- a/src/core/org/apache/jmeter/gui/action/Load.java
+++ b/src/core/org/apache/jmeter/gui/action/Load.java
@@ -55,7 +55,7 @@ public class Load implements Command {
 
     private static final boolean expandTree = JMeterUtils.getPropDefault("onload.expandtree", false); //$NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.OPEN);
diff --git a/src/core/org/apache/jmeter/gui/action/LoadRecentProject.java b/src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
index 62941a3..516aa87 100644
--- a/src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
+++ b/src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
@@ -40,7 +40,7 @@ public class LoadRecentProject extends Load {
     private static final String USER_PREFS_KEY = "recent_file_"; //$NON-NLS-1$
     /** The number of menu items used for recent files */
     private static final int NUMBER_OF_MENU_ITEMS = 9;
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.OPEN_RECENT);
@@ -83,7 +83,7 @@ public class LoadRecentProject extends Load {
      * @return a List of JMenuItem and a JSeparator, representing recent files
      */
     public static List<JComponent> getRecentFileMenuItems() {
-        LinkedList<JComponent> menuItems = new LinkedList<JComponent>();
+        LinkedList<JComponent> menuItems = new LinkedList<>();
         // Get the preference for the recent files
         for(int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {
             // Create the menu item
@@ -121,7 +121,7 @@ public class LoadRecentProject extends Load {
     public static void updateRecentFileMenuItems(List<JComponent> menuItems, String loadedFileName) {
         // Get the preference for the recent files
 
-        LinkedList<String> newRecentFiles = new LinkedList<String>();
+        LinkedList<String> newRecentFiles = new LinkedList<>();
         // Check if the new file is already in the recent list
         boolean alreadyExists = false;
         for(int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {
diff --git a/src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java b/src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
index cd69017..5a9d932 100644
--- a/src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
+++ b/src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
@@ -33,7 +33,7 @@ import org.apache.jmeter.gui.GuiPackage;
  */
 public class LoggerPanelEnableDisable implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.LOGGER_PANEL_ENABLE_DISABLE);
diff --git a/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java b/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
index 9d3b98d..6fac85b 100644
--- a/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
@@ -45,7 +45,7 @@ public class LookAndFeelCommand implements Command {
 
     private static final String JMETER_LAF = "jmeter.laf"; // $NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final Preferences PREFS = Preferences.userNodeForPackage(LookAndFeelCommand.class);
     // Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
@@ -60,7 +60,7 @@ public class LookAndFeelCommand implements Command {
         }
         String jMeterLaf = getJMeterLaf();
         if (log.isInfoEnabled()) {
-            ArrayList<String> names=new ArrayList<String>();
+            ArrayList<String> names= new ArrayList<>();
             for(UIManager.LookAndFeelInfo laf : lfs) {
                 if (laf.getClassName().equals(jMeterLaf)) {
                     names.add(laf.getName());
diff --git a/src/core/org/apache/jmeter/gui/action/Move.java b/src/core/org/apache/jmeter/gui/action/Move.java
index fb07fd6..4ac238d 100644
--- a/src/core/org/apache/jmeter/gui/action/Move.java
+++ b/src/core/org/apache/jmeter/gui/action/Move.java
@@ -36,7 +36,7 @@ import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.WorkBench;
 
 public class Move extends AbstractAction {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.MOVE_DOWN);
diff --git a/src/core/org/apache/jmeter/gui/action/Paste.java b/src/core/org/apache/jmeter/gui/action/Paste.java
index 7b0a4d1..31a2ee7 100644
--- a/src/core/org/apache/jmeter/gui/action/Paste.java
+++ b/src/core/org/apache/jmeter/gui/action/Paste.java
@@ -40,7 +40,7 @@ public class Paste extends AbstractAction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.PASTE);
diff --git a/src/core/org/apache/jmeter/gui/action/RemoteStart.java b/src/core/org/apache/jmeter/gui/action/RemoteStart.java
index f55ebde..8c6fb6c 100644
--- a/src/core/org/apache/jmeter/gui/action/RemoteStart.java
+++ b/src/core/org/apache/jmeter/gui/action/RemoteStart.java
@@ -41,7 +41,7 @@ public class RemoteStart extends AbstractAction {
 
     private static final String REMOTE_HOSTS_SEPARATOR = ","; // $NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.REMOTE_START);
@@ -94,7 +94,7 @@ public class RemoteStart extends AbstractAction {
     private List<String> getRemoteHosts() {
         String remote_hosts_string = JMeterUtils.getPropDefault(REMOTE_HOSTS, LOCAL_HOST);
         StringTokenizer st = new StringTokenizer(remote_hosts_string, REMOTE_HOSTS_SEPARATOR);
-        List<String> list = new LinkedList<String>();
+        List<String> list = new LinkedList<>();
         while (st.hasMoreElements())
             list.add((String) st.nextElement());
         return list;
diff --git a/src/core/org/apache/jmeter/gui/action/Remove.java b/src/core/org/apache/jmeter/gui/action/Remove.java
index c741b79..90f1d28 100644
--- a/src/core/org/apache/jmeter/gui/action/Remove.java
+++ b/src/core/org/apache/jmeter/gui/action/Remove.java
@@ -35,7 +35,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Remove implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     // Whether to skip the delete confirmation dialogue
     private static final boolean SKIP_CONFIRM = JMeterUtils.getPropDefault("confirm.delete.skip", false); // $NON-NLS-1$
diff --git a/src/core/org/apache/jmeter/gui/action/ResetSearchCommand.java b/src/core/org/apache/jmeter/gui/action/ResetSearchCommand.java
index 0da2649..2d4b67e 100644
--- a/src/core/org/apache/jmeter/gui/action/ResetSearchCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/ResetSearchCommand.java
@@ -33,7 +33,7 @@ import org.apache.jmeter.gui.tree.JMeterTreeNode;
  */
 public class ResetSearchCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SEARCH_RESET);
diff --git a/src/core/org/apache/jmeter/gui/action/RevertProject.java b/src/core/org/apache/jmeter/gui/action/RevertProject.java
index 4d278ee..f93fc5e 100644
--- a/src/core/org/apache/jmeter/gui/action/RevertProject.java
+++ b/src/core/org/apache/jmeter/gui/action/RevertProject.java
@@ -32,7 +32,7 @@ import org.apache.jmeter.util.JMeterUtils;
  *
  */
 public class RevertProject implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.REVERT_PROJECT);
diff --git a/src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java b/src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
index 32b54ea..97f80f1 100644
--- a/src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
@@ -55,7 +55,7 @@ import org.apache.jmeter.util.SSLManager;
 public class SSLManagerCommand implements Command {
     private static final Set<String> commandSet;
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.SSL_MANAGER);
         commandSet = Collections.unmodifiableSet(commands);
     }
diff --git a/src/core/org/apache/jmeter/gui/action/Save.java b/src/core/org/apache/jmeter/gui/action/Save.java
index 938e9af..6ab6be1 100644
--- a/src/core/org/apache/jmeter/gui/action/Save.java
+++ b/src/core/org/apache/jmeter/gui/action/Save.java
@@ -97,7 +97,7 @@ public class Save implements Command {
     // NumberFormat to format version number in backup file names
     private static final DecimalFormat BACKUP_VERSION_FORMATER = new DecimalFormat("000000"); //$NON-NLS-1$
     
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SAVE_AS); // Save (Selection) As
@@ -337,7 +337,7 @@ public class Save implements Command {
         // create a file filter that select files matching a given regex pattern
         IOFileFilter patternFileFilter = new PrivatePatternFileFilter(backupPattern);
         // get all backup files in the backup directory
-        List<File> backupFiles = new ArrayList<File>(FileUtils.listFiles(backupDir, patternFileFilter, null));
+        List<File> backupFiles = new ArrayList<>(FileUtils.listFiles(backupDir, patternFileFilter, null));
         // find the highest version number among existing backup files (this
         // should be the more recent backup)
         int lastVersionNumber = 0;
@@ -351,7 +351,7 @@ public class Save implements Command {
             }
         }
         // find expired backup files
-        List<File> expiredFiles = new ArrayList<File>();
+        List<File> expiredFiles = new ArrayList<>();
         if (BACKUP_MAX_HOURS > 0) {
             Calendar cal = Calendar.getInstance();
             cal.add(Calendar.HOUR_OF_DAY, -BACKUP_MAX_HOURS);
@@ -410,7 +410,7 @@ public class Save implements Command {
 
     // package protected to allow access from test code
     void convertSubTree(HashTree tree) {
-        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<>(tree.list()).iterator();
         while (iter.hasNext()) {
             JMeterTreeNode item = (JMeterTreeNode) iter.next();
             convertSubTree(tree.getTree(item));
diff --git a/src/core/org/apache/jmeter/gui/action/SaveGraphics.java b/src/core/org/apache/jmeter/gui/action/SaveGraphics.java
index cf67876..9f43a56 100644
--- a/src/core/org/apache/jmeter/gui/action/SaveGraphics.java
+++ b/src/core/org/apache/jmeter/gui/action/SaveGraphics.java
@@ -45,7 +45,7 @@ import org.apache.jmeter.visualizers.Printable;
  */
 public class SaveGraphics implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SAVE_GRAPHICS);
diff --git a/src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java b/src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java
index c7c3309..d0003ef 100644
--- a/src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java
@@ -28,7 +28,7 @@ import java.util.Set;
  */
 public class SearchTreeCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SEARCH_TREE);
diff --git a/src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java b/src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
index 944c15c..5f60592 100644
--- a/src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
+++ b/src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
@@ -197,7 +197,7 @@ public class SearchTreeDialog extends JDialog implements ActionListener {
         }
         GuiPackage guiPackage = GuiPackage.getInstance();
         JMeterTreeModel jMeterTreeModel = guiPackage.getTreeModel();
-        Set<JMeterTreeNode> nodes = new HashSet<JMeterTreeNode>();
+        Set<JMeterTreeNode> nodes = new HashSet<>();
         for (JMeterTreeNode jMeterTreeNode : jMeterTreeModel.getNodesOfType(Searchable.class)) {
             try {
                 if (jMeterTreeNode.getUserObject() instanceof Searchable){
diff --git a/src/core/org/apache/jmeter/gui/action/Start.java b/src/core/org/apache/jmeter/gui/action/Start.java
index 6212072..6f199f2 100644
--- a/src/core/org/apache/jmeter/gui/action/Start.java
+++ b/src/core/org/apache/jmeter/gui/action/Start.java
@@ -40,7 +40,7 @@ import org.apache.log.Logger;
 public class Start extends AbstractAction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ACTION_START);
diff --git a/src/core/org/apache/jmeter/gui/action/StopStoppables.java b/src/core/org/apache/jmeter/gui/action/StopStoppables.java
index 9f7de47..12756fa 100644
--- a/src/core/org/apache/jmeter/gui/action/StopStoppables.java
+++ b/src/core/org/apache/jmeter/gui/action/StopStoppables.java
@@ -32,7 +32,7 @@ import org.apache.jmeter.gui.Stoppable;
  * @since 2.5.1
  */
 public class StopStoppables extends AbstractAction implements ActionListener {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.STOP_THREAD);
diff --git a/src/core/org/apache/jmeter/gui/action/TemplatesCommand.java b/src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
index d578cec..005b52c 100644
--- a/src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
@@ -28,7 +28,7 @@ import java.util.Set;
  */
 public class TemplatesCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     // Ensure the dialog is only created when it is first needed
     // In turn this avoids scanning the templates until first needed
diff --git a/src/core/org/apache/jmeter/gui/action/ToolBar.java b/src/core/org/apache/jmeter/gui/action/ToolBar.java
index fbead3e..ca6a823 100644
--- a/src/core/org/apache/jmeter/gui/action/ToolBar.java
+++ b/src/core/org/apache/jmeter/gui/action/ToolBar.java
@@ -30,7 +30,7 @@ import org.apache.jmeter.gui.GuiPackage;
  */
 public class ToolBar implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.TOOLBAR);
diff --git a/src/core/org/apache/jmeter/gui/action/UndoCommand.java b/src/core/org/apache/jmeter/gui/action/UndoCommand.java
index 8f464d3..455ac3a 100644
--- a/src/core/org/apache/jmeter/gui/action/UndoCommand.java
+++ b/src/core/org/apache/jmeter/gui/action/UndoCommand.java
@@ -33,7 +33,7 @@ import org.apache.jorphan.collections.HashTree;
  */
 public class UndoCommand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.UNDO);
diff --git a/src/core/org/apache/jmeter/gui/action/What.java b/src/core/org/apache/jmeter/gui/action/What.java
index e131045..3e49091 100644
--- a/src/core/org/apache/jmeter/gui/action/What.java
+++ b/src/core/org/apache/jmeter/gui/action/What.java
@@ -47,7 +47,7 @@ public class What implements Command {
     private static final Set<String> commandSet;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.WHAT_CLASS);
         commands.add(ActionNames.DEBUG_ON);
         commands.add(ActionNames.DEBUG_OFF);
diff --git a/src/core/org/apache/jmeter/gui/action/template/TemplateManager.java b/src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
index 6c991b9..c0cbf9a 100644
--- a/src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
+++ b/src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
@@ -41,7 +41,7 @@ public class TemplateManager {
          * N.B. Must use LinkedHashMap for field type
          * XStream creates a plain HashMap if one uses Map as the field type.
          */
-        private final LinkedHashMap<String, Template> templates = new LinkedHashMap<String, Template>();
+        private final LinkedHashMap<String, Template> templates = new LinkedHashMap<>();
     }
     private static final String TEMPLATE_FILES = JMeterUtils.getPropDefault("template.files", // $NON-NLS-1$
             "/bin/templates/templates.xml");
@@ -103,7 +103,7 @@ public class TemplateManager {
     }
 
     private Map<String, Template> readTemplates() {
-        final Map<String, Template> temps = new LinkedHashMap<String, Template>();
+        final Map<String, Template> temps = new LinkedHashMap<>();
        
         final String[] templateFiles = TEMPLATE_FILES.split(",");
         for (String templateFile : templateFiles) {
diff --git a/src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java b/src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
index 0ecd843..d340313 100644
--- a/src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
+++ b/src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
@@ -74,7 +74,7 @@ public class JMeterTreeModel extends DefaultTreeModel {
      * @return a list of tree nodes of the given <code>type</code>, or an empty list
      */
     public List<JMeterTreeNode> getNodesOfType(Class<?> type) {
-        List<JMeterTreeNode> nodeList = new LinkedList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodeList = new LinkedList<>();
         traverseAndFind(type, (JMeterTreeNode) this.getRoot(), nodeList);
         return nodeList;
     }
diff --git a/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java b/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
index cd6f9c9..2848ede 100644
--- a/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
+++ b/src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
@@ -76,7 +76,7 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
      * @return {@link List} of {@link JMeterTreeNode}s
      */
     public List<JMeterTreeNode> getPathToThreadGroup() {
-        List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodes = new ArrayList<>();
         if(treeModel != null) {
             TreeNode[] nodesToRoot = treeModel.getPathToRoot(this);
             for (TreeNode node : nodesToRoot) {
diff --git a/src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java b/src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
index e117262..11e7e81 100644
--- a/src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
+++ b/src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
@@ -234,7 +234,7 @@ public class JMeterTreeTransferHandler extends TransferHandler {
         TreePath dest = dl.getPath();
         JMeterTreeNode target = (JMeterTreeNode) dest.getLastPathComponent();
        
-        nodesForRemoval = new ArrayList<JMeterTreeNode>();
+        nodesForRemoval = new ArrayList<>();
         int index = dl.getChildIndex();
         TreePath[] pathsToSelect = new TreePath[nodes.length];
         int pathPosition = 0;
@@ -253,7 +253,7 @@ public class JMeterTreeTransferHandler extends TransferHandler {
             
             // first copy the children as the call to copy.add will modify the collection we're iterating on
             Enumeration<?> enumFrom = node.children();
-            List<JMeterTreeNode> tmp = new ArrayList<JMeterTreeNode>();
+            List<JMeterTreeNode> tmp = new ArrayList<>();
             while (enumFrom.hasMoreElements()) {
                 JMeterTreeNode child = (JMeterTreeNode) enumFrom.nextElement();
                 tmp.add(child);
diff --git a/src/core/org/apache/jmeter/gui/util/FileListPanel.java b/src/core/org/apache/jmeter/gui/util/FileListPanel.java
index f7e5ab0..184e11c 100644
--- a/src/core/org/apache/jmeter/gui/util/FileListPanel.java
+++ b/src/core/org/apache/jmeter/gui/util/FileListPanel.java
@@ -61,7 +61,7 @@ public class FileListPanel extends JPanel implements ActionListener {
 
     private JButton delete = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$
 
-    private List<ChangeListener> listeners = new LinkedList<ChangeListener>();
+    private List<ChangeListener> listeners = new LinkedList<>();
 
     private String title;
 
diff --git a/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java b/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
index 2597ac9..a61efb8 100644
--- a/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
+++ b/src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
@@ -46,7 +46,7 @@ public class FilePanelEntry extends HorizontalPanel implements ActionListener {
 
     private static final String ACTION_BROWSE = "browse"; //$NON-NLS-1$
 
-    private final List<ChangeListener> listeners = new LinkedList<ChangeListener>();
+    private final List<ChangeListener> listeners = new LinkedList<>();
 
     private final String[] filetypes;
 
diff --git a/src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java b/src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
index 0f3edfa..7644f2f 100644
--- a/src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
+++ b/src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
@@ -52,7 +52,7 @@ public class JLabeledRadioI18N extends JPanel implements JLabeledField, ActionLi
 
     private final ButtonGroup bGroup = new ButtonGroup();
 
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     /**
      *
@@ -129,7 +129,7 @@ public class JLabeledRadioI18N extends JPanel implements JLabeledField, ActionLi
      */
     public void resetButtons(String[] resouces, String selected) {
         Enumeration<AbstractButton> buttons = bGroup.getElements();
-        List<AbstractButton> buttonsToRemove = new ArrayList<AbstractButton>(this.bGroup.getButtonCount());
+        List<AbstractButton> buttonsToRemove = new ArrayList<>(this.bGroup.getButtonCount());
         while (buttons.hasMoreElements()) {
             AbstractButton abstractButton = buttons
                     .nextElement();
@@ -206,7 +206,7 @@ public class JLabeledRadioI18N extends JPanel implements JLabeledField, ActionLi
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         Enumeration<AbstractButton> en = this.bGroup.getElements();
         while (en.hasMoreElements()) {
diff --git a/src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java b/src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
index 6f06969..cf1dfc8 100644
--- a/src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
+++ b/src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
@@ -149,12 +149,12 @@ public class JMeterMenuBar extends JMenuBar implements LocaleChangeListener {
 
     public JMeterMenuBar() {
         // List for recent files menu items
-        file_load_recent_files = new LinkedList<JComponent>();
+        file_load_recent_files = new LinkedList<>();
         // Lists for remote engines menu items
-        remote_engine_start = new LinkedList<JMenuItem>();
-        remote_engine_stop = new LinkedList<JMenuItem>();
-        remote_engine_shut = new LinkedList<JMenuItem>();
-        remote_engine_exit = new LinkedList<JMenuItem>();
+        remote_engine_start = new LinkedList<>();
+        remote_engine_stop = new LinkedList<>();
+        remote_engine_shut = new LinkedList<>();
+        remote_engine_exit = new LinkedList<>();
         remoteHosts = JOrphanUtils.split(JMeterUtils.getPropDefault("remote_hosts", ""), ","); //$NON-NLS-1$
         if (remoteHosts.length == 1 && remoteHosts[0].equals("")) {
             remoteHosts = new String[0];
@@ -238,7 +238,7 @@ public class JMeterMenuBar extends JMenuBar implements LocaleChangeListener {
      * should be defined in a file somewhere, but that is for later.
      */
     public void createMenuBar() {
-        this.menuCreators = new ArrayList<MenuCreator>();
+        this.menuCreators = new ArrayList<>();
         try {
             List<String> listClasses = ClassFinder.findClassesThatExtend(
                     JMeterUtils.getSearchPaths(), 
@@ -387,7 +387,7 @@ public class JMeterMenuBar extends JMenuBar implements LocaleChangeListener {
      */
     // Also used by org.apache.jmeter.resources.PackageTest
     public static String[] getLanguages(){
-        List<String> lang = new ArrayList<String>(20);
+        List<String> lang = new ArrayList<>(20);
         lang.add(Locale.ENGLISH.toString()); // en
         lang.add(Locale.FRENCH.toString()); // fr
         lang.add(Locale.GERMAN.toString()); // de
diff --git a/src/core/org/apache/jmeter/gui/util/JMeterToolBar.java b/src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
index d493d5e..b10666d 100644
--- a/src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
+++ b/src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
@@ -164,7 +164,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
         
         String iconSize = JMeterUtils.getPropDefault(TOOLBAR_ICON_SIZE, DEFAULT_TOOLBAR_ICON_SIZE); 
 
-        List<IconToolbarBean> listIcons = new ArrayList<IconToolbarBean>();
+        List<IconToolbarBean> listIcons = new ArrayList<>();
         for (String key : oList) {
             log.debug("Toolbar icon key: " + key); //$NON-NLS-1$
             String trimmed = key.trim();
@@ -204,7 +204,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
      */
     private Map<String, Boolean> getCurrentButtonsStates() {
         Component[] components = getComponents();
-        Map<String, Boolean> buttonStates = new HashMap<String, Boolean>(components.length);
+        Map<String, Boolean> buttonStates = new HashMap<>(components.length);
         for (int i = 0; i < components.length; i++) {
             if (components[i] instanceof JButton) {
                 JButton button = (JButton) components[i];
@@ -219,7 +219,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
      */
     public void initButtonsState() {
         final boolean started = false;
-        Map<String, Boolean> buttonStates = new HashMap<String, Boolean>();
+        Map<String, Boolean> buttonStates = new HashMap<>();
         buttonStates.put(ActionNames.ACTION_START, Boolean.valueOf(!started));
         buttonStates.put(ActionNames.ACTION_START_NO_TIMERS, Boolean.valueOf(!started));
         buttonStates.put(ActionNames.ACTION_STOP, Boolean.valueOf(started));
@@ -240,7 +240,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
      *            Flag whether local test is started
      */
     public void setLocalTestStarted(boolean started) {
-        Map<String, Boolean> buttonStates = new HashMap<String, Boolean>(3);
+        Map<String, Boolean> buttonStates = new HashMap<>(3);
         buttonStates.put(ActionNames.ACTION_START, Boolean.valueOf(!started));
         buttonStates.put(ActionNames.ACTION_START_NO_TIMERS, Boolean.valueOf(!started));
         buttonStates.put(ActionNames.ACTION_STOP, Boolean.valueOf(started));
@@ -255,7 +255,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
      *            Flag whether the test is started
      */
     public void setRemoteTestStarted(boolean started) {
-        Map<String, Boolean> buttonStates = new HashMap<String, Boolean>(3);
+        Map<String, Boolean> buttonStates = new HashMap<>(3);
         buttonStates.put(ActionNames.REMOTE_START_ALL, Boolean.valueOf(!started));
         buttonStates.put(ActionNames.REMOTE_STOP_ALL, Boolean.valueOf(started));
         buttonStates.put(ActionNames.REMOTE_SHUT_ALL, Boolean.valueOf(started));
@@ -273,7 +273,7 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
      *            {@link ActionNames#REDO} should be enabled
      */
     public void updateUndoRedoIcons(boolean canUndo, boolean canRedo) {
-        Map<String, Boolean> buttonStates = new HashMap<String, Boolean>(2);
+        Map<String, Boolean> buttonStates = new HashMap<>(2);
         buttonStates.put(ActionNames.UNDO, Boolean.valueOf(canUndo));
         buttonStates.put(ActionNames.REDO, Boolean.valueOf(canRedo));
         updateButtons(buttonStates);
diff --git a/src/core/org/apache/jmeter/gui/util/MenuFactory.java b/src/core/org/apache/jmeter/gui/util/MenuFactory.java
index feecbd0..e4928c1 100644
--- a/src/core/org/apache/jmeter/gui/util/MenuFactory.java
+++ b/src/core/org/apache/jmeter/gui/util/MenuFactory.java
@@ -90,10 +90,9 @@ public final class MenuFactory {
 
     public static final String LISTENERS = "menu_listener"; //$NON-NLS-1$
 
-    private static final Map<String, List<MenuInfo>> menuMap =
-        new HashMap<String, List<MenuInfo>>();
+    private static final Map<String, List<MenuInfo>> menuMap = new HashMap<>();
 
-    private static final Set<String> elementsToSkip = new HashSet<String>();
+    private static final Set<String> elementsToSkip = new HashSet<>();
 
     // MENU_ADD_xxx - controls which items are in the ADD menu
     // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
@@ -128,17 +127,17 @@ public final class MenuFactory {
         postProcessors, preProcessors;
 
     static {
-        threads = new LinkedList<MenuInfo>();
-        fragments = new LinkedList<MenuInfo>();
-        timers = new LinkedList<MenuInfo>();
-        controllers = new LinkedList<MenuInfo>();
-        samplers = new LinkedList<MenuInfo>();
-        configElements = new LinkedList<MenuInfo>();
-        assertions = new LinkedList<MenuInfo>();
-        listeners = new LinkedList<MenuInfo>();
-        postProcessors = new LinkedList<MenuInfo>();
-        preProcessors = new LinkedList<MenuInfo>();
-        nonTestElements = new LinkedList<MenuInfo>();
+        threads = new LinkedList<>();
+        fragments = new LinkedList<>();
+        timers = new LinkedList<>();
+        controllers = new LinkedList<>();
+        samplers = new LinkedList<>();
+        configElements = new LinkedList<>();
+        assertions = new LinkedList<>();
+        listeners = new LinkedList<>();
+        postProcessors = new LinkedList<>();
+        preProcessors = new LinkedList<>();
+        nonTestElements = new LinkedList<>();
         menuMap.put(THREADS, threads);
         menuMap.put(FRAGMENTS, fragments);
         menuMap.put(TIMERS, timers);
diff --git a/src/core/org/apache/jmeter/reporters/AbstractListenerElement.java b/src/core/org/apache/jmeter/reporters/AbstractListenerElement.java
index 50cf2ae..2c7a610 100644
--- a/src/core/org/apache/jmeter/reporters/AbstractListenerElement.java
+++ b/src/core/org/apache/jmeter/reporters/AbstractListenerElement.java
@@ -44,7 +44,7 @@ public abstract class AbstractListenerElement extends AbstractTestElement {
     }
 
     public void setListener(Visualizer vis) {
-        listener = new WeakReference<Visualizer>(vis);
+        listener = new WeakReference<>(vis);
     }
 
     @Override
diff --git a/src/core/org/apache/jmeter/reporters/FileReporter.java b/src/core/org/apache/jmeter/reporters/FileReporter.java
index 1ae1536..b08a571 100644
--- a/src/core/org/apache/jmeter/reporters/FileReporter.java
+++ b/src/core/org/apache/jmeter/reporters/FileReporter.java
@@ -55,7 +55,7 @@ public class FileReporter extends JPanel {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final Map<String, List<Integer>> data = new ConcurrentHashMap<String, List<Integer>>();
+    private final Map<String, List<Integer>> data = new ConcurrentHashMap<>();
 
     /**
      * Initialize a file reporter from a file
diff --git a/src/core/org/apache/jmeter/reporters/ResultCollector.java b/src/core/org/apache/jmeter/reporters/ResultCollector.java
index 2988e70..0dbfc27 100644
--- a/src/core/org/apache/jmeter/reporters/ResultCollector.java
+++ b/src/core/org/apache/jmeter/reporters/ResultCollector.java
@@ -105,7 +105,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
     private static final Object LOCK = new Object();
 
     //@GuardedBy("LOCK")
-    private static final Map<String, FileEntry> files = new HashMap<String, FileEntry>();
+    private static final Map<String, FileEntry> files = new HashMap<>();
 
     /**
      * Shutdown Hook that ensures PrintWriter is flushed is CTRL+C or kill is called during a test
diff --git a/src/core/org/apache/jmeter/reporters/Summariser.java b/src/core/org/apache/jmeter/reporters/Summariser.java
index 63c0ee8..6133bbd 100644
--- a/src/core/org/apache/jmeter/reporters/Summariser.java
+++ b/src/core/org/apache/jmeter/reporters/Summariser.java
@@ -95,7 +95,7 @@ public class Summariser extends AbstractTestElement
      * This map allows summarisers with the same name to contribute to the same totals.
      */
     //@GuardedBy("LOCK") - needed to ensure consistency between this and INSTANCE_COUNT
-    private static final Map<String, Totals> ACCUMULATORS = new ConcurrentHashMap<String, Totals>();
+    private static final Map<String, Totals> ACCUMULATORS = new ConcurrentHashMap<>();
 
     //@GuardedBy("LOCK")
     private static int INSTANCE_COUNT; // number of active tests
diff --git a/src/core/org/apache/jmeter/samplers/AsynchSampleSender.java b/src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
index 123c7a2..6f28ef9 100644
--- a/src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
+++ b/src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
@@ -67,7 +67,7 @@ public class AsynchSampleSender extends AbstractSampleSender implements Serializ
     private Object readResolve() throws ObjectStreamException{
         int capacity = getCapacity();
         log.info("Using batch queue size (asynch.batch.queue.size): " + capacity); // server log file
-        queue = new ArrayBlockingQueue<SampleEvent>(capacity);        
+        queue = new ArrayBlockingQueue<>(capacity);
         Worker worker = new Worker(queue, listener);
         worker.setDaemon(true);
         worker.start();
@@ -142,7 +142,7 @@ public class AsynchSampleSender extends AbstractSampleSender implements Serializ
             try {
                 boolean eof = false;
                 while (!eof) {
-                    List<SampleEvent> l = new ArrayList<SampleEvent>();
+                    List<SampleEvent> l = new ArrayList<>();
                     SampleEvent e = queue.take();
                     while (!(eof = (e == FINAL_EVENT)) && e != null) { // try to process as many as possible
                         l.add(e);
diff --git a/src/core/org/apache/jmeter/samplers/BatchSampleSender.java b/src/core/org/apache/jmeter/samplers/BatchSampleSender.java
index 547bfa8..190e956 100644
--- a/src/core/org/apache/jmeter/samplers/BatchSampleSender.java
+++ b/src/core/org/apache/jmeter/samplers/BatchSampleSender.java
@@ -57,7 +57,7 @@ public class BatchSampleSender extends AbstractSampleSender implements Serializa
 
     private final RemoteSampleListener listener;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     // Server-only work item
     private transient long batchSendTime = -1;
diff --git a/src/core/org/apache/jmeter/samplers/Entry.java b/src/core/org/apache/jmeter/samplers/Entry.java
index 979c490..6038a15 100644
--- a/src/core/org/apache/jmeter/samplers/Entry.java
+++ b/src/core/org/apache/jmeter/samplers/Entry.java
@@ -37,9 +37,9 @@ public class Entry {
     private List<Assertion> assertions;
 
     public Entry() {
-        configSet = new HashMap<Class<?>, ConfigElement>();
+        configSet = new HashMap<>();
         // clonedSet = new HashSet();
-        assertions = new LinkedList<Assertion>();
+        assertions = new LinkedList<>();
     }
 
     public void addAssertion(Assertion assertion) {
diff --git a/src/core/org/apache/jmeter/samplers/HoldSampleSender.java b/src/core/org/apache/jmeter/samplers/HoldSampleSender.java
index 96026c8..e4ff729 100644
--- a/src/core/org/apache/jmeter/samplers/HoldSampleSender.java
+++ b/src/core/org/apache/jmeter/samplers/HoldSampleSender.java
@@ -36,7 +36,7 @@ public class HoldSampleSender extends AbstractSampleSender implements Serializab
 
     private static final long serialVersionUID = 240L;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     private final RemoteSampleListener listener;
 
diff --git a/src/core/org/apache/jmeter/samplers/SampleResult.java b/src/core/org/apache/jmeter/samplers/SampleResult.java
index 12c4354..de1988d 100644
--- a/src/core/org/apache/jmeter/samplers/SampleResult.java
+++ b/src/core/org/apache/jmeter/samplers/SampleResult.java
@@ -175,7 +175,7 @@ public class SampleResult implements Serializable, Cloneable {
     /** In Non GUI mode and when best config is used, size never exceeds 1, 
      * but as a compromise set it to 3 
      */
-    private final Set<String> files = new HashSet<String>(3);
+    private final Set<String> files = new HashSet<>(3);
 
     private String dataEncoding;// (is this really the character set?) e.g.
                                 // ISO-8895-1, UTF-8
@@ -569,7 +569,7 @@ public class SampleResult implements Serializable, Cloneable {
 
     public void addAssertionResult(AssertionResult assertResult) {
         if (assertionResults == null) {
-            assertionResults = new ArrayList<AssertionResult>();
+            assertionResults = new ArrayList<>();
         }
         assertionResults.add(assertResult);
     }
@@ -636,7 +636,7 @@ public class SampleResult implements Serializable, Cloneable {
      */
     public void storeSubResult(SampleResult subResult) {
         if (subResults == null) {
-            subResults = new ArrayList<SampleResult>();
+            subResults = new ArrayList<>();
         }
         subResults.add(subResult);
         subResult.setParent(this);
diff --git a/src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java b/src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
index f3153e9..5d729b4 100644
--- a/src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
+++ b/src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
@@ -68,10 +68,10 @@ public class StatisticalSampleSender extends AbstractSampleSender implements Ser
 
     private final RemoteSampleListener listener;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     //@GuardedBy("sampleStore") TODO perhaps use ConcurrentHashMap ?
-    private final Map<String, StatisticalSampleResult> sampleTable = new HashMap<String, StatisticalSampleResult>();
+    private final Map<String, StatisticalSampleResult> sampleTable = new HashMap<>();
 
     // Settings; readResolve sets these from the server/client values as appropriate
     // TODO would be nice to make these final; not 100% sure volatile is needed as not changed after creation
diff --git a/src/core/org/apache/jmeter/save/CSVSaveService.java b/src/core/org/apache/jmeter/save/CSVSaveService.java
index e90197f..77d637c 100644
--- a/src/core/org/apache/jmeter/save/CSVSaveService.java
+++ b/src/core/org/apache/jmeter/save/CSVSaveService.java
@@ -1045,7 +1045,7 @@ public final class CSVSaveService {
             throws IOException {
         int ch;
         ParserState state = ParserState.INITIAL;
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         CharArrayWriter baos = new CharArrayWriter(200);
         boolean push = false;
         while (-1 != (ch = infile.read())) {
diff --git a/src/core/org/apache/jmeter/save/SaveService.java b/src/core/org/apache/jmeter/save/SaveService.java
index 4c34fe5..b748ee1 100644
--- a/src/core/org/apache/jmeter/save/SaveService.java
+++ b/src/core/org/apache/jmeter/save/SaveService.java
@@ -422,7 +422,7 @@ public class SaveService {
     // Allow test code to check for spurious class references
     static List<String> checkClasses(){
         final ClassLoader classLoader = SaveService.class.getClassLoader();
-        List<String> missingClasses = new ArrayList<String>();
+        List<String> missingClasses = new ArrayList<>();
         //boolean OK = true;
         for (Object clazz : classToAlias.keySet()) {
             String name = (String) clazz;
diff --git a/src/core/org/apache/jmeter/save/converters/ConversionHelp.java b/src/core/org/apache/jmeter/save/converters/ConversionHelp.java
index a8a3e7b..23c22c1 100644
--- a/src/core/org/apache/jmeter/save/converters/ConversionHelp.java
+++ b/src/core/org/apache/jmeter/save/converters/ConversionHelp.java
@@ -147,7 +147,7 @@ public class ConversionHelp {
     /**
      *  Names of properties that are handled specially
      */
-    private static final Map<String, String> propertyToAttribute=new HashMap<String, String>();
+    private static final Map<String, String> propertyToAttribute= new HashMap<>();
 
     private static void mapentry(String prop, String att){
         propertyToAttribute.put(prop,att);
diff --git a/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java b/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
index ea05520..a04ac06 100644
--- a/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
+++ b/src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
@@ -85,7 +85,7 @@ public class TestResultWrapperConverter extends AbstractCollectionConverter {
     @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         TestResultWrapper results = new TestResultWrapper();
-        Collection<SampleResult> samples = new ArrayList<SampleResult>();
+        Collection<SampleResult> samples = new ArrayList<>();
         String ver = reader.getAttribute("version");  //$NON-NLS-1$
         if (ver == null || ver.length() == 0) {
             ver = "1.0";  //$NON-NLS-1$
diff --git a/src/core/org/apache/jmeter/services/FileServer.java b/src/core/org/apache/jmeter/services/FileServer.java
index 9a321c5..486a3cc 100644
--- a/src/core/org/apache/jmeter/services/FileServer.java
+++ b/src/core/org/apache/jmeter/services/FileServer.java
@@ -79,7 +79,7 @@ public class FileServer {
     private File base;
 
     //@GuardedBy("this") NOTE this also guards against possible window in checkForOpenFiles()
-    private final Map<String, FileEntry> files = new HashMap<String, FileEntry>();
+    private final Map<String, FileEntry> files = new HashMap<>();
 
     private static final FileServer server = new FileServer();
 
diff --git a/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java b/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
index b10aa22..49eb16a 100644
--- a/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
+++ b/src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
@@ -137,7 +137,7 @@ public class TestBeanHelper {
     {
         if(prop instanceof CollectionProperty)
         {
-            Collection<Object> values = new LinkedList<Object>();
+            Collection<Object> values = new LinkedList<>();
             PropertyIterator iter = prop.iterator();
             while(iter.hasNext())
             {
diff --git a/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java b/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
index 647b336..2e276d4 100644
--- a/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
+++ b/src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
@@ -113,7 +113,7 @@ class ComboStringEditor extends PropertyEditorSupport implements ItemListener, C
         model = new DefaultComboBoxModel<>();
 
         if (rb != null && tags.length > 0) {
-            validTranslations=new HashMap<String, String>();
+            validTranslations= new HashMap<>();
             for (String tag : this.tags) {
                 validTranslations.put(tag, rb.getString(tag));
             }
diff --git a/src/core/org/apache/jmeter/testbeans/gui/TableEditor.java b/src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
index 9418bc5..0903089 100644
--- a/src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
+++ b/src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
@@ -138,7 +138,7 @@ public class TableEditor extends PropertyEditorSupport implements FocusListener,
 
     private Collection<Object> convertCollection(Collection<?> values)
     {
-        List<Object> l = new LinkedList<Object>();
+        List<Object> l = new LinkedList<>();
         for(Object obj : values)
         {
             if(obj instanceof TestElementProperty)
diff --git a/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java b/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
index b186497..7589411 100644
--- a/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
+++ b/src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
@@ -122,7 +122,7 @@ public class TestBeanGUI extends AbstractJMeterGuiComponent implements JMeterGUI
     /**
      * The property name to value map that the active customizer edits:
      */
-    private final Map<String, Object> propertyMap = new HashMap<String, Object>();
+    private final Map<String, Object> propertyMap = new HashMap<>();
 
     /**
      * Whether the GUI components have been created.
@@ -130,7 +130,7 @@ public class TestBeanGUI extends AbstractJMeterGuiComponent implements JMeterGUI
     private boolean initialized = false;
 
     static {
-        List<String> paths = new LinkedList<String>();
+        List<String> paths = new LinkedList<>();
         paths.add("org.apache.jmeter.testbeans.gui");// $NON-NLS-1$
         paths.addAll(Arrays.asList(PropertyEditorManager.getEditorSearchPath()));
         String s = JMeterUtils.getPropDefault("propertyEditorSearchPath", null);// $NON-NLS-1$
@@ -356,7 +356,7 @@ public TestElement createTestElement() {
     /** {@inheritDoc} */
     @Override
     public Collection<String> getMenuCategories() {
-        List<String> menuCategories = new LinkedList<String>();
+        List<String> menuCategories = new LinkedList<>();
         BeanDescriptor bd = beanInfo.getBeanDescriptor();
 
         // We don't want to show expert beans in the menus unless we're
diff --git a/src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java b/src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java
index 7b1858c..e352192 100644
--- a/src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java
+++ b/src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java
@@ -150,7 +150,7 @@ public abstract class AbstractScopedTestElement extends AbstractTestElement {
      * @return list containing the current sample and/or its child samples
      */
     protected List<SampleResult> getSampleList(SampleResult result) {
-        List<SampleResult> sampleList = new ArrayList<SampleResult>();
+        List<SampleResult> sampleList = new ArrayList<>();
 
         String scope = fetchScope();
         if (isScopeParent(scope) || isScopeAll(scope)) {
diff --git a/src/core/org/apache/jmeter/testelement/AbstractTestElement.java b/src/core/org/apache/jmeter/testelement/AbstractTestElement.java
index 7633c5e..ce0fb8c 100644
--- a/src/core/org/apache/jmeter/testelement/AbstractTestElement.java
+++ b/src/core/org/apache/jmeter/testelement/AbstractTestElement.java
@@ -535,7 +535,7 @@ public abstract class AbstractTestElement implements TestElement, Serializable,
     @Override
     public void setTemporary(JMeterProperty property) {
         if (temporaryProperties == null) {
-            temporaryProperties = new LinkedHashSet<JMeterProperty>();
+            temporaryProperties = new LinkedHashSet<>();
         }
         temporaryProperties.add(property);
         if (property instanceof MultiProperty) {
@@ -629,7 +629,7 @@ public abstract class AbstractTestElement implements TestElement, Serializable,
      */
     @Override
     public List<String> getSearchableTokens() {
-        List<String> result = new ArrayList<String>(25);
+        List<String> result = new ArrayList<>(25);
         PropertyIterator iterator = propertyIterator();
         while(iterator.hasNext()) {
             JMeterProperty jMeterProperty = iterator.next();    
diff --git a/src/core/org/apache/jmeter/testelement/TestPlan.java b/src/core/org/apache/jmeter/testelement/TestPlan.java
index f2e2e58..de6c4a9 100644
--- a/src/core/org/apache/jmeter/testelement/TestPlan.java
+++ b/src/core/org/apache/jmeter/testelement/TestPlan.java
@@ -57,7 +57,7 @@ public class TestPlan extends AbstractTestElement implements Serializable, TestS
 
     private static final String BASEDIR = "basedir";
 
-    private transient List<AbstractThreadGroup> threadGroups = new LinkedList<AbstractThreadGroup>();
+    private transient List<AbstractThreadGroup> threadGroups = new LinkedList<>();
 
     // There's only 1 test plan, so can cache the mode here
     private static volatile boolean functionalMode = false;
@@ -76,7 +76,7 @@ public class TestPlan extends AbstractTestElement implements Serializable, TestS
 
     // create transient item
     private Object readResolve(){
-        threadGroups = new LinkedList<AbstractThreadGroup>();
+        threadGroups = new LinkedList<>();
         return this;
     }
 
diff --git a/src/core/org/apache/jmeter/testelement/VariablesCollection.java b/src/core/org/apache/jmeter/testelement/VariablesCollection.java
index ae14dbf..899c24b 100644
--- a/src/core/org/apache/jmeter/testelement/VariablesCollection.java
+++ b/src/core/org/apache/jmeter/testelement/VariablesCollection.java
@@ -31,7 +31,7 @@ public class VariablesCollection implements Serializable {
 
     private static final long serialVersionUID = 240L;
 
-    private final Map<String, JMeterVariables> varMap = new HashMap<String, JMeterVariables>();
+    private final Map<String, JMeterVariables> varMap = new HashMap<>();
 
     public void addJMeterVariables(JMeterVariables jmVars) {
         varMap.put(Thread.currentThread().getName(), jmVars);
diff --git a/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java b/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
index 79af62a..e9ad3d8 100644
--- a/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
+++ b/src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
@@ -39,7 +39,7 @@ public class CollectionProperty extends MultiProperty {
 
     public CollectionProperty() {
         super();
-        value = new ArrayList<JMeterProperty>();
+        value = new ArrayList<>();
     }
 
     @Override
diff --git a/src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java b/src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
index 0cec79e..4c050d3 100644
--- a/src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
+++ b/src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
@@ -36,7 +36,7 @@ import org.apache.log.Logger;
 public class FindTestElementsUpToRootTraverser implements HashTreeTraverser {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final LinkedList<TestElement> stack = new LinkedList<TestElement>();
+    private final LinkedList<TestElement> stack = new LinkedList<>();
 
     /**
      * Node to find in TestTree
@@ -89,8 +89,8 @@ public class FindTestElementsUpToRootTraverser implements HashTreeTraverser {
      * @return List of {@link Controller}
      */
     public List<Controller> getControllersToRoot() {
-        List<Controller> result = new ArrayList<Controller>(stack.size());
-        LinkedList<TestElement> stackLocalCopy = new LinkedList<TestElement>(stack);
+        List<Controller> result = new ArrayList<>(stack.size());
+        LinkedList<TestElement> stackLocalCopy = new LinkedList<>(stack);
         while(stackLocalCopy.size()>0) {
             TestElement te = stackLocalCopy.getLast();
             if(te instanceof Controller) {
diff --git a/src/core/org/apache/jmeter/threads/JMeterContext.java b/src/core/org/apache/jmeter/threads/JMeterContext.java
index b104aaa..d0e32d8 100644
--- a/src/core/org/apache/jmeter/threads/JMeterContext.java
+++ b/src/core/org/apache/jmeter/threads/JMeterContext.java
@@ -52,7 +52,7 @@ public class JMeterContext {
 
     private boolean restartNextLoop = false;
 
-    private ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<String, Object>(5);
+    private ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<>(5);
 
     JMeterContext() {
         clear0();
diff --git a/src/core/org/apache/jmeter/threads/JMeterThread.java b/src/core/org/apache/jmeter/threads/JMeterThread.java
index 1ca44eb..550d671 100644
--- a/src/core/org/apache/jmeter/threads/JMeterThread.java
+++ b/src/core/org/apache/jmeter/threads/JMeterThread.java
@@ -140,7 +140,7 @@ public class JMeterThread implements Runnable, Interruptible {
         testTree = test;
         compiler = new TestCompiler(testTree);
         controller = (Controller) testTree.getArray()[0];
-        SearchByClass<TestIterationListener> threadListenerSearcher = new SearchByClass<TestIterationListener>(TestIterationListener.class); // TL - IS
+        SearchByClass<TestIterationListener> threadListenerSearcher = new SearchByClass<>(TestIterationListener.class); // TL - IS
         test.traverse(threadListenerSearcher);
         testIterationStartListeners = threadListenerSearcher.getSearchResults();
         notifier = note;
@@ -510,7 +510,7 @@ public class JMeterThread implements Runnable, Interruptible {
         List<SampleListener> sampleListeners = samplePack.getSampleListeners();
         // Do not send subsamples to listeners which receive the transaction sample
         if(transactionSampler != null) {
-            ArrayList<SampleListener> onlySubSamplerListeners = new ArrayList<SampleListener>();
+            ArrayList<SampleListener> onlySubSamplerListeners = new ArrayList<>();
             List<SampleListener> transListeners = transactionPack.getSampleListeners();
             for(SampleListener listener : sampleListeners) {
                 // Check if this instance is present in transaction listener list
diff --git a/src/core/org/apache/jmeter/threads/JMeterVariables.java b/src/core/org/apache/jmeter/threads/JMeterVariables.java
index d8d9c08..b6968a0 100644
--- a/src/core/org/apache/jmeter/threads/JMeterVariables.java
+++ b/src/core/org/apache/jmeter/threads/JMeterVariables.java
@@ -32,7 +32,7 @@ import org.apache.jmeter.util.JMeterUtils;
  * These are similar to properties, but they are local to a single thread.
  */
 public class JMeterVariables {
-    private final Map<String, Object> variables = new HashMap<String, Object>();
+    private final Map<String, Object> variables = new HashMap<>();
 
     private int iteration = 0;
 
diff --git a/src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java b/src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
index fd40d02..a64c2c0 100644
--- a/src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
+++ b/src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
@@ -39,7 +39,7 @@ import org.apache.log.Logger;
 public class RemoteThreadsListenerImpl extends UnicastRemoteObject implements
         RemoteThreadsListener, ThreadListener {
     private static final Logger log = LoggingManager.getLoggerForClass();
-    private final List<RemoteThreadsLifeCycleListener> listeners = new ArrayList<RemoteThreadsLifeCycleListener>();
+    private final List<RemoteThreadsLifeCycleListener> listeners = new ArrayList<>();
 
     /**
      * 
diff --git a/src/core/org/apache/jmeter/threads/TestCompiler.java b/src/core/org/apache/jmeter/threads/TestCompiler.java
index 692ebe6..ad707b0 100644
--- a/src/core/org/apache/jmeter/threads/TestCompiler.java
+++ b/src/core/org/apache/jmeter/threads/TestCompiler.java
@@ -76,14 +76,14 @@ public class TestCompiler implements HashTreeTraverser {
      * If the ObjectPair (child, parent) is present, then the child has been added.
      * Otherwise, the child is added to the parent and the pair is added to the Set.
      */
-    private static final Set<ObjectPair> PAIRING = new HashSet<ObjectPair>();
+    private static final Set<ObjectPair> PAIRING = new HashSet<>();
 
-    private final LinkedList<TestElement> stack = new LinkedList<TestElement>();
+    private final LinkedList<TestElement> stack = new LinkedList<>();
 
-    private final Map<Sampler, SamplePackage> samplerConfigMap = new HashMap<Sampler, SamplePackage>();
+    private final Map<Sampler, SamplePackage> samplerConfigMap = new HashMap<>();
 
     private final Map<TransactionController, SamplePackage> transactionControllerConfigMap =
-        new HashMap<TransactionController, SamplePackage>();
+            new HashMap<>();
 
     private final HashTree testTree;
 
@@ -204,17 +204,17 @@ public class TestCompiler implements HashTreeTraverser {
     }
 
     private void saveSamplerConfigs(Sampler sam) {
-        List<ConfigTestElement> configs = new LinkedList<ConfigTestElement>();
-        List<Controller> controllers = new LinkedList<Controller>();
-        List<SampleListener> listeners = new LinkedList<SampleListener>();
-        List<Timer> timers = new LinkedList<Timer>();
-        List<Assertion> assertions = new LinkedList<Assertion>();
-        LinkedList<PostProcessor> posts = new LinkedList<PostProcessor>();
-        LinkedList<PreProcessor> pres = new LinkedList<PreProcessor>();
+        List<ConfigTestElement> configs = new LinkedList<>();
+        List<Controller> controllers = new LinkedList<>();
+        List<SampleListener> listeners = new LinkedList<>();
+        List<Timer> timers = new LinkedList<>();
+        List<Assertion> assertions = new LinkedList<>();
+        LinkedList<PostProcessor> posts = new LinkedList<>();
+        LinkedList<PreProcessor> pres = new LinkedList<>();
         for (int i = stack.size(); i > 0; i--) {
             addDirectParentControllers(controllers, stack.get(i - 1));
-            List<PreProcessor>  tempPre = new LinkedList<PreProcessor> ();
-            List<PostProcessor> tempPost = new LinkedList<PostProcessor>();
+            List<PreProcessor>  tempPre = new LinkedList<>();
+            List<PostProcessor> tempPost = new LinkedList<>();
             for (Object item : testTree.list(stack.subList(0, i))) {
                 if ((item instanceof ConfigTestElement)) {
                     configs.add((ConfigTestElement) item);
@@ -247,13 +247,13 @@ public class TestCompiler implements HashTreeTraverser {
     }
 
     private void saveTransactionControllerConfigs(TransactionController tc) {
-        List<ConfigTestElement> configs = new LinkedList<ConfigTestElement>();
-        List<Controller> controllers = new LinkedList<Controller>();
-        List<SampleListener> listeners = new LinkedList<SampleListener>();
-        List<Timer> timers = new LinkedList<Timer>();
-        List<Assertion> assertions = new LinkedList<Assertion>();
-        LinkedList<PostProcessor> posts = new LinkedList<PostProcessor>();
-        LinkedList<PreProcessor> pres = new LinkedList<PreProcessor>();
+        List<ConfigTestElement> configs = new LinkedList<>();
+        List<Controller> controllers = new LinkedList<>();
+        List<SampleListener> listeners = new LinkedList<>();
+        List<Timer> timers = new LinkedList<>();
+        List<Assertion> assertions = new LinkedList<>();
+        LinkedList<PostProcessor> posts = new LinkedList<>();
+        LinkedList<PreProcessor> pres = new LinkedList<>();
         for (int i = stack.size(); i > 0; i--) {
             addDirectParentControllers(controllers, stack.get(i - 1));
             for (Object item : testTree.list(stack.subList(0, i))) {
diff --git a/src/core/org/apache/jmeter/threads/ThreadGroup.java b/src/core/org/apache/jmeter/threads/ThreadGroup.java
index eca50ee..c3b965e 100644
--- a/src/core/org/apache/jmeter/threads/ThreadGroup.java
+++ b/src/core/org/apache/jmeter/threads/ThreadGroup.java
@@ -77,7 +77,7 @@ public class ThreadGroup extends AbstractThreadGroup {
     private transient Thread threadStarter;
 
     // List of active threads
-    private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<JMeterThread, Thread>();
+    private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();
 
     /**
      * Is test (still) running?
diff --git a/src/core/org/apache/jmeter/util/JMeterUtils.java b/src/core/org/apache/jmeter/util/JMeterUtils.java
index 4d3391c..dd30f25 100644
--- a/src/core/org/apache/jmeter/util/JMeterUtils.java
+++ b/src/core/org/apache/jmeter/util/JMeterUtils.java
@@ -83,7 +83,7 @@ public class JMeterUtils implements UnitTestManager {
 
     private static volatile Properties appProperties;
 
-    private static final Vector<LocaleChangeListener> localeChangeListeners = new Vector<LocaleChangeListener>();
+    private static final Vector<LocaleChangeListener> localeChangeListeners = new Vector<>();
 
     private static volatile Locale locale;
 
@@ -668,7 +668,7 @@ public class JMeterUtils implements UnitTestManager {
     // TODO - does not appear to be called directly
     public static Vector<Object> getControllers(Properties properties) {
         String name = "controller."; // $NON-NLS-1$
-        Vector<Object> v = new Vector<Object>();
+        Vector<Object> v = new Vector<>();
         Enumeration<?> names = properties.keys();
         while (names.hasMoreElements()) {
             String prop = (String) names.nextElement();
@@ -735,7 +735,7 @@ public class JMeterUtils implements UnitTestManager {
      * @return The Vector value
      */
     public static Vector<String> getVector(Properties properties, String name) {
-        Vector<String> v = new Vector<String>();
+        Vector<String> v = new Vector<>();
         Enumeration<?> names = properties.keys();
         while (names.hasMoreElements()) {
             String prop = (String) names.nextElement();
@@ -767,7 +767,7 @@ public class JMeterUtils implements UnitTestManager {
      *         the prefix removed
      */
     public static Hashtable<String, String> getHashtable(Properties properties, String prefix) {
-        Hashtable<String, String> t = new Hashtable<String, String>();
+        Hashtable<String, String> t = new Hashtable<>();
         Enumeration<?> names = properties.keys();
         final int length = prefix.length();
         while (names.hasMoreElements()) {
@@ -970,7 +970,7 @@ public class JMeterUtils implements UnitTestManager {
      * @return Description of the Returned Value
      */
     public static Vector<Object> instantiate(Vector<String> v, String className) {
-        Vector<Object> i = new Vector<Object>();
+        Vector<Object> i = new Vector<>();
         try {
             Class<?> c = Class.forName(className);
             Enumeration<String> elements = v.elements();
@@ -1289,7 +1289,7 @@ public class JMeterUtils implements UnitTestManager {
      * @return a map name/value for each header
      */
     public static LinkedHashMap<String, String> parseHeaders(String headers) {
-        LinkedHashMap<String, String> linkedHeaders = new LinkedHashMap<String, String>();
+        LinkedHashMap<String, String> linkedHeaders = new LinkedHashMap<>();
         String[] list = headers.split("\n"); // $NON-NLS-1$
         for (String header : list) {
             int colon = header.indexOf(':'); // $NON-NLS-1$
diff --git a/src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java b/src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
index a8cf649..421554d 100644
--- a/src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
+++ b/src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
@@ -41,7 +41,7 @@ public abstract class JSR223BeanInfoSupport extends ScriptingBeanInfoSupport {
     public static final String[][] LANGUAGE_NAMES;
 
     static {
-        Map<String, ScriptEngineFactory> nameMap = new HashMap<String, ScriptEngineFactory>();
+        Map<String, ScriptEngineFactory> nameMap = new HashMap<>();
         ScriptEngineManager sem = new ScriptEngineManager();
         final List<ScriptEngineFactory> engineFactories = sem.getEngineFactories();
         for(ScriptEngineFactory fact : engineFactories){
diff --git a/src/core/org/apache/jmeter/util/JsseSSLManager.java b/src/core/org/apache/jmeter/util/JsseSSLManager.java
index b36690f..a5ec631 100644
--- a/src/core/org/apache/jmeter/util/JsseSSLManager.java
+++ b/src/core/org/apache/jmeter/util/JsseSSLManager.java
@@ -112,7 +112,7 @@ public class JsseSSLManager extends SSLManager {
                 log.debug("Creating shared context");
                 this.defaultContext = createContext();
             } else {
-                this.threadlocal = new ThreadLocal<SSLContext>();
+                this.threadlocal = new ThreadLocal<>();
             }
 
             HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(this, CPS));
diff --git a/src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java b/src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java
index a465977..2180eb9 100644
--- a/src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java
+++ b/src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java
@@ -41,7 +41,7 @@ import org.w3c.dom.Node;
 public class PropertiesBasedPrefixResolver extends PrefixResolverDefault {
     private static final Logger logger = LoggingManager.getLoggerForClass();
     private static final String XPATH_NAMESPACE_CONFIG = "xpath.namespace.config";
-    private static final Map<String, String> NAMESPACE_MAP = new HashMap<String, String>();
+    private static final Map<String, String> NAMESPACE_MAP = new HashMap<>();
     static {
         String pathToNamespaceConfig = JMeterUtils.getPropDefault(XPATH_NAMESPACE_CONFIG, "");
         if(!StringUtils.isEmpty(pathToNamespaceConfig)) {
diff --git a/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java b/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java
index 0189361..95f35f6 100644
--- a/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java
+++ b/src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java
@@ -59,8 +59,8 @@ public final class JmeterKeyStore {
     private String clientCertAliasVarName;
 
     private String[] names = new String[0]; // default empty array to prevent NPEs
-    private Map<String, PrivateKey> privateKeyByAlias = new HashMap<String, PrivateKey>();
-    private Map<String, X509Certificate[]> certsByAlias = new HashMap<String, X509Certificate[]>();
+    private Map<String, PrivateKey> privateKeyByAlias = new HashMap<>();
+    private Map<String, X509Certificate[]> certsByAlias = new HashMap<>();
 
     //@GuardedBy("this")
     private int last_user;
@@ -114,9 +114,9 @@ public final class JmeterKeyStore {
         char pw[] = pword==null ? null : pword.toCharArray();
         store.load(is, pw);
     
-        ArrayList<String> v_names = new ArrayList<String>();
-        this.privateKeyByAlias = new HashMap<String, PrivateKey>();
-        this.certsByAlias = new HashMap<String, X509Certificate[]>();
+        ArrayList<String> v_names = new ArrayList<>();
+        this.privateKeyByAlias = new HashMap<>();
+        this.certsByAlias = new HashMap<>();
 
         if (null != is){ // No point checking an empty keystore
             PrivateKey _key = null;
diff --git a/src/functions/org/apache/jmeter/functions/AbstractHostIPName.java b/src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
index f807ed3..55afcd0 100644
--- a/src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
+++ b/src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
@@ -30,7 +30,7 @@ import org.apache.jmeter.util.JMeterUtils;
 
 abstract class AbstractHostIPName extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static {
         // desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)");
diff --git a/src/functions/org/apache/jmeter/functions/BeanShell.java b/src/functions/org/apache/jmeter/functions/BeanShell.java
index 28f12ee..d66d429 100644
--- a/src/functions/org/apache/jmeter/functions/BeanShell.java
+++ b/src/functions/org/apache/jmeter/functions/BeanShell.java
@@ -41,7 +41,7 @@ public class BeanShell extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__BeanShell"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/CSVRead.java b/src/functions/org/apache/jmeter/functions/CSVRead.java
index 62367fa..4f94c52 100644
--- a/src/functions/org/apache/jmeter/functions/CSVRead.java
+++ b/src/functions/org/apache/jmeter/functions/CSVRead.java
@@ -55,7 +55,7 @@ public class CSVRead extends AbstractFunction {
 
     private static final String KEY = "__CSVRead"; // Function name //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private Object[] values; // Parameter list
 
diff --git a/src/functions/org/apache/jmeter/functions/CharFunction.java b/src/functions/org/apache/jmeter/functions/CharFunction.java
index 813e047..1177291 100644
--- a/src/functions/org/apache/jmeter/functions/CharFunction.java
+++ b/src/functions/org/apache/jmeter/functions/CharFunction.java
@@ -37,7 +37,7 @@ public class CharFunction extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__char"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/EscapeHtml.java b/src/functions/org/apache/jmeter/functions/EscapeHtml.java
index 460040d..077efc0 100644
--- a/src/functions/org/apache/jmeter/functions/EscapeHtml.java
+++ b/src/functions/org/apache/jmeter/functions/EscapeHtml.java
@@ -49,7 +49,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class EscapeHtml extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__escapeHtml"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java b/src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
index dae8b0e..166cbeb 100644
--- a/src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
+++ b/src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
@@ -38,7 +38,7 @@ import org.apache.oro.text.regex.Perl5Compiler;
 public class EscapeOroRegexpChars extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__escapeOroRegexpChars"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/EvalFunction.java b/src/functions/org/apache/jmeter/functions/EvalFunction.java
index 5f88250..9c942c5 100644
--- a/src/functions/org/apache/jmeter/functions/EvalFunction.java
+++ b/src/functions/org/apache/jmeter/functions/EvalFunction.java
@@ -39,7 +39,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class EvalFunction extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__eval"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/EvalVarFunction.java b/src/functions/org/apache/jmeter/functions/EvalVarFunction.java
index dfff314..6c9ef71 100644
--- a/src/functions/org/apache/jmeter/functions/EvalVarFunction.java
+++ b/src/functions/org/apache/jmeter/functions/EvalVarFunction.java
@@ -44,7 +44,7 @@ public class EvalVarFunction extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__evalVar"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/FileRowColContainer.java b/src/functions/org/apache/jmeter/functions/FileRowColContainer.java
index 6ed8ffc..dc7c44a 100644
--- a/src/functions/org/apache/jmeter/functions/FileRowColContainer.java
+++ b/src/functions/org/apache/jmeter/functions/FileRowColContainer.java
@@ -58,7 +58,7 @@ public class FileRowColContainer {
         fileName = file;
         delimiter = delim;
         nextRow = 0;
-        fileData = new ArrayList<List<String>>();
+        fileData = new ArrayList<>();
         load();
     }
 
@@ -67,7 +67,7 @@ public class FileRowColContainer {
         fileName = file;
         delimiter = DELIMITER;
         nextRow = 0;
-        fileData = new ArrayList<List<String>>();
+        fileData = new ArrayList<>();
         load();
     }
 
@@ -144,7 +144,7 @@ public class FileRowColContainer {
      *         the line
      */
     private static List<String> splitLine(String theLine, String delim) {
-        ArrayList<String> result = new ArrayList<String>();
+        ArrayList<String> result = new ArrayList<>();
         StringTokenizer tokener = new StringTokenizer(theLine, delim, true);
         /*
          * the beginning of the line is a "delimiter" so that ,a,b,c returns ""
diff --git a/src/functions/org/apache/jmeter/functions/FileToString.java b/src/functions/org/apache/jmeter/functions/FileToString.java
index 2649380..4e25139 100644
--- a/src/functions/org/apache/jmeter/functions/FileToString.java
+++ b/src/functions/org/apache/jmeter/functions/FileToString.java
@@ -51,7 +51,7 @@ import org.apache.log.Logger;
 public class FileToString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__FileToString";//$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/FileWrapper.java b/src/functions/org/apache/jmeter/functions/FileWrapper.java
index 6b5cbd5..e8189da 100644
--- a/src/functions/org/apache/jmeter/functions/FileWrapper.java
+++ b/src/functions/org/apache/jmeter/functions/FileWrapper.java
@@ -48,15 +48,14 @@ public final class FileWrapper {
      * - maps file names to  containers
      * - ensures only one container per file across all threads
      */
-    private static final Map<String, FileRowColContainer> fileContainers =
-        new HashMap<String, FileRowColContainer>();
+    private static final Map<String, FileRowColContainer> fileContainers = new HashMap<>();
 
     /* The cache of file packs - used to improve thread access */
     private static final ThreadLocal<Map<String, FileWrapper>> filePacks = 
         new ThreadLocal<Map<String, FileWrapper>>() {
         @Override
         protected Map<String, FileWrapper> initialValue() {
-            return new HashMap<String, FileWrapper>();
+            return new HashMap<>();
         }
     };
 
diff --git a/src/functions/org/apache/jmeter/functions/IntSum.java b/src/functions/org/apache/jmeter/functions/IntSum.java
index 7cc6447..0b537cc 100644
--- a/src/functions/org/apache/jmeter/functions/IntSum.java
+++ b/src/functions/org/apache/jmeter/functions/IntSum.java
@@ -35,7 +35,7 @@ import org.apache.jmeter.util.JMeterUtils;
  * @since 1.8.1
  */
 public class IntSum extends AbstractFunction {
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__intSum"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/IterationCounter.java b/src/functions/org/apache/jmeter/functions/IterationCounter.java
index b22f56a..43a8448 100644
--- a/src/functions/org/apache/jmeter/functions/IterationCounter.java
+++ b/src/functions/org/apache/jmeter/functions/IterationCounter.java
@@ -35,7 +35,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class IterationCounter extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__counter"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/JavaScript.java b/src/functions/org/apache/jmeter/functions/JavaScript.java
index a656345..dde9d2f 100644
--- a/src/functions/org/apache/jmeter/functions/JavaScript.java
+++ b/src/functions/org/apache/jmeter/functions/JavaScript.java
@@ -41,7 +41,7 @@ import org.mozilla.javascript.Scriptable;
  */
 public class JavaScript extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__javaScript"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Jexl2Function.java b/src/functions/org/apache/jmeter/functions/Jexl2Function.java
index dcbfd6c..b47042c 100644
--- a/src/functions/org/apache/jmeter/functions/Jexl2Function.java
+++ b/src/functions/org/apache/jmeter/functions/Jexl2Function.java
@@ -46,9 +46,9 @@ public class Jexl2Function extends AbstractFunction implements ThreadListener {
 
     private static final String KEY = "__jexl2"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
-    private static final ThreadLocal<JexlEngine> threadLocalJexl = new ThreadLocal<JexlEngine>();
+    private static final ThreadLocal<JexlEngine> threadLocalJexl = new ThreadLocal<>();
 
     static
     {
diff --git a/src/functions/org/apache/jmeter/functions/JexlFunction.java b/src/functions/org/apache/jmeter/functions/JexlFunction.java
index f403a9f..a24851f 100644
--- a/src/functions/org/apache/jmeter/functions/JexlFunction.java
+++ b/src/functions/org/apache/jmeter/functions/JexlFunction.java
@@ -46,7 +46,7 @@ public class JexlFunction extends AbstractFunction {
 
     private static final String KEY = "__jexl"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static
     {
diff --git a/src/functions/org/apache/jmeter/functions/LogFunction.java b/src/functions/org/apache/jmeter/functions/LogFunction.java
index 38ead95..b9fc265 100644
--- a/src/functions/org/apache/jmeter/functions/LogFunction.java
+++ b/src/functions/org/apache/jmeter/functions/LogFunction.java
@@ -49,7 +49,7 @@ import org.apache.log.Priority;
 public class LogFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__log"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/LogFunction2.java b/src/functions/org/apache/jmeter/functions/LogFunction2.java
index 81faf89..a8299e0 100644
--- a/src/functions/org/apache/jmeter/functions/LogFunction2.java
+++ b/src/functions/org/apache/jmeter/functions/LogFunction2.java
@@ -47,7 +47,7 @@ import org.apache.log.Logger;
 public class LogFunction2 extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__logn"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/LongSum.java b/src/functions/org/apache/jmeter/functions/LongSum.java
index f68cdc4..d92959c 100644
--- a/src/functions/org/apache/jmeter/functions/LongSum.java
+++ b/src/functions/org/apache/jmeter/functions/LongSum.java
@@ -35,7 +35,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class LongSum extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__longSum"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Property.java b/src/functions/org/apache/jmeter/functions/Property.java
index b993593..e3dbf7c 100644
--- a/src/functions/org/apache/jmeter/functions/Property.java
+++ b/src/functions/org/apache/jmeter/functions/Property.java
@@ -44,7 +44,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Property extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__property"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Property2.java b/src/functions/org/apache/jmeter/functions/Property2.java
index eab945b..7f28239 100644
--- a/src/functions/org/apache/jmeter/functions/Property2.java
+++ b/src/functions/org/apache/jmeter/functions/Property2.java
@@ -49,7 +49,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Property2 extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__P"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Random.java b/src/functions/org/apache/jmeter/functions/Random.java
index 32b9af1..14e50be 100644
--- a/src/functions/org/apache/jmeter/functions/Random.java
+++ b/src/functions/org/apache/jmeter/functions/Random.java
@@ -36,7 +36,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Random extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
     private static final String KEY = "__Random"; //$NON-NLS-1$
 
     static {
diff --git a/src/functions/org/apache/jmeter/functions/RandomString.java b/src/functions/org/apache/jmeter/functions/RandomString.java
index 1c8bdc6..aff2906 100644
--- a/src/functions/org/apache/jmeter/functions/RandomString.java
+++ b/src/functions/org/apache/jmeter/functions/RandomString.java
@@ -40,7 +40,7 @@ import org.apache.log.Logger;
 public class RandomString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__RandomString"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/RegexFunction.java b/src/functions/org/apache/jmeter/functions/RegexFunction.java
index d4c3eaf..e02d063 100644
--- a/src/functions/org/apache/jmeter/functions/RegexFunction.java
+++ b/src/functions/org/apache/jmeter/functions/RegexFunction.java
@@ -57,7 +57,7 @@ public class RegexFunction extends AbstractFunction {
 
     private Object[] values;// Parameters are stored here
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String TEMPLATE_PATTERN = "\\$(\\d+)\\$";  //$NON-NLS-1$
     /** initialised to the regex \$(\d+)\$ */
@@ -151,7 +151,7 @@ public class RegexFunction extends AbstractFunction {
             return defaultValue;
         }
 
-        List<MatchResult> collectAllMatches = new ArrayList<MatchResult>();
+        List<MatchResult> collectAllMatches = new ArrayList<>();
         try {
             PatternMatcher matcher = JMeterUtils.getMatcher();
             PatternMatcherInput input = new PatternMatcherInput(textToMatch);
@@ -246,9 +246,9 @@ public class RegexFunction extends AbstractFunction {
     }
 
     private Object[] generateTemplate(String rawTemplate) {
-        List<String> pieces = new ArrayList<String>();
+        List<String> pieces = new ArrayList<>();
         // String or Integer
-        List<Object> combined = new LinkedList<Object>();
+        List<Object> combined = new LinkedList<>();
         PatternMatcher matcher = JMeterUtils.getMatcher();
         Util.split(pieces, matcher, templatePattern, rawTemplate);
         PatternMatcherInput input = new PatternMatcherInput(rawTemplate);
diff --git a/src/functions/org/apache/jmeter/functions/SamplerName.java b/src/functions/org/apache/jmeter/functions/SamplerName.java
index ab22158..d410922 100644
--- a/src/functions/org/apache/jmeter/functions/SamplerName.java
+++ b/src/functions/org/apache/jmeter/functions/SamplerName.java
@@ -36,7 +36,7 @@ public class SamplerName extends AbstractFunction {
 
     private static final String KEY = "__samplerName"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static {
         // desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)");
diff --git a/src/functions/org/apache/jmeter/functions/SetProperty.java b/src/functions/org/apache/jmeter/functions/SetProperty.java
index a31fb3d..dc013f0 100644
--- a/src/functions/org/apache/jmeter/functions/SetProperty.java
+++ b/src/functions/org/apache/jmeter/functions/SetProperty.java
@@ -43,7 +43,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class SetProperty extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__setProperty"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/SplitFunction.java b/src/functions/org/apache/jmeter/functions/SplitFunction.java
index 59853a6..75f7c1c 100644
--- a/src/functions/org/apache/jmeter/functions/SplitFunction.java
+++ b/src/functions/org/apache/jmeter/functions/SplitFunction.java
@@ -57,7 +57,7 @@ import org.apache.log.Logger;
 public class SplitFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__split";// $NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/StringFromFile.java b/src/functions/org/apache/jmeter/functions/StringFromFile.java
index ad52642..4288a69 100644
--- a/src/functions/org/apache/jmeter/functions/StringFromFile.java
+++ b/src/functions/org/apache/jmeter/functions/StringFromFile.java
@@ -67,7 +67,7 @@ public class StringFromFile extends AbstractFunction implements TestStateListene
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     // Only modified by static block so no need to synchronize subsequent read-only access
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__StringFromFile";//$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/TestPlanName.java b/src/functions/org/apache/jmeter/functions/TestPlanName.java
index 4958c6c..661752f 100644
--- a/src/functions/org/apache/jmeter/functions/TestPlanName.java
+++ b/src/functions/org/apache/jmeter/functions/TestPlanName.java
@@ -33,7 +33,7 @@ import org.apache.jmeter.services.FileServer;
  */
 public class TestPlanName extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__TestPlanName"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/ThreadNumber.java b/src/functions/org/apache/jmeter/functions/ThreadNumber.java
index 70227a6..81cac3a 100644
--- a/src/functions/org/apache/jmeter/functions/ThreadNumber.java
+++ b/src/functions/org/apache/jmeter/functions/ThreadNumber.java
@@ -34,7 +34,7 @@ public class ThreadNumber extends AbstractFunction {
 
     private static final String KEY = "__threadNum"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     /** {@inheritDoc} */
     @Override
diff --git a/src/functions/org/apache/jmeter/functions/TimeFunction.java b/src/functions/org/apache/jmeter/functions/TimeFunction.java
index 8179f05..2585be6 100644
--- a/src/functions/org/apache/jmeter/functions/TimeFunction.java
+++ b/src/functions/org/apache/jmeter/functions/TimeFunction.java
@@ -42,10 +42,10 @@ public class TimeFunction extends AbstractFunction {
 
     private static final String KEY = "__time"; // $NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     // Only modified in class init
-    private static final Map<String, String> aliases = new HashMap<String, String>();
+    private static final Map<String, String> aliases = new HashMap<>();
 
     static {
         desc.add(JMeterUtils.getResString("time_format")); //$NON-NLS-1$
diff --git a/src/functions/org/apache/jmeter/functions/UnEscape.java b/src/functions/org/apache/jmeter/functions/UnEscape.java
index ac148a9..4f5ce2b 100644
--- a/src/functions/org/apache/jmeter/functions/UnEscape.java
+++ b/src/functions/org/apache/jmeter/functions/UnEscape.java
@@ -39,7 +39,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class UnEscape extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__unescape"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/UnEscapeHtml.java b/src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
index 3449a20..9428c0f 100644
--- a/src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
+++ b/src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
@@ -45,7 +45,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class UnEscapeHtml extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__unescapeHtml"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/UrlDecode.java b/src/functions/org/apache/jmeter/functions/UrlDecode.java
index 9478a41..f5c8c3a 100644
--- a/src/functions/org/apache/jmeter/functions/UrlDecode.java
+++ b/src/functions/org/apache/jmeter/functions/UrlDecode.java
@@ -39,7 +39,7 @@ public class UrlDecode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
     
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__urldecode"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/UrlEncode.java b/src/functions/org/apache/jmeter/functions/UrlEncode.java
index 0e3e2da..d751a65 100644
--- a/src/functions/org/apache/jmeter/functions/UrlEncode.java
+++ b/src/functions/org/apache/jmeter/functions/UrlEncode.java
@@ -39,7 +39,7 @@ public class UrlEncode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
     
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__urlencode"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Uuid.java b/src/functions/org/apache/jmeter/functions/Uuid.java
index 77f6718..ec6a44e 100644
--- a/src/functions/org/apache/jmeter/functions/Uuid.java
+++ b/src/functions/org/apache/jmeter/functions/Uuid.java
@@ -39,7 +39,7 @@ import java.util.UUID;
  */
 public class Uuid extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__UUID"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/Variable.java b/src/functions/org/apache/jmeter/functions/Variable.java
index 8d27d48..ec529cd 100644
--- a/src/functions/org/apache/jmeter/functions/Variable.java
+++ b/src/functions/org/apache/jmeter/functions/Variable.java
@@ -41,7 +41,7 @@ import org.apache.jmeter.util.JMeterUtils;
  */
 public class Variable extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__V"; //$NON-NLS-1$
 
diff --git a/src/functions/org/apache/jmeter/functions/XPath.java b/src/functions/org/apache/jmeter/functions/XPath.java
index a1359dc..b882225 100644
--- a/src/functions/org/apache/jmeter/functions/XPath.java
+++ b/src/functions/org/apache/jmeter/functions/XPath.java
@@ -54,7 +54,7 @@ public class XPath extends AbstractFunction {
     // }
     private static final String KEY = "__XPath"; // Function name //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private Object[] values; // Parameter list
 
diff --git a/src/functions/org/apache/jmeter/functions/XPathWrapper.java b/src/functions/org/apache/jmeter/functions/XPathWrapper.java
index 47c3383..254ab17 100644
--- a/src/functions/org/apache/jmeter/functions/XPathWrapper.java
+++ b/src/functions/org/apache/jmeter/functions/XPathWrapper.java
@@ -50,14 +50,14 @@ final class XPathWrapper {
      */
     //@GuardedBy("fileContainers")
     private static final Map<String, XPathFileContainer> fileContainers =
-        new HashMap<String, XPathFileContainer>();
+            new HashMap<>();
 
     /* The cache of file packs - for faster local access */
     private static final ThreadLocal<Map<String, XPathFileContainer>> filePacks =
         new ThreadLocal<Map<String, XPathFileContainer>>() {
         @Override
         protected Map<String, XPathFileContainer> initialValue() {
-            return new HashMap<String, XPathFileContainer>();
+            return new HashMap<>();
         }
     };
 
diff --git a/src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java b/src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
index ce73475..2d98b1b 100644
--- a/src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
+++ b/src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
@@ -223,7 +223,7 @@ public final class CLArgsParser {
     public CLArgsParser(final String[] args, final CLOptionDescriptor[] optionDescriptors, final ParserControl control) {
         m_optionDescriptors = optionDescriptors;
         m_control = control;
-        m_options = new Vector<CLOption>();
+        m_options = new Vector<>();
         m_args = args;
 
         try {
@@ -666,7 +666,7 @@ public final class CLArgsParser {
      */
     private final void buildOptionIndex() {
         final int size = m_options.size();
-        m_optionIndex = new Hashtable<Object, CLOption>(size * 2);
+        m_optionIndex = new Hashtable<>(size * 2);
 
         for (int i = 0; i < size; i++) {
             final CLOption option = m_options.get(i);
diff --git a/src/jorphan/org/apache/jorphan/collections/Data.java b/src/jorphan/org/apache/jorphan/collections/Data.java
index f978ab8..d983844 100644
--- a/src/jorphan/org/apache/jorphan/collections/Data.java
+++ b/src/jorphan/org/apache/jorphan/collections/Data.java
@@ -57,8 +57,8 @@ public class Data implements Serializable {
      * Constructor - takes no arguments.
      */
     public Data() {
-        header = new ArrayList<String>();
-        data = new HashMap<String, List<Object>>();
+        header = new ArrayList<>();
+        data = new HashMap<>();
         currentPos = -1;
         size = currentPos + 1;
     }
@@ -151,10 +151,10 @@ public class Data implements Serializable {
 
     public void addRow() {
         String[] headers = getHeaders();
-        List<Object> tempList = new ArrayList<Object>();
+        List<Object> tempList = new ArrayList<>();
         for (int i = 0; i < headers.length; i++) {
             if ((tempList = data.get(header.get(i))) == null) {
-                tempList = new ArrayList<Object>();
+                tempList = new ArrayList<>();
                 data.put(headers[i], tempList);
             }
             tempList.add("");
@@ -271,7 +271,7 @@ public class Data implements Serializable {
     public void addColumnValue(String column, Object value) {
         List<Object> tempList;
         if ((tempList = data.get(column)) == null) {
-            tempList = new ArrayList<Object>();
+            tempList = new ArrayList<>();
             data.put(column, tempList);
         }
         int s = tempList.size();
@@ -320,7 +320,7 @@ public class Data implements Serializable {
     public void setColumnValue(String column, Object value) {
         List<Object> tempList;
         if ((tempList = data.get(column)) == null) {
-            tempList = new ArrayList<Object>();
+            tempList = new ArrayList<>();
             data.put(column, tempList);
         }
 
@@ -468,10 +468,10 @@ public class Data implements Serializable {
      */
     public void setHeaders(String[] h) {
         int x = 0;
-        header = new ArrayList<String>(h.length);
+        header = new ArrayList<>(h.length);
         for (x = 0; x < h.length; x++) {
             header.add(h[x]);
-            data.put(h[x], new ArrayList<Object>());
+            data.put(h[x], new ArrayList<>());
         }
     }
 
@@ -597,7 +597,7 @@ public class Data implements Serializable {
      */
     public void addHeader(String s) {
         header.add(s);
-        data.put(s, new ArrayList<Object>(Math.max(size(), 100)));
+        data.put(s, new ArrayList<>(Math.max(size(), 100)));
     }
 
     /**
diff --git a/src/jorphan/org/apache/jorphan/collections/HashTree.java b/src/jorphan/org/apache/jorphan/collections/HashTree.java
index 8335398..799d5ab 100644
--- a/src/jorphan/org/apache/jorphan/collections/HashTree.java
+++ b/src/jorphan/org/apache/jorphan/collections/HashTree.java
@@ -98,7 +98,7 @@ public class HashTree implements Serializable, Map<Object, HashTree>, Cloneable
         if(_map != null) {
             data = _map;
         } else {
-            data = new HashMap<Object, HashTree>();
+            data = new HashMap<>();
         }
         if(key != null) {
             data.put(key, new HashTree());
@@ -215,7 +215,7 @@ public class HashTree implements Serializable, Map<Object, HashTree>, Cloneable
      *            a collection of objects to be added to the created HashTree.
      */
     public HashTree(Collection<?> keys) {
-        data = new HashMap<Object, HashTree>();
+        data = new HashMap<>();
         for (Object o : keys) {
             data.put(o, new HashTree());
         }
@@ -229,7 +229,7 @@ public class HashTree implements Serializable, Map<Object, HashTree>, Cloneable
      *            array with names for the new top-level nodes
      */
     public HashTree(Object[] keys) {
-        data = new HashMap<Object, HashTree>();
+        data = new HashMap<>();
         for (int x = 0; x < keys.length; x++) {
             data.put(keys[x], new HashTree());
         }
diff --git a/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java b/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
index d4196da..f523746 100644
--- a/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
+++ b/src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
@@ -45,7 +45,7 @@ public class ListedHashTree extends HashTree implements Serializable, Cloneable
 
     public ListedHashTree() {
         super();
-        order = new LinkedList<Object>();
+        order = new LinkedList<>();
     }
 
     public ListedHashTree(Object key) {
diff --git a/src/jorphan/org/apache/jorphan/collections/SearchByClass.java b/src/jorphan/org/apache/jorphan/collections/SearchByClass.java
index 0ce00d0..b26a9dc 100644
--- a/src/jorphan/org/apache/jorphan/collections/SearchByClass.java
+++ b/src/jorphan/org/apache/jorphan/collections/SearchByClass.java
@@ -54,9 +54,9 @@ import java.util.Map;
  *            Class that should be searched for
  */
 public class SearchByClass<T> implements HashTreeTraverser {
-    private final List<T> objectsOfClass = new LinkedList<T>();
+    private final List<T> objectsOfClass = new LinkedList<>();
 
-    private final Map<Object, ListedHashTree> subTrees = new HashMap<Object, ListedHashTree>();
+    private final Map<Object, ListedHashTree> subTrees = new HashMap<>();
 
     private final Class<T> searchClass;
 
diff --git a/src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java b/src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
index 43aa0b5..8e56271 100644
--- a/src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
+++ b/src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
@@ -136,7 +136,7 @@ public class KeyToolUtils {
             throws IOException {
         final File workingDir = keystore.getParentFile();
         final SystemCommand nativeCommand = new SystemCommand(workingDir, null);
-        final List<String> arguments = new ArrayList<String>();
+        final List<String> arguments = new ArrayList<>();
         arguments.add(getKeyToolPath());
         arguments.add("-genkeypair"); // $NON-NLS-1$
         arguments.add("-alias"); // $NON-NLS-1$
@@ -305,7 +305,7 @@ public class KeyToolUtils {
     public static String list(final File keystore, final String storePass) throws IOException {
         final File workingDir = keystore.getParentFile();
         final SystemCommand nativeCommand = new SystemCommand(workingDir, null);
-        final List<String> arguments = new ArrayList<String>();
+        final List<String> arguments = new ArrayList<>();
         arguments.add(getKeyToolPath());
         arguments.add("-list"); // $NON-NLS-1$
         arguments.add("-v"); // $NON-NLS-1$
@@ -368,7 +368,7 @@ public class KeyToolUtils {
             throws IOException {
         final File workingDir = keystore.getParentFile();
         final SystemCommand nativeCommand = new SystemCommand(workingDir, 0L, 0, null, input, output, null);
-        final List<String> arguments = new ArrayList<String>();
+        final List<String> arguments = new ArrayList<>();
         arguments.add(getKeyToolPath());
         arguments.add(command);
         arguments.add("-keystore"); // $NON-NLS-1$
@@ -420,7 +420,7 @@ public class KeyToolUtils {
      */
     private static boolean checkKeytool(String keytoolPath) {
         final SystemCommand nativeCommand = new SystemCommand(null, null);
-        final List<String> arguments = new ArrayList<String>();
+        final List<String> arguments = new ArrayList<>();
         arguments.add(keytoolPath);
         arguments.add("-help"); // $NON-NLS-1$
         try {
diff --git a/src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java b/src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java
index 757f54e..7c3168b 100644
--- a/src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java
+++ b/src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java
@@ -36,11 +36,11 @@ public abstract class AbstractTreeTableModel extends DefaultTableModel implement
     protected final TreeNode rootNode;
     protected final EventListenerList listener = new EventListenerList();
 
-    protected transient final List<Object> objects = new ArrayList<Object>();
+    protected transient final List<Object> objects = new ArrayList<>();
 
-    protected transient final List<String> headers = new ArrayList<String>();
+    protected transient final List<String> headers = new ArrayList<>();
 
-    protected transient final List<Class<?>> classes = new ArrayList<Class<?>>();
+    protected transient final List<Class<?>> classes = new ArrayList<>();
 
     protected transient final List<Functor> readFunctors;
 
@@ -48,8 +48,8 @@ public abstract class AbstractTreeTableModel extends DefaultTableModel implement
 
     public AbstractTreeTableModel(TreeNode root) {
         this.rootNode = root;
-        readFunctors = new ArrayList<Functor>();
-        writeFunctors = new ArrayList<Functor>();
+        readFunctors = new ArrayList<>();
+        writeFunctors = new ArrayList<>();
     }
 
     public AbstractTreeTableModel(String[] headers,
@@ -59,8 +59,8 @@ public abstract class AbstractTreeTableModel extends DefaultTableModel implement
         this.rootNode = null;
         this.headers.addAll(Arrays.asList(headers));
         this.classes.addAll(Arrays.asList(editorClasses));
-        this.readFunctors = new ArrayList<Functor>(Arrays.asList(readFunctors));
-        this.writeFunctors = new ArrayList<Functor>(Arrays.asList(writeFunctors));
+        this.readFunctors = new ArrayList<>(Arrays.asList(readFunctors));
+        this.writeFunctors = new ArrayList<>(Arrays.asList(writeFunctors));
     }
 
     /**
diff --git a/src/jorphan/org/apache/jorphan/gui/GuiUtils.java b/src/jorphan/org/apache/jorphan/gui/GuiUtils.java
index ed23dc9..4a21d44 100644
--- a/src/jorphan/org/apache/jorphan/gui/GuiUtils.java
+++ b/src/jorphan/org/apache/jorphan/gui/GuiUtils.java
@@ -125,7 +125,7 @@ public final class GuiUtils {
         Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
         Transferable trans = clipboard.getContents(null);
         DataFlavor[] flavourList = trans.getTransferDataFlavors();
-        Collection<DataFlavor> flavours = new ArrayList<DataFlavor>(flavourList.length);
+        Collection<DataFlavor> flavours = new ArrayList<>(flavourList.length);
         if (Collections.addAll(flavours, flavourList) && flavours.contains(DataFlavor.stringFlavor)) {
             return (String) trans.getTransferData(DataFlavor.stringFlavor);
         } else {
diff --git a/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java b/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
index 7e63c97..e65a0b6 100644
--- a/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
+++ b/src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
@@ -43,7 +43,7 @@ public class JLabeledChoice extends JPanel implements JLabeledField {
     private final JComboBox<String> choiceList;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     private JButton delete, add;
 
@@ -95,7 +95,7 @@ public class JLabeledChoice extends JPanel implements JLabeledField {
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(choiceList);
         return comps;
diff --git a/src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java b/src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
index 955f190..87c589f 100644
--- a/src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
+++ b/src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
@@ -50,7 +50,7 @@ public class JLabeledTextArea extends JPanel implements JLabeledField, FocusList
     private final JTextArea mTextArea;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     // A temporary cache for the focus listener
     private String oldValue = "";
@@ -94,7 +94,7 @@ public class JLabeledTextArea extends JPanel implements JLabeledField, FocusList
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(mTextArea);
         return comps;
diff --git a/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java b/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
index e9af6e3..386bd86 100644
--- a/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
+++ b/src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
@@ -49,7 +49,7 @@ public class JLabeledTextField extends JPanel implements JLabeledField, FocusLis
     private JTextField mTextField;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     // A temporary cache for the focus listener
     private String oldValue = "";
@@ -94,7 +94,7 @@ public class JLabeledTextField extends JPanel implements JLabeledField, FocusLis
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(mTextField);
         return comps;
diff --git a/src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java b/src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
index 12a73ba..a88d72d 100644
--- a/src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
+++ b/src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
@@ -39,15 +39,15 @@ public class ObjectTableModel extends DefaultTableModel {
 
     private static final long serialVersionUID = 240L;
 
-    private transient ArrayList<Object> objects = new ArrayList<Object>();
+    private transient ArrayList<Object> objects = new ArrayList<>();
 
-    private transient List<String> headers = new ArrayList<String>();
+    private transient List<String> headers = new ArrayList<>();
 
-    private transient ArrayList<Class<?>> classes = new ArrayList<Class<?>>();
+    private transient ArrayList<Class<?>> classes = new ArrayList<>();
 
-    private transient ArrayList<Functor> readFunctors = new ArrayList<Functor>();
+    private transient ArrayList<Functor> readFunctors = new ArrayList<>();
 
-    private transient ArrayList<Functor> writeFunctors = new ArrayList<Functor>();
+    private transient ArrayList<Functor> writeFunctors = new ArrayList<>();
 
     private transient Class<?> objectClass = null; // if provided
     
@@ -98,8 +98,8 @@ public class ObjectTableModel extends DefaultTableModel {
     public ObjectTableModel(String[] headers, Functor[] readFunctors, Functor[] writeFunctors, Class<?>[] editorClasses) {
         this.headers.addAll(Arrays.asList(headers));
         this.classes.addAll(Arrays.asList(editorClasses));
-        this.readFunctors = new ArrayList<Functor>(Arrays.asList(readFunctors));
-        this.writeFunctors = new ArrayList<Functor>(Arrays.asList(writeFunctors));
+        this.readFunctors = new ArrayList<>(Arrays.asList(readFunctors));
+        this.writeFunctors = new ArrayList<>(Arrays.asList(writeFunctors));
 
         int numHeaders = headers.length;
 
@@ -121,11 +121,11 @@ public class ObjectTableModel extends DefaultTableModel {
     }
 
     private Object readResolve() {
-        objects = new ArrayList<Object>();
-        headers = new ArrayList<String>();
-        classes = new ArrayList<Class<?>>();
-        readFunctors = new ArrayList<Functor>();
-        writeFunctors = new ArrayList<Functor>();
+        objects = new ArrayList<>();
+        headers = new ArrayList<>();
+        classes = new ArrayList<>();
+        readFunctors = new ArrayList<>();
+        writeFunctors = new ArrayList<>();
         return this;
     }
 
@@ -202,7 +202,7 @@ public class ObjectTableModel extends DefaultTableModel {
     /** {@inheritDoc} */
     @Override
     public void moveRow(int start, int end, int to) {
-        List<Object> subList = new ArrayList<Object>(objects.subList(start, end));
+        List<Object> subList = new ArrayList<>(objects.subList(start, end));
         for (int x = end - 1; x >= start; x--) {
             objects.remove(x);
         }
diff --git a/src/jorphan/org/apache/jorphan/math/StatCalculator.java b/src/jorphan/org/apache/jorphan/math/StatCalculator.java
index 398959d..c591cfc 100644
--- a/src/jorphan/org/apache/jorphan/math/StatCalculator.java
+++ b/src/jorphan/org/apache/jorphan/math/StatCalculator.java
@@ -36,7 +36,7 @@ import org.apache.commons.lang3.mutable.MutableLong;
 public abstract class StatCalculator<T extends Number & Comparable<? super T>> {
 
     // key is the type to collect (usually long), value = count of entries
-    private final Map<T, MutableLong> valuesMap = new TreeMap<T, MutableLong>();
+    private final Map<T, MutableLong> valuesMap = new TreeMap<>();
     // We use a TreeMap because we need the entries to be sorted
 
     // Running values, updated for each sample
@@ -165,7 +165,7 @@ public abstract class StatCalculator<T extends Number & Comparable<? super T>> {
      * TODO - why is the key value also stored in the entry array? See Bug 53825
      */
     public Map<Number, Number[]> getDistribution() {
-        Map<Number, Number[]> items = new HashMap<Number, Number[]>();
+        Map<Number, Number[]> items = new HashMap<>();
 
         for (Entry<T, MutableLong> entry : valuesMap.entrySet()) {
             Number[] dis = new Number[2];
diff --git a/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java b/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
index 6e44398..007b026 100644
--- a/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
+++ b/src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
@@ -167,7 +167,7 @@ public final class ClassFinder {
 
     // For each directory in the search path, add all the jars found there
     private static String[] addJarsInPath(String[] paths) {
-        Set<String> fullList = new HashSet<String>();
+        Set<String> fullList = new HashSet<>();
         for (int i = 0; i < paths.length; i++) {
             final String path = paths[i];
             fullList.add(path); // Keep the unexpanded path
@@ -317,7 +317,7 @@ public final class ClassFinder {
 //            }
 //        }
 
-        return new ArrayList<String>(listClasses);//subClassList);
+        return new ArrayList<>(listClasses);//subClassList);
     }
 
     /*
@@ -335,7 +335,7 @@ public final class ClassFinder {
         }
 
         // find all jar files or paths that end with strPathOrJar
-        ArrayList<String> listPaths = new ArrayList<String>();
+        ArrayList<String> listPaths = new ArrayList<>();
         String strPath = null;
         while (stPaths.hasMoreTokens()) {
             strPath = fixPathEntry(stPaths.nextToken());
diff --git a/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java b/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
index 11c5630..bec7ba8 100644
--- a/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
+++ b/src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
@@ -92,7 +92,7 @@ public final class JOrphanUtils {
                 splittee = splittee.substring(0,splittee.length()-splitLength);
             }
         }
-        List<String> returns = new ArrayList<String>();
+        List<String> returns = new ArrayList<>();
         final int length = splittee.length(); // This is the new length
         int start = 0;
         spot = 0;
@@ -145,7 +145,7 @@ public final class JOrphanUtils {
     public static String[] split(String splittee, String delims, String def) {
         StringTokenizer tokens = new StringTokenizer(splittee,delims,def!=null);
         boolean lastWasDelim=false;
-        List<String> strList=new ArrayList<String>();
+        List<String> strList= new ArrayList<>();
         while (tokens.hasMoreTokens()) {
             String tok=tokens.nextToken();
             if (   tok.length()==1 // we have a single character; could be a token
diff --git a/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java b/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
index 938438c..2b1931e 100644
--- a/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
+++ b/src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
@@ -372,7 +372,7 @@ implements ChangeListener, ActionListener, ItemListener
     private String[] getMethodNames(Class<?> clazz)
     {
         Method[] meths = clazz.getMethods();
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         for (int idx=0; idx < meths.length; idx++){
             final Method method = meths[idx];
             final String name = method.getName();
diff --git a/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java b/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
index d422726..2e36f73 100644
--- a/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
+++ b/src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
@@ -57,8 +57,8 @@ public class MonitorAccumModel implements Clearable, Serializable {
      *
      */
     public MonitorAccumModel() {
-        serverListMap = new HashMap<String, List<MonitorModel>>();
-        listeners = new LinkedList<MonitorListener>();
+        serverListMap = new HashMap<>();
+        listeners = new LinkedList<>();
     }
 
     public int getBufferSize() {
diff --git a/src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java b/src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
index 860dcdc..e5b0169 100644
--- a/src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
+++ b/src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
@@ -38,7 +38,7 @@ import org.apache.jmeter.util.JMeterUtils;
 public class MonitorHealthPanel extends JPanel implements MonitorListener, Clearable {
     private static final long serialVersionUID = 240L;
 
-    private final Map<String, ServerPanel> serverPanelMap = new HashMap<String, ServerPanel>();
+    private final Map<String, ServerPanel> serverPanelMap = new HashMap<>();
 
     private JPanel servers = null;
 
diff --git a/src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java b/src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
index 5770b14..b45a71b 100644
--- a/src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
+++ b/src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
@@ -118,7 +118,7 @@ public class MonitorPerformancePanel extends JSplitPane implements TreeSelection
      */
     public MonitorPerformancePanel(MonitorAccumModel model, MonitorGraph graph) {
         super();
-        this.SERVERMAP = new HashMap<String, DefaultMutableTreeNode>();
+        this.SERVERMAP = new HashMap<>();
         this.MODEL = model;
         this.MODEL.addListener(this);
         this.GRAPH = graph;
diff --git a/src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java b/src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java
index 47122b2..c48c7ad 100644
--- a/src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java
+++ b/src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java
@@ -35,7 +35,7 @@ public class StatusImpl implements Status {
      */
     public StatusImpl() {
         super();
-        connectors = new LinkedList<Connector>();
+        connectors = new LinkedList<>();
     }
 
     /** {@inheritDoc} */
diff --git a/src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java b/src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
index eb2be1a..d35d6d0 100644
--- a/src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
+++ b/src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
@@ -31,7 +31,7 @@ public class WorkersImpl implements Workers {
      */
     public WorkersImpl() {
         super();
-        worker = new LinkedList<Worker>();
+        worker = new LinkedList<>();
     }
 
     @Override
diff --git a/src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java b/src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java
index 512fe78..e7f411a 100644
--- a/src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java
+++ b/src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java
@@ -71,7 +71,7 @@ public class MonitorHandler extends DefaultHandler {
     public void startDocument() throws SAXException {
         // this.startDoc = true;
         // Reset all work variables so reusing the instance starts afresh.
-        this.stacktree = new Stack<Object>();
+        this.stacktree = new Stack<>();
         this.status = null;
         this.jvm = null;
         this.memory = null;
diff --git a/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java b/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
index b5fd498..e676876 100644
--- a/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
+++ b/src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
@@ -58,7 +58,7 @@ public class FTPSampler extends AbstractSampler implements Interruptible {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.ftp.config.gui.FtpConfigGui",
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
index f074e51..7ca47cb 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
@@ -121,7 +121,7 @@ public class AuthManager extends ConfigTestElement implements TestStateListener,
      * Default Constructor.
      */
     public AuthManager() {
-        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));
     }
 
     /** {@inheritDoc} */
@@ -129,7 +129,7 @@ public class AuthManager extends ConfigTestElement implements TestStateListener,
     public void clear() {
         super.clear();
         kerberosManager.clearSubjects();
-        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));
     }
 
     /**
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
index d9d6686..d937cc5 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
@@ -316,7 +316,7 @@ public class CookieManager extends ConfigTestElement implements TestStateListene
      */
     private void clearCookies() {
         log.debug("Clear all cookies from store");
-        setProperty(new CollectionProperty(COOKIES, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(COOKIES, new ArrayList<>()));
     }
 
     /**
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
index 3cd31e9..a5a4d5f 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
@@ -100,7 +100,7 @@ public class DNSCacheManager extends ConfigTestElement implements TestIterationL
     public Object clone() {
         DNSCacheManager clone = (DNSCacheManager) super.clone();
         clone.systemDefaultDnsResolver = new SystemDefaultDnsResolver();
-        clone.cache = new LinkedHashMap<String, InetAddress[]>();
+        clone.cache = new LinkedHashMap<>();
         CollectionProperty dnsServers = getServers();
         try {
             String[] serverNames = new String[dnsServers.size()];
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
index 9e9db8e..dc0ca0b 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
@@ -166,7 +166,7 @@ public class HC4CookieHandler implements CookieHandler {
      */
     List<org.apache.http.cookie.Cookie> getCookiesForUrl(
             CollectionProperty cookiesCP, URL url, boolean allowVariableCookie) {
-        List<org.apache.http.cookie.Cookie> cookies = new ArrayList<org.apache.http.cookie.Cookie>();
+        List<org.apache.http.cookie.Cookie> cookies = new ArrayList<>();
 
         for (PropertyIterator iter = cookiesCP.iterator(); iter.hasNext();) {
             Cookie jmcookie = (Cookie) iter.next().getObjectValue();
@@ -187,7 +187,7 @@ public class HC4CookieHandler implements CookieHandler {
 
         CookieOrigin cookieOrigin = new CookieOrigin(host, port, path, secure);
 
-        List<org.apache.http.cookie.Cookie> cookiesValid = new ArrayList<org.apache.http.cookie.Cookie>();
+        List<org.apache.http.cookie.Cookie> cookiesValid = new ArrayList<>();
         for (org.apache.http.cookie.Cookie cookie : cookies) {
             if (cookieSpec.match(cookie, cookieOrigin)) {
                 cookiesValid.add(cookie);
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
index 153ee83..0bd6e23 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
@@ -63,14 +63,14 @@ public class HeaderManager extends ConfigTestElement implements Serializable {
     private Object SOAPHeader = null;
 
     public HeaderManager() {
-        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));
     }
 
     /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));
     }
 
     /**
@@ -217,7 +217,7 @@ public class HeaderManager extends ConfigTestElement implements Serializable {
      * @param name header name
      */
     public void removeHeaderNamed(String name) {
-        List<Integer> removeIndices = new ArrayList<Integer>();
+        List<Integer> removeIndices = new ArrayList<>();
         for (int i = getHeaders().size() - 1; i >= 0; i--) {
             Header header = (Header) getHeaders().get(i).getObjectValue();
             if (header == null) {
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
index 710c790..d945f79 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
@@ -104,7 +104,7 @@ public class HttpMirrorServer extends Thread implements Stoppable {
         ServerSocket mainSocket = null;
         ThreadPoolExecutor threadPoolExecutor = null;
         if(maxThreadPoolSize>0) {
-            final ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(
+            final ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<>(
                     maxQueueSize);
             threadPoolExecutor = new ThreadPoolExecutor(
                     maxThreadPoolSize/2, 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
index ed558a9..d67f606 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
@@ -111,7 +111,7 @@ public class HttpMirrorThread implements Runnable {
             final String[] requestParts = firstLine.split("\\s+");
             final String requestMethod = requestParts[0];
             final String requestPath = requestParts[1];
-            final HashMap<String, String> parameters = new HashMap<String, String>();
+            final HashMap<String, String> parameters = new HashMap<>();
             if (HTTPConstants.GET.equals(requestMethod)) {
                 int querypos = requestPath.indexOf('?');
                 if (querypos >= 0) {
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
index a68de8a..60762b7 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
@@ -51,8 +51,7 @@ public class KerberosManager implements Serializable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final String JAAS_APPLICATION = JMeterUtils.getPropDefault("kerberos_jaas_application", "JMeter"); //$NON-NLS-1$ $NON-NLS-2$
-    private final ConcurrentMap<String, Future<Subject>> subjects
-        = new ConcurrentHashMap<String, Future<Subject>>();
+    private final ConcurrentMap<String, Future<Subject>> subjects = new ConcurrentHashMap<>();
 
     public KerberosManager() {
     }
@@ -80,7 +79,7 @@ public class KerberosManager implements Serializable {
             }
         };
 
-        FutureTask<Subject> task = new FutureTask<Subject>(callable);
+        FutureTask<Subject> task = new FutureTask<>(callable);
         if(log.isDebugEnabled()) {
             log.debug("Subject cached:"+subjects.keySet() +" before:"+username);
         }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java b/src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
index 7b9a757..e5b8572 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
@@ -91,7 +91,7 @@ public class CookiePanel extends AbstractConfigGui implements ActionListener {
 
     private JComboBox<String> selectHandlerPanel;
 
-    private HashMap<String, String> handlerMap = new HashMap<String, String>();
+    private HashMap<String, String> handlerMap = new HashMap<>();
 
     private static final String[] COLUMN_RESOURCE_NAMES = {
         ("name"),   //$NON-NLS-1$
@@ -401,7 +401,7 @@ public class CookiePanel extends AbstractConfigGui implements ActionListener {
     private JComboBox<String> createComboHandler() {
         ComboBoxModel<String> nodesModel = new DefaultComboBoxModel<>();
         // drop-down list for renderer
-        selectHandlerPanel = new JComboBox<String>(nodesModel);
+        selectHandlerPanel = new JComboBox<>(nodesModel);
         selectHandlerPanel.setActionCommand(HANDLER_COMMAND);
         selectHandlerPanel.addActionListener(this);
 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
index 218568a..5748d0a 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
@@ -73,7 +73,7 @@ public class AnchorModifier extends AbstractTestElement implements PreProcessor,
             sampler = (HTTPSamplerBase) sam;
             result = (HTTPSampleResult) res;
         }
-        List<HTTPSamplerBase> potentialLinks = new ArrayList<HTTPSamplerBase>();
+        List<HTTPSamplerBase> potentialLinks = new ArrayList<>();
         String responseText = ""; // $NON-NLS-1$
         responseText = result.getResponseDataAsString();
         Document html;
@@ -117,7 +117,7 @@ public class AnchorModifier extends AbstractTestElement implements PreProcessor,
         if (log.isDebugEnabled()) {
             log.debug("Modifying argument: " + arg);
         }
-        List<Argument> possibleReplacements = new ArrayList<Argument>();
+        List<Argument> possibleReplacements = new ArrayList<>();
         PropertyIterator iter = args.iterator();
         Argument replacementArg;
         while (iter.hasNext()) {
@@ -148,7 +148,7 @@ public class AnchorModifier extends AbstractTestElement implements PreProcessor,
     private void addFormUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, 
             List<HTTPSamplerBase> potentialLinks) {
         NodeList rootList = html.getChildNodes();
-        List<HTTPSamplerBase> urls = new LinkedList<HTTPSamplerBase>();
+        List<HTTPSamplerBase> urls = new LinkedList<>();
         for (int x = 0; x < rootList.getLength(); x++) {
             urls.addAll(HtmlParsingUtils.createURLFromForm(rootList.item(x), result.getURL()));
         }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java
index 502d73d..daf8e97 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java
@@ -100,7 +100,7 @@ public class RegExUserParameters extends AbstractTestElement implements Serializ
             return null;
         }
         int n = Integer.parseInt(jmvars.get(regExRefName + MATCH_NR));
-        Map<String, String> map = new HashMap<String, String>(n);
+        Map<String, String> map = new HashMap<>(n);
         for(int i=1; i<=n; i++){
             map.put(jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grNames), 
                     jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grValues));
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLContentHandler.java b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLContentHandler.java
index b87fec1..4904544 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLContentHandler.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLContentHandler.java
@@ -41,13 +41,13 @@ public class UserParameterXMLContentHandler implements ContentHandler {
 
     // Note UserParameterXML accesses this variable
     // to obtain the Set data via method getParsedParameters()
-    private List<Map<String, String>> userThreads = new LinkedList<Map<String, String>>();
+    private List<Map<String, String>> userThreads = new LinkedList<>();
 
     private String paramname = "";
 
     private String paramvalue = "";
 
-    private Map<String, String> nameValuePair = new HashMap<String, String>();
+    private Map<String, String> nameValuePair = new HashMap<>();
 
     /** Buffer for collecting data from the "characters" SAX event. */
     private CharArrayWriter contents = new CharArrayWriter();
@@ -94,7 +94,7 @@ public class UserParameterXMLContentHandler implements ContentHandler {
         // must create a new object,
         // or else end up with a set full of the same Map object
         if (qName.equals("thread")) {
-            nameValuePair = new HashMap<String, String>();
+            nameValuePair = new HashMap<>();
         }
 
     }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
index 25eb1a8..43751c5 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
@@ -89,7 +89,7 @@ public class UserSequence implements Serializable {
             log.debug("UserSequence.getNextuserMods(): current parameters will be " + "changed to: " + user);
         } else {
             // no entries in all users, therefore create an empty Map object
-            user = new HashMap<String, String>();
+            user = new HashMap<>();
         }
 
         return user;
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java b/src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
index e79252a..8468f41 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
@@ -70,7 +70,7 @@ public abstract class HTMLParser {
     private   static final float IE_10                = 10.0f;
 
     // Cache of parsers - parsers must be re-usable
-    private static final Map<String, HTMLParser> parsers = new ConcurrentHashMap<String, HTMLParser>(4);
+    private static final Map<String, HTMLParser> parsers = new ConcurrentHashMap<>(4);
 
     public static final String PARSER_CLASSNAME = "htmlParser.className"; // $NON-NLS-1$
 
@@ -147,7 +147,7 @@ public abstract class HTMLParser {
         // them roughly in order, which should be a better model of browser
         // behaviour.
 
-        Collection<URLString> col = new LinkedHashSet<URLString>();
+        Collection<URLString> col = new LinkedHashSet<>();
         return getEmbeddedResourceURLs(userAgent, html, baseUrl, new URLCollection(col),encoding);
 
         // An additional note on using HashSets to store URLs: I just
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java b/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
index bf55eb4..429cb9b 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
@@ -283,7 +283,7 @@ public final class HtmlParsingUtils {
 
     public static List<HTTPSamplerBase> createURLFromForm(Node doc, URL context) {
         String selectName = null;
-        LinkedList<HTTPSamplerBase> urlConfigs = new LinkedList<HTTPSamplerBase>();
+        LinkedList<HTTPSamplerBase> urlConfigs = new LinkedList<>();
         recurseForm(doc, urlConfigs, context, selectName, false);
         /*
          * NamedNodeMap atts = formNode.getAttributes();
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java b/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
index 97cbd09..7bb2b2d 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
@@ -65,7 +65,7 @@ public class LagartoBasedHtmlParser extends HTMLParser {
         private URLCollection urls;
         private URLPointer baseUrl;
         private Float ieVersion;
-        private Stack<Boolean> enabled = new Stack<Boolean>();
+        private Stack<Boolean> enabled = new Stack<>();
 
         /**
          * @param baseUrl base url to add possibly missing information to urls found in <code>urls</code>
@@ -208,7 +208,7 @@ public class LagartoBasedHtmlParser extends HTMLParser {
             String contents = new String(html,encoding); 
             // As per Jodd javadocs, emitStrings should be false for visitor for better performances
             LagartoParser lagartoParser = new LagartoParser(contents, false);
-            LagartoParserConfig<LagartoParserConfig<?>> config = new LagartoParserConfig<LagartoParserConfig<?>>();
+            LagartoParserConfig<LagartoParserConfig<?>> config = new LagartoParserConfig<>();
             config.setCaseSensitive(false);
             // Conditional comments only apply for IE < 10
             config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
index e31f8a7..8b37850 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
@@ -44,7 +44,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
                                    ".binary"); // $NON-NLS-1$
 
     /** Which content-types will be treated as binary (exact match) */
-    private static final Set<String> binaryContentTypes = new HashSet<String>();
+    private static final Set<String> binaryContentTypes = new HashSet<>();
 
     /** Where to store the temporary binary files */
     private static final String binaryDirectory =
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
index 07be5d3..4bee8d8 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
@@ -79,7 +79,7 @@ public class HttpRequestHdr {
 
     private byte[] rawPostData;
 
-    private final Map<String, Header> headers = new HashMap<String, Header>();
+    private final Map<String, Header> headers = new HashMap<>();
 
     private final String httpSamplerName;
 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
index ce43ec8..bd8a902 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
@@ -87,7 +87,7 @@ public class Proxy extends Thread {
         JMeterUtils.getPropDefault("proxy.ssl.protocol", "TLS"); // $NON-NLS-1$ $NON-NLS-2$
 
     // HashMap to save ssl connection between Jmeter proxy and browser
-    private static final HashMap<String, SSLSocketFactory> HOST2SSL_SOCK_FAC = new HashMap<String, SSLSocketFactory>();
+    private static final HashMap<String, SSLSocketFactory> HOST2SSL_SOCK_FAC = new HashMap<>();
 
     private static final SamplerCreatorFactory SAMPLERFACTORY = new SamplerCreatorFactory();
 
@@ -281,7 +281,7 @@ public class Proxy extends Thread {
             }
             if(result != null) // deliverSampler allows sampler to be null, but result must not be null
             {
-                List<TestElement> children = new ArrayList<TestElement>();
+                List<TestElement> children = new ArrayList<>();
                 if(captureHttpHeaders) {
                     children.add(headers);
                 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
index 1d57240..02f687d 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
@@ -364,11 +364,11 @@ public class ProxyControl extends GenericController {
     }
 
     public void setIncludeList(Collection<String> list) {
-        setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet<String>(list)));
+        setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet<>(list)));
     }
 
     public void setExcludeList(Collection<String> list) {
-        setProperty(new CollectionProperty(EXCLUDE_LIST, new HashSet<String>(list)));
+        setProperty(new CollectionProperty(EXCLUDE_LIST, new HashSet<>(list)));
     }
 
     /**
@@ -1039,7 +1039,7 @@ public class ProxyControl extends GenericController {
     // TODO - could be converted to generic class?
     private Collection<?> findApplicableElements(JMeterTreeNode myTarget, Class<? extends TestElement> myClass, boolean ascending) {
         JMeterTreeModel treeModel = GuiPackage.getInstance().getTreeModel();
-        LinkedList<TestElement> elements = new LinkedList<TestElement>();
+        LinkedList<TestElement> elements = new LinkedList<>();
 
         // Look for elements directly within the HTTP proxy:
         Enumeration<?> kids = treeModel.getNodeOf(this).children();
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
index bea80de..b55257e 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
@@ -37,7 +37,7 @@ public class SamplerCreatorFactory {
 
     private static final SamplerCreator DEFAULT_SAMPLER_CREATOR = new DefaultSamplerCreator();
 
-    private final Map<String, SamplerCreator> samplerCreatorMap = new HashMap<String, SamplerCreator>();
+    private final Map<String, SamplerCreator> samplerCreatorMap = new HashMap<>();
 
     /**
      * 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
index aec85c4..4e0b15d 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
@@ -288,7 +288,7 @@ public class ProxyControlGui extends LogicControllerGui implements JMeterGUIComp
 
     private List<String> getDataList(PowerTableModel p_model, String colName) {
         String[] dataArray = p_model.getData().getColumn(colName);
-        List<String> list = new LinkedList<String>();
+        List<String> list = new LinkedList<>();
         for (int i = 0; i < dataArray.length; i++) {
             list.add(dataArray[i]);
         }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
index fa2f478..30221cf 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
@@ -103,7 +103,7 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
         new ThreadLocal<Map<HostConfiguration, HttpClient>>(){
         @Override
         protected Map<HostConfiguration, HttpClient> initialValue() {
-            return new HashMap<HostConfiguration, HttpClient>();
+            return new HashMap<>();
         }
     };
 
@@ -750,7 +750,7 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
 
             final boolean browserCompatible = getDoBrowserCompatibleMultipart();
             // We don't know how many entries will be skipped
-            ArrayList<PartBase> partlist = new ArrayList<PartBase>();
+            ArrayList<PartBase> partlist = new ArrayList<>();
             // Create the parts
             // Add any parameters
             PropertyIterator args = getArguments().iterator();
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
index 5cc19bc..e18bdc1 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
@@ -187,7 +187,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
         new ThreadLocal<Map<HttpClientKey, HttpClient>>(){
         @Override
         protected Map<HttpClientKey, HttpClient> initialValue() {
-            return new HashMap<HttpClientKey, HttpClient>();
+            return new HashMap<>();
         }
     };
 
@@ -1136,7 +1136,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
                     }
                     // Add the parameters
                     PropertyIterator args = getArguments().iterator();
-                    List <NameValuePair> nvps = new ArrayList <NameValuePair>();
+                    List <NameValuePair> nvps = new ArrayList<>();
                     String urlContentEncoding = contentEncoding;
                     if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
                         // Use the default encoding for urls
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
index ee3c3aa..77db52a 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
@@ -61,9 +61,9 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
 
     protected static final String localHost;
 
-    protected static final Set<String> nonProxyHostFull = new HashSet<String>();
+    protected static final Set<String> nonProxyHostFull = new HashSet<>();
 
-    protected static final List<String> nonProxyHostSuffix = new ArrayList<String>();
+    protected static final List<String> nonProxyHostSuffix = new ArrayList<>();
 
     protected static final int nonProxyHostSuffixSize;
 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
index ed1e277..39f3bdf 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
@@ -100,7 +100,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui",
@@ -298,7 +298,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
 
 
     // Derive the mapping of content types to parsers
-    private static final Map<String, String> parsersForType = new HashMap<String, String>();
+    private static final Map<String, String> parsersForType = new HashMap<>();
     // Not synch, but it is not modified after creation
 
     private static final String RESPONSE_PARSERS= // list of parsers
@@ -1232,7 +1232,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
             }
             
             // For concurrent get resources
-            final List<Callable<AsynSamplerResultHolder>> liste = new ArrayList<Callable<AsynSamplerResultHolder>>();
+            final List<Callable<AsynSamplerResultHolder>> liste = new ArrayList<>();
 
             while (urls.hasNext()) {
                 Object binURL = urls.next(); // See catch clause below
@@ -1963,7 +1963,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
      *
      */
     private static class CleanerThread extends Thread {
-        private final List<HTTPSamplerBase> samplersToNotify = new ArrayList<HTTPSamplerBase>();
+        private final List<HTTPSamplerBase> samplersToNotify = new ArrayList<>();
         /**
          * @param runnable Runnable
          */
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
index d3bdee8..89ab2a1 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
@@ -31,8 +31,8 @@ import org.apache.jmeter.protocol.http.util.HTTPConstants;
  * @since 2.12
  */
 public final class HttpWebdav extends HttpEntityEnclosingRequestBase {
-    private static final Set<String> WEBDAV_METHODS = 
-            new HashSet<String>(Arrays.asList(new String[] {
+    private static final Set<String> WEBDAV_METHODS =
+            new HashSet<>(Arrays.asList(new String[]{
                     HTTPConstants.PROPFIND,
                     HTTPConstants.PROPPATCH,
                     HTTPConstants.MKCOL,
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
index ff28156..baf0fcc 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
@@ -533,7 +533,7 @@ public class WebServiceSampler extends HTTPSamplerBase  {
             Hashtable<String,String> reqHeaders = null;
             if(headerManager != null) {
                 int size = headerManager.getHeaders().size();
-                reqHeaders = new Hashtable<String, String>(size);
+                reqHeaders = new Hashtable<>(size);
                 for (int i = 0; i < size; i++) {
                     Header header = headerManager.get(i);
                     reqHeaders.put(header.getName(), header.getValue());
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
index 7bd2c7a..bdd0e92 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
@@ -220,7 +220,7 @@ public class ConversionUtils {
         final boolean endsWithSlash = currentPath.endsWith(SLASH);
 
         StringTokenizer st = new StringTokenizer(currentPath, SLASH);
-        List<String> tokens = new ArrayList<String>();
+        List<String> tokens = new ArrayList<>();
         while (st.hasMoreTokens())
         {
             tokens.add(st.nextToken());
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java
index 556fd03..c5fce41 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java
@@ -252,7 +252,7 @@ public class HTTPArgument extends Argument implements Serializable {
      * @param args collection of {@link Argument} and/or {@link HTTPArgument} entries
      */
     public static void convertArgumentsToHTTP(Arguments args) {
-        List<Argument> newArguments = new LinkedList<Argument>();
+        List<Argument> newArguments = new LinkedList<>();
         PropertyIterator iter = args.getArguments().iterator();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
index 70fa491..4a8b344 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
@@ -78,7 +78,7 @@ public class WSDLHelper {
 
     private Object[] SOAPOPS = null;
 
-    private final Map<String, String> ACTIONS = new HashMap<String, String>();
+    private final Map<String, String> ACTIONS = new HashMap<>();
 
     private final AuthManager AUTH;
 
@@ -320,7 +320,7 @@ public class WSDLHelper {
      * @return Node[]
      */
     public Object[] getSOAPBindings() {
-        ArrayList<Element> list = new ArrayList<Element>();
+        ArrayList<Element> list = new ArrayList<>();
         NodeList bindings = WSDLDOC.getElementsByTagNameNS(WSDL_NAMESPACE,"binding");
         for (int idx = 0; idx < bindings.getLength(); idx++) {
             Element nd = (Element) bindings.item(idx);
@@ -357,7 +357,7 @@ public class WSDLHelper {
      */
     public Object[] getOperations() {
         Object[] res = this.getSOAPBindings();
-        ArrayList<Element> ops = new ArrayList<Element>();
+        ArrayList<Element> ops = new ArrayList<>();
         // first we iterate through the bindings
         for (int idx = 0; idx < res.length; idx++) {
             Element one = (Element) res[idx];
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
index 2886de8..f7a3899 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
@@ -97,9 +97,9 @@ public class LogFilter implements Filter, Serializable {
 
     protected boolean PTRNFILTER = false;
 
-    protected ArrayList<Pattern> EXCPATTERNS = new ArrayList<Pattern>();
+    protected ArrayList<Pattern> EXCPATTERNS = new ArrayList<>();
 
-    protected ArrayList<Pattern> INCPATTERNS = new ArrayList<Pattern>();
+    protected ArrayList<Pattern> INCPATTERNS = new ArrayList<>();
 
     protected String NEWFILE = null;
 
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
index 0e325b8..654a327 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
@@ -89,7 +89,7 @@ public class SessionFilter implements Filter, Serializable, TestCloneable,Thread
     public Object clone() {
         if(cookieManagers == null)
         {
-            cookieManagers = new ConcurrentHashMap<String, CookieManager>();
+            cookieManagers = new ConcurrentHashMap<>();
         }
         if(managersInUse == null)
         {
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
index 30712fb..9d7b487 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
@@ -551,7 +551,7 @@ public class TCLogParser implements LogParser {
      * @return List of name/value pairs
      */
     protected List<String> parseParameters(String parameters) {
-        List<String> parsedParams = new ArrayList<String>();
+        List<String> parsedParams = new ArrayList<>();
         StringTokenizer paramtokens = this.tokenize(parameters, "&");
         while (paramtokens.hasMoreElements()) {
             parsedParams.add(paramtokens.nextToken());
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java b/src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
index 43fcb03..621f58d 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
@@ -229,7 +229,7 @@ public class RequestViewHTTP implements RequestView {
     //TODO: move to utils class (JMeterUtils?)
     public static Map<String, String> getQueryMap(String query) {
 
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         if (query.trim().startsWith("<?")) { // $NON-NLS-1$
             // SOAP request (generally)
             map.put(" ", query); //blank name // $NON-NLS-1$
diff --git a/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java b/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
index c20ef49..6889efe 100644
--- a/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
+++ b/src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
@@ -124,7 +124,7 @@ public class JavaConfigGui extends AbstractConfigGui implements ActionListener {
      * @return a panel containing the relevant components
      */
     private JPanel createClassnamePanel() {
-        List<String> possibleClasses = new ArrayList<String>();
+        List<String> possibleClasses = new ArrayList<>();
 
         try {
             // Find all the classes which implement the JavaSamplerClient
@@ -245,7 +245,7 @@ public class JavaConfigGui extends AbstractConfigGui implements ActionListener {
      */
     private static final boolean checkContainsClassName(ComboBoxModel<String> model, String className) {
         int size = model.getSize();
-        Set<String> set = new HashSet<String>(size);
+        Set<String> set = new HashSet<>(size);
         for (int i = 0; i < size; i++) {
             set.add(model.getElementAt(i));
         }
diff --git a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
index f5e46f8..97369b1 100644
--- a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
+++ b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
@@ -46,7 +46,7 @@ import org.apache.log.Logger;
  */
 public class BSFSampler extends BSFTestElement implements Sampler, TestBean, ConfigMergabilityIndicator {
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
diff --git a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
index e390f2c..de25e25 100644
--- a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
+++ b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
@@ -41,7 +41,7 @@ import org.apache.log.Logger;
  */
 public class BeanShellSampler extends BeanShellTestElement implements Sampler, Interruptible, ConfigMergabilityIndicator
 {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
     
diff --git a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
index afed372..145369f 100644
--- a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
+++ b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
@@ -39,7 +39,7 @@ import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 public class JSR223Sampler extends JSR223TestElement implements Cloneable, Sampler, TestBean, ConfigMergabilityIndicator {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
diff --git a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
index b03e272..e0322f9 100644
--- a/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
+++ b/src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
@@ -48,7 +48,7 @@ public class JavaSampler extends AbstractSampler implements TestStateListener {
 
     private static final long serialVersionUID = 232L; // Remember to change this when the class changes ...
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.protocol.java.config.gui.JavaConfigGui",
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
diff --git a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
index ea0d63a..afbe3b4 100644
--- a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
+++ b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
@@ -81,7 +81,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
     static {
         // based on e291. Getting the Name of a JDBC Type from javaalmanac.com
         // http://javaalmanac.com/egs/java.sql/JdbcInt2Str.html
-        mapJdbcNameToInt = new HashMap<String, Integer>();
+        mapJdbcNameToInt = new HashMap<>();
 
         //Get all fields in java.sql.Types and store the corresponding int values
         Field[] fields = java.sql.Types.class.getFields();
@@ -130,7 +130,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
      *  At one time a Connection is only held by one thread
      */
     private static final Map<Connection, Map<String, PreparedStatement>> perConnCache =
-            new ConcurrentHashMap<Connection, Map<String, PreparedStatement>>();
+            new ConcurrentHashMap<>();
 
     /**
      * Creates a JDBCSampler.
@@ -240,7 +240,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
             }
         } while (result || (updateCount != -1));
         if (out!=null && pstmt instanceof CallableStatement){
-            ArrayList<Object> outputValues = new ArrayList<Object>();
+            ArrayList<Object> outputValues = new ArrayList<>();
             CallableStatement cs = (CallableStatement) pstmt;
             sb.append("Output variables by position:\n");
             for(int i=0; i < out.length; i++){
@@ -435,7 +435,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
         String resultVariable = getResultVariable().trim();
         List<Map<String, Object> > results = null;
         if(resultVariable.length() > 0) {
-            results = new ArrayList<Map<String,Object> >();
+            results = new ArrayList<>();
             jmvars.putObject(resultVariable, results);
         }
         int j = 0;
@@ -446,7 +446,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
                 Object o = rs.getObject(i);
                 if(results != null) {
                     if(row == null) {
-                        row = new HashMap<String, Object>(numColumns);
+                        row = new HashMap<>(numColumns);
                         results.add(row);
                     }
                     row.put(meta.getColumnLabel(i), o);
diff --git a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
index dfeb7f6..fbba09d 100644
--- a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
+++ b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
@@ -245,7 +245,7 @@ public class DataSourceElement extends AbstractTestElement
         new ThreadLocal<Map<String, ResourceLimitingJdbcDataSource>>(){
         @Override
         protected Map<String, ResourceLimitingJdbcDataSource> initialValue() {
-            return new HashMap<String, ResourceLimitingJdbcDataSource>();
+            return new HashMap<>();
         }
     };
 
diff --git a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
index 4b343b4..bd916fd 100644
--- a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
+++ b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
@@ -35,7 +35,7 @@ import org.apache.log.Logger;
 
 public class DataSourceElementBeanInfo extends BeanInfoSupport {
     private static final Logger log = LoggingManager.getLoggerForClass();
-    private static Map<String,Integer> TRANSACTION_ISOLATION_MAP = new HashMap<String, Integer>(5);
+    private static Map<String,Integer> TRANSACTION_ISOLATION_MAP = new HashMap<>(5);
     static {
         // Will use default isolation
         TRANSACTION_ISOLATION_MAP.put("DEFAULT", Integer.valueOf(-1));
diff --git a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
index 55217df..7731408 100644
--- a/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
+++ b/src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
@@ -42,7 +42,7 @@ import org.apache.log.Logger;
  *
  */
 public class JDBCSampler extends AbstractJDBCTestElement implements Sampler, TestBean, ConfigMergabilityIndicator {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
     
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
index d425f31..399ea93 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
@@ -35,10 +35,10 @@ import java.util.concurrent.ConcurrentHashMap;
 public class ClientPool {
 
     //GuardedBy("this")
-    private static final ArrayList<Closeable> clients = new ArrayList<Closeable>();
+    private static final ArrayList<Closeable> clients = new ArrayList<>();
 
     //GuardedBy("this")
-    private static final Map<Object, Object> client_map = new ConcurrentHashMap<Object, Object>();
+    private static final Map<Object, Object> client_map = new ConcurrentHashMap<>();
 
     /**
      * Add a ReceiveClient to the ClientPool. This is so that we can make sure
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
index 4ea1f67..8747865 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
@@ -34,7 +34,7 @@ import org.apache.log.Logger;
  */
 public class InitialContextFactory {
 
-    private static final ConcurrentHashMap<String, Context> MAP = new ConcurrentHashMap<String, Context>();
+    private static final ConcurrentHashMap<String, Context> MAP = new ConcurrentHashMap<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
index aa06460..9b17cad 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
@@ -239,9 +239,9 @@ public class ReceiveSubscriber implements Closeable, MessageListener {
             subscriber = createSubscriber(session, dest, durableSubscriptionId, jmsSelector);
             if(useMessageListener) {
                 if (queueSize <=0) {
-                    queue = new LinkedBlockingQueue<Message>();
+                    queue = new LinkedBlockingQueue<>();
                 } else {
-                    queue = new LinkedBlockingQueue<Message>(queueSize);            
+                    queue = new LinkedBlockingQueue<>(queueSize);
                 }
                 subscriber.setMessageListener(this);
             } else {
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
index 11ebe35..5ae8c09 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
@@ -85,7 +85,7 @@ public class JMSProperties extends AbstractTestElement implements Serializable {
      */
     public Map<String, Object> getJmsPropertysAsMap() {
         PropertyIterator iter = getProperties().iterator();
-        Map<String, Object> argMap = new LinkedHashMap<String, Object>();
+        Map<String, Object> argMap = new LinkedHashMap<>();
         while (iter.hasNext()) {
             JMSProperty arg = (JMSProperty) iter.next().getObjectValue();
             // Because CollectionProperty.mergeIn will not prevent adding two
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
index f0a3859..4ce0aea 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
@@ -396,7 +396,7 @@ public class JMSSampler extends AbstractSampler implements ThreadListener {
     }
 
     private Context getInitialContext() throws NamingException {
-        Hashtable<String, String> table = new Hashtable<String, String>();
+        Hashtable<String, String> table = new Hashtable<>();
 
         if (getInitialContextFactory() != null && getInitialContextFactory().trim().length() > 0) {
             if (LOGGER.isDebugEnabled()) {
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
index a8dcf93..39c4739 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
@@ -34,7 +34,7 @@ import org.apache.log.Logger;
 public class MessageAdmin {
     private static final MessageAdmin SINGLETON = new MessageAdmin();
 
-    private final Map<String, PlaceHolder> table = new ConcurrentHashMap<String, PlaceHolder>();
+    private final Map<String, PlaceHolder> table = new ConcurrentHashMap<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
diff --git a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
index 08b985a..a2353a0 100644
--- a/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
+++ b/src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
@@ -214,7 +214,7 @@ public class PublisherSampler extends BaseJMSSampler implements TestStateListene
     }
 
     private Map<String, Object> getMapContent() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-        Map<String,Object> m = new HashMap<String,Object>();
+        Map<String,Object> m = new HashMap<>();
         String text = getMessageContent();
         String[] lines = text.split("\n");
         for (String line : lines){
diff --git a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
index 80c4ef2..2e1015b 100644
--- a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
+++ b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
@@ -48,7 +48,7 @@ public class LDAPArguments extends ConfigTestElement implements Serializable {
      * Create a new Arguments object with no arguments.
      */
     public LDAPArguments() {
-        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));
     }
 
     /**
@@ -66,7 +66,7 @@ public class LDAPArguments extends ConfigTestElement implements Serializable {
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));
     }
 
     /**
@@ -87,7 +87,7 @@ public class LDAPArguments extends ConfigTestElement implements Serializable {
      */
     public Map<String, String> getArgumentsAsMap() {
         PropertyIterator iter = getArguments().iterator();
-        Map<String, String> argMap = new HashMap<String, String>();
+        Map<String, String> argMap = new HashMap<>();
         while (iter.hasNext()) {
             LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
             argMap.put(arg.getName(), arg.getValue());
diff --git a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
index 9b654cc..1382f8b 100644
--- a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
+++ b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
@@ -70,7 +70,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestStateListener
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui",
                     "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui",
@@ -152,7 +152,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestStateListener
 
 
     private static final ConcurrentHashMap<String, DirContext> ldapContexts =
-        new ConcurrentHashMap<String, DirContext>();
+            new ConcurrentHashMap<>();
 
     private static final int MAX_SORTED_RESULTS =
         JMeterUtils.getPropDefault("ldapsampler.max_sorted_results", 1000); // $NON-NLS-1$
@@ -881,7 +881,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestStateListener
             throws NamingException
     {
 
-        final ArrayList<SearchResult>     sortedResults = new ArrayList<SearchResult>(MAX_SORTED_RESULTS);
+        final ArrayList<SearchResult>     sortedResults = new ArrayList<>(MAX_SORTED_RESULTS);
         final String        searchBase = getPropertyAsString(SEARCHBASE);
         final String        rootDn = getRootdn();
 
@@ -918,7 +918,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestStateListener
     {
         final Attributes    attrs = sr.getAttributes();
         final int           size = attrs.size();
-        final ArrayList<Attribute>     sortedAttrs = new ArrayList<Attribute>(size);
+        final ArrayList<Attribute>     sortedAttrs = new ArrayList<>(size);
 
         xmlb.openTag("searchresult"); // $NON-NLS-1$
         xmlb.tag("dn", sr.getName()); // $NON-NLS-1$
@@ -941,7 +941,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestStateListener
                 if (attr.size() == 1) {
                     sb.append(getWriteValue(attr.get()));
                 } else {
-                    final ArrayList<String>     sortedVals = new ArrayList<String>(attr.size());
+                    final ArrayList<String>     sortedVals = new ArrayList<>(attr.size());
                     boolean             first = true;
 
                     for (NamingEnumeration<?> ven = attr.getAll(); ven.hasMore(); )
diff --git a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
index fb57a8f..42ae156 100644
--- a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
+++ b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
@@ -53,7 +53,7 @@ public class LDAPSampler extends AbstractSampler {
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui",
diff --git a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
index 55b71fc..e4c2143 100644
--- a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
+++ b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
@@ -69,7 +69,7 @@ public class LdapClient {
      */
     public void connect(String host, String port, String rootdn, String username, String password)
             throws NamingException {
-        Hashtable<String, String> env = new Hashtable<String, String>();
+        Hashtable<String, String> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); //$NON-NLS-1$
         env.put(Context.PROVIDER_URL, "ldap://" + host + ":" + port + "/" + rootdn); //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
         env.put(Context.REFERRAL, "throw"); //$NON-NLS-1$
diff --git a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
index bc24780..a76ad1c 100644
--- a/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
+++ b/src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
@@ -84,7 +84,7 @@ public class LdapExtClient {
     public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, boolean secure)
             throws NamingException {
         DirContext dirContext;
-        Hashtable<String, String> env = new Hashtable<String, String>();
+        Hashtable<String, String> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); // $NON-NLS-1$
         StringBuilder sb = new StringBuilder(80);
         if (secure) {
diff --git a/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java b/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
index bff7fa2..efb30ee 100644
--- a/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
+++ b/src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
@@ -65,7 +65,7 @@ public class MailReaderSampler extends AbstractSampler implements Interruptible
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
diff --git a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
index 52d1f52..17feb3c 100644
--- a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
+++ b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
@@ -64,7 +64,7 @@ public class SmtpSampler extends AbstractSampler {
 
     private static final long serialVersionUID = 1L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -377,7 +377,7 @@ public class SmtpSampler extends AbstractSampler {
      */
     private List<InternetAddress> getPropNameAsAddresses(String propValue) throws AddressException{
         if (propValue.length() > 0){ // we have at least one potential address
-            List<InternetAddress> addresses = new ArrayList<InternetAddress>();
+            List<InternetAddress> addresses = new ArrayList<>();
             for (String address : propValue.split(";")){
                 addresses.add(new InternetAddress(address.trim()));
             }
diff --git a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
index 112b221..a783a37 100644
--- a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
+++ b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
@@ -106,8 +106,8 @@ public class SmtpPanel extends JPanel {
     private JButton addHeaderFieldButton;
     private JLabel headerFieldName;
     private JLabel headerFieldValue;
-    private Map<JTextField, JTextField> headerFields = new HashMap<JTextField, JTextField>();
-    private Map<JButton,JTextField> removeButtons = new HashMap<JButton, JTextField>();
+    private Map<JTextField, JTextField> headerFields = new HashMap<>();
+    private Map<JButton,JTextField> removeButtons = new HashMap<>();
     private int headerGridY = 0;
 
     private SecuritySettingsPanel securitySettingsPanel;
diff --git a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
index 8994707..94e4f07 100644
--- a/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
+++ b/src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
@@ -110,7 +110,7 @@ public class SendMailCommand {
      */
     public SendMailCommand() {
         headerFields = new CollectionProperty();
-        attachments = new ArrayList<File>();
+        attachments = new ArrayList<>();
     }
 
     /**
diff --git a/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoUtils.java b/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoUtils.java
index 61de075..65003fd 100644
--- a/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoUtils.java
+++ b/src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoUtils.java
@@ -37,7 +37,7 @@ public class MongoUtils {
 
     public static List<ServerAddress> toServerAddresses(String connections) throws UnknownHostException {
 
-        List<ServerAddress> addresses = new ArrayList<ServerAddress>();
+        List<ServerAddress> addresses = new ArrayList<>();
         for(String connection : Arrays.asList(connections.split(","))) {
             int port = DEFAULT_PORT;
             String[] hostPort = connection.split(":");
diff --git a/src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java b/src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
index e2aa64d..26d7e67 100644
--- a/src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
+++ b/src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
@@ -80,7 +80,7 @@ public class SystemSampler extends AbstractSampler {
      */
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -112,7 +112,7 @@ public class SystemSampler extends AbstractSampler {
         Arguments environment = getEnvironmentVariables();
         boolean checkReturnCode = getCheckReturnCode();
         int expectedReturnCode = getExpectedReturnCode();
-        List<String> cmds = new ArrayList<String>(args.getArgumentCount()+1);
+        List<String> cmds = new ArrayList<>(args.getArgumentCount() + 1);
         StringBuilder cmdLine = new StringBuilder((null == command) ? "" : command);
         cmds.add(command);
         for (int i=0;i<args.getArgumentCount();i++) {
@@ -122,7 +122,7 @@ public class SystemSampler extends AbstractSampler {
             cmdLine.append(cmds.get(i+1));
         }
 
-        Map<String,String> env = new HashMap<String, String>();
+        Map<String,String> env = new HashMap<>();
         for (int i=0;i<environment.getArgumentCount();i++) {
             Argument arg = environment.getArgument(i);
             env.put(arg.getName(), arg.getPropertyAsString(Argument.VALUE));
diff --git a/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java b/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
index 987bb9e..3326a81 100644
--- a/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
+++ b/src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
@@ -58,7 +58,7 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui",
@@ -143,7 +143,7 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
         new ThreadLocal<Map<String, Object>>() {
         @Override
         protected Map<String, Object> initialValue() {
-            return new HashMap<String, Object>();
+            return new HashMap<>();
         }
     };
 
-- 
2.1.4

