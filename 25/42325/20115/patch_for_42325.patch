Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java	(working copy)
@@ -46,7 +46,7 @@
 	}
 
 	public String getLabelResource() {
-		return "once_only_controller_title";
+		return "once_only_controller_title"; // $NON-NLS-1$
 	}
 
 	private void init() {
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java	(working copy)
@@ -49,15 +49,15 @@
 
 	private boolean isPerThread = true;
 
-	private String BYNUMBER_LABEL = JMeterUtils.getResString("throughput_control_bynumber_label");
+	private String BYNUMBER_LABEL = JMeterUtils.getResString("throughput_control_bynumber_label"); // $NON-NLS-1$
 
-	private String BYPERCENT_LABEL = JMeterUtils.getResString("throughput_control_bypercent_label");
+	private String BYPERCENT_LABEL = JMeterUtils.getResString("throughput_control_bypercent_label"); // $NON-NLS-1$
 
-	private String THROUGHPUT_LABEL = JMeterUtils.getResString("throughput_control_tplabel");
+	private String THROUGHPUT_LABEL = JMeterUtils.getResString("throughput_control_tplabel"); // $NON-NLS-1$
 
-	private String THROUGHPUT = "Througput Field";
+	private String THROUGHPUT = "Througput Field"; // $NON-NLS-1$
 
-	private String PERTHREAD_LABEL = JMeterUtils.getResString("throughput_control_perthread_label");
+	private String PERTHREAD_LABEL = JMeterUtils.getResString("throughput_control_perthread_label"); // $NON-NLS-1$
 
 	public ThroughputControllerGui() {
 		init();
@@ -93,6 +93,17 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+
+        styleBox.setSelectedIndex(0);
+        throughput.setText("1"); // $NON-NLS-1$
+        perthread.setSelected(true);
+    }
+
 	public void configure(TestElement el) {
 		super.configure(el);
 		if (((ThroughputController) el).getStyle() == ThroughputController.BYNUMBER) {
@@ -138,7 +149,7 @@
 		throughput = new JTextField(5);
 		tpPanel.add(throughput);
 		throughput.setName(THROUGHPUT);
-		throughput.setText("1");
+		throughput.setText("1"); // $NON-NLS-1$
 		// throughput.addActionListener(this);
 		tpPanel.add(throughput);
 		add(tpPanel);
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java	(working copy)
@@ -64,8 +64,17 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        style.setSelected(false);
+    }
+    
 	public String getLabelResource() {
-		return "interleave_control_title";
+		return "interleave_control_title"; // $NON-NLS-1$
 	}
 
 	private void init() {
@@ -74,7 +83,7 @@
 
 		add(makeTitlePanel());
 
-		style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers"));
+		style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers")); // $NON-NLS-1$
 		add(style);
 	}
 }
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/RandomControlGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/RandomControlGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/RandomControlGui.java	(working copy)
@@ -56,6 +56,15 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        style.setSelected(false);
+    }
+
 	public void configure(TestElement el) {
 		super.configure(el);
 		if (((RandomController) el).getStyle() == InterleaveControl.IGNORE_SUB_CONTROLLERS) {
@@ -66,7 +75,7 @@
 	}
 
 	public String getLabelResource() {
-		return "random_control_title";
+		return "random_control_title"; // $NON-NLS-1$
 	}
 
 	private void init() {
@@ -74,7 +83,7 @@
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 
-		style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers"));
+		style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers")); // $NON-NLS-1$
 		add(style);
 	}
 }
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ForeachControlPanel.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ForeachControlPanel.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ForeachControlPanel.java	(working copy)
@@ -64,10 +64,10 @@
 	private boolean displayName = true;
 
 	/** The name of the infinite checkbox component. */
-	private static final String INPUTVAL = "Input Field";
+	private static final String INPUTVAL = "Input Field"; // $NON-NLS-1$
 
 	/** The name of the loops field component. */
-	private static final String RETURNVAL = "Return Field";
+	private static final String RETURNVAL = "Return Field"; // $NON-NLS-1$
 
 	/**
 	 * Create a new LoopControlPanel as a standalone component.
@@ -121,19 +121,31 @@
 			if (inputVal.getText().length() > 0) {
 				((ForeachController) lc).setInputVal(inputVal.getText());
 			} else {
-				((ForeachController) lc).setInputVal("");
+				((ForeachController) lc).setInputVal(""); // $NON-NLS-1$
 			}
 			if (returnVal.getText().length() > 0) {
 				((ForeachController) lc).setReturnVal(returnVal.getText());
 			} else {
-				((ForeachController) lc).setReturnVal("");
+				((ForeachController) lc).setReturnVal(""); // $NON-NLS-1$
 			}
 			((ForeachController) lc).setUseSeparator(useSeparator.isSelected());
 		}
 	}
+    
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        inputVal.setText(""); // $NON-NLS-1$
+        returnVal.setText(""); // $NON-NLS-1$
+        useSeparator.setSelected(true);
+    }
+    
 
 	public String getLabelResource() {
-		return "foreach_controller_title";
+		return "foreach_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
@@ -173,12 +185,12 @@
 		VerticalPanel loopPanel = new VerticalPanel();
 
 		// LOOP LABEL
-		JLabel inputValLabel = new JLabel(JMeterUtils.getResString("foreach_input"));
-		JLabel returnValLabel = new JLabel(JMeterUtils.getResString("foreach_output"));
+		JLabel inputValLabel = new JLabel(JMeterUtils.getResString("foreach_input")); // $NON-NLS-1$
+		JLabel returnValLabel = new JLabel(JMeterUtils.getResString("foreach_output")); // $NON-NLS-1$
 
 		// TEXT FIELD
 		JPanel inputValSubPanel = new JPanel(new BorderLayout(5, 0));
-		inputVal = new JTextField("", 5);
+		inputVal = new JTextField("", 5); // $NON-NLS-1$
 		inputVal.setName(INPUTVAL);
 		inputValLabel.setLabelFor(inputVal);
 		inputValSubPanel.add(inputValLabel, BorderLayout.WEST);
@@ -186,14 +198,14 @@
 
 		// TEXT FIELD
 		JPanel returnValSubPanel = new JPanel(new BorderLayout(5, 0));
-		returnVal = new JTextField("", 5);
+		returnVal = new JTextField("", 5); // $NON-NLS-1$
 		returnVal.setName(RETURNVAL);
 		returnValLabel.setLabelFor(returnVal);
 		returnValSubPanel.add(returnValLabel, BorderLayout.WEST);
 		returnValSubPanel.add(returnVal, BorderLayout.CENTER);
 
 		// Checkbox
-		useSeparator = new JCheckBox(JMeterUtils.getResString("foreach_use_separator"), true);
+		useSeparator = new JCheckBox(JMeterUtils.getResString("foreach_use_separator"), true); // $NON-NLS-1$
 
 		loopPanel.add(inputValSubPanel);
 		loopPanel.add(returnValSubPanel);
@@ -201,5 +213,4 @@
 
 		return loopPanel;
 	}
-
 }
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/SwitchControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/SwitchControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/SwitchControllerGui.java	(working copy)
@@ -32,7 +32,7 @@
  * @version $Revision$ on $Date$
  */
 public class SwitchControllerGui extends AbstractControllerGui {
-	private static final String SWITCH_LABEL = "switch_controller_label";
+	private static final String SWITCH_LABEL = "switch_controller_label"; // $NON-NLS-1$
 
 	private JTextField switchValue;
 
@@ -56,13 +56,22 @@
 		((SwitchController) ic).setSelection(switchValue.getText());
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        switchValue.setText(""); // $NON-NLS-1$
+    }
+
 	public void configure(TestElement el) {
 		super.configure(el);
 		switchValue.setText(((SwitchController) el).getSelection());
 	}
 
 	public String getLabelResource() {
-		return "switch_controller_title";
+		return "switch_controller_title"; // $NON-NLS-1$
 	}
 
 	private void init() {
@@ -78,11 +87,10 @@
 	private JPanel createSwitchPanel() {
 		JPanel switchPanel = new JPanel(new BorderLayout(5, 0));
 		JLabel selectionLabel = new JLabel(JMeterUtils.getResString(SWITCH_LABEL));
-		switchValue = new JTextField("");
+		switchValue = new JTextField(""); // $NON-NLS-1$
 		selectionLabel.setLabelFor(switchValue);
 		switchPanel.add(selectionLabel, BorderLayout.WEST);
 		switchPanel.add(switchValue, BorderLayout.CENTER);
 		return switchPanel;
 	}
-
 }
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java	(working copy)
@@ -60,11 +60,6 @@
 
 	private JLabel warningLabel;
 
-	public static final String CONTROLLER = "Module To Run";
-
-	// TODO should be a resource, and probably ought to be resolved at run-time
-	// (to allow language change)
-
 	/**
 	 * Initializes the gui panel for the ModuleController instance.
 	 */
@@ -73,7 +68,7 @@
 	}
 
 	public String getLabelResource() {
-		return "module_controller_title";
+		return "module_controller_title"; // $NON-NLS-1$
 	}
 
 	/*
@@ -86,10 +81,10 @@
 		ModuleController controller = (ModuleController) el;
 		this.selected = controller.getSelectedNode();
 		if (selected == null && controller.getNodePath() != null)
-			warningLabel.setText(JMeterUtils.getResString("module_controller_warning")
+			warningLabel.setText(JMeterUtils.getResString("module_controller_warning") // $NON-NLS-1$
 					+ renderPath(controller.getNodePath()));
 		else
-			warningLabel.setText("");
+			warningLabel.setText(""); // $NON-NLS-1$
 		reinitialize();
 	}
 
@@ -105,7 +100,7 @@
 			}
 			buf.append(iter.next());
 			if (iter.hasNext())
-				buf.append(" > ");
+				buf.append(" > "); // $NON-NLS-1$
 		}
 		return buf.toString();
 	}
@@ -143,7 +138,7 @@
 	public JPopupMenu createPopupMenu() {
 		JPopupMenu menu = new JPopupMenu();
 		JMenu addMenu = MenuFactory.makeMenus(new String[] { MenuFactory.CONFIG_ELEMENTS, MenuFactory.ASSERTIONS,
-				MenuFactory.TIMERS, MenuFactory.LISTENERS, }, JMeterUtils.getResString("Add"), "Add");
+				MenuFactory.TIMERS, MenuFactory.LISTENERS, }, JMeterUtils.getResString("Add"), "Add"); // $NON-NLS-1$
 		menu.add(addMenu);
 		MenuFactory.addEditMenu(menu, true);
 		MenuFactory.addFileMenu(menu);
@@ -157,12 +152,14 @@
 
 		// DROP-DOWN MENU
 		JPanel modulesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 5));
-		modulesPanel.add(new JLabel(CONTROLLER));
+		JLabel nodesLabel = new JLabel(JMeterUtils.getResString("module_controller_module_to_run")); // $NON-NLS-1$
+		modulesPanel.add(nodesLabel);
 		nodesModel = new DefaultComboBoxModel();
 		nodes = new JComboBox(nodesModel);
+        nodesLabel.setLabelFor(nodes);
 		reinitialize();
 		modulesPanel.add(nodes);
-		warningLabel = new JLabel("");
+		warningLabel = new JLabel(""); // $NON-NLS-1$
 		modulesPanel.add(warningLabel);
 		add(modulesPanel);
 	}
@@ -174,7 +171,7 @@
 		JMeterTreeNode root;
 		if (gp != null) {
 			root = (JMeterTreeNode) GuiPackage.getInstance().getTreeModel().getRoot();
-			buildNodesModel(root, "", 0);
+			buildNodesModel(root, "", 0); // $NON-NLS-1$
 		}
 		if (selected != null) {
 			for (int i = 0; i < nodesModel.getSize(); i++) {
@@ -190,9 +187,9 @@
 
 	private void buildNodesModel(JMeterTreeNode node, String parent_name, int level) {
 		if (level == 0 && (parent_name == null || parent_name.length() == 0)) {
-			nodesModel.addElement(new TreeNodeWrapper(null, ""));
+			nodesModel.addElement(new TreeNodeWrapper(null, "")); // $NON-NLS-1$
 		}
-		String seperator = " > ";
+		String seperator = " > "; // $NON-NLS-1$
 		if (node != null) {
 			for (int i = 0; i < node.getChildCount(); i++) {
 				StringBuffer name = new StringBuffer();
@@ -226,7 +223,7 @@
 		int multi = 4;
 		StringBuffer spaces = new StringBuffer(level * multi);
 		for (int i = 0; i < level * multi; i++) {
-			spaces.append(" ");
+			spaces.append(" "); // $NON-NLS-1$
 		}
 		return spaces.toString();
 	}
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/resources/messages.properties
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/resources/messages.properties	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/resources/messages.properties	(working copy)
@@ -444,6 +444,7 @@
 modtest=Modification test
 module_controller_title=Module Controller
 module_controller_warning=Could not find module: 
+module_controller_module_to_run=Module To Run 
 monitor_equation_active=Active:  (busy/max) > 25%
 monitor_equation_dead=Dead:  no response
 monitor_equation_healthy=Healthy:  (busy/max) < 25%
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/TransactionControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/TransactionControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/components/org/apache/jmeter/control/gui/TransactionControllerGui.java	(working copy)
@@ -50,7 +50,7 @@
 	}
 
 	public String getLabelResource() {
-		return "transaction_controller_title";
+		return "transaction_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/WhileControllerGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/WhileControllerGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/WhileControllerGui.java	(working copy)
@@ -34,7 +34,7 @@
 
 public class WhileControllerGui extends AbstractControllerGui implements ActionListener {
 
-	private static final String CONDITION_LABEL = "while_controller_label";
+	private static final String CONDITION_LABEL = "while_controller_label"; // $NON-NLS-1$
 
 	/**
 	 * A field allowing the user to specify the condition (not yet used).
@@ -42,7 +42,7 @@
 	private JTextField theCondition;
 
 	/** The name of the condition field component. */
-	private static final String CONDITION = "While_Condition";
+	private static final String CONDITION = "While_Condition"; // $NON-NLS-1$
 
 	/**
 	 * Create a new LoopControlPanel as a standalone component.
@@ -91,6 +91,15 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        theCondition.setText(""); // $NON-NLS-1$
+    }
+
 	/**
 	 * Invoked when an action occurs. This implementation assumes that the
 	 * target component is the infinite loops checkbox.
@@ -103,7 +112,7 @@
 	}
 
 	public String getLabelResource() {
-		return "while_controller_title";
+		return "while_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
@@ -133,8 +142,8 @@
 		conditionPanel.add(conditionLabel, BorderLayout.WEST);
 
 		// TEXT FIELD
-		theCondition = new JTextField(""); // This means exit if last sample
-											// failed
+		// This means exit if last sample failed
+		theCondition = new JTextField("");  // $NON-NLS-1$
 		theCondition.setName(CONDITION);
 		conditionLabel.setLabelFor(theCondition);
 		conditionPanel.add(theCondition, BorderLayout.CENTER);
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/IfControllerPanel.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/IfControllerPanel.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/IfControllerPanel.java	(working copy)
@@ -43,7 +43,7 @@
 
 public class IfControllerPanel extends AbstractControllerGui implements ActionListener {
 
-	private static final String CONDITION_LABEL = "if_controller_label";
+	private static final String CONDITION_LABEL = "if_controller_label"; // $NON-NLS-1$
 
 	/**
 	 * A field allowing the user to specify the number of times the controller
@@ -59,7 +59,7 @@
 	private boolean displayName = true;
 
 	/** The name of the loops field component. */
-	private static final String CONDITION = "JS_Condition";
+	private static final String CONDITION = "JS_Condition"; // $NON-NLS-1$
 
 	/**
 	 * Create a new LoopControlPanel as a standalone component.
@@ -118,10 +118,19 @@
 			if (theCondition.getText().length() > 0) {
 				((IfController) controller).setCondition(theCondition.getText());
 			} else {
-				((IfController) controller).setCondition("");
+				((IfController) controller).setCondition(""); // $NON-NLS-1$
 			}
 		}
 	}
+    
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        theCondition.setText(""); // $NON-NLS-1$
+    }
 
 	/**
 	 * Invoked when an action occurs. This implementation assumes that the
@@ -135,7 +144,7 @@
 	}
 
 	public String getLabelResource() {
-		return "if_controller_title";
+		return "if_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
@@ -172,7 +181,7 @@
 		conditionPanel.add(conditionLabel, BorderLayout.WEST);
 
 		// TEXT FIELD
-		theCondition = new JTextField("");
+		theCondition = new JTextField(""); // $NON-NLS-1$
 		theCondition.setName(CONDITION);
 		conditionLabel.setLabelFor(theCondition);
 		conditionPanel.add(theCondition, BorderLayout.CENTER);
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/RunTimeGui.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/RunTimeGui.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/RunTimeGui.java	(working copy)
@@ -113,6 +113,15 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        seconds.setText("1"); // $NON-NLS-1$
+    }
+
 	/**
 	 * Invoked when an action occurs. This implementation assumes that the
 	 * target component is the infinite seconds checkbox.
@@ -125,7 +134,7 @@
 	}
 
 	public String getLabelResource() {
-		return "runtime_controller_title";
+		return "runtime_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
@@ -164,13 +173,13 @@
 		JPanel loopPanel = new JPanel(new BorderLayout(5, 0));
 
 		// SECONDS LABEL
-		JLabel secondsLabel = new JLabel(JMeterUtils.getResString("runtime_seconds"));
+		JLabel secondsLabel = new JLabel(JMeterUtils.getResString("runtime_seconds")); // $NON-NLS-1$
 		loopPanel.add(secondsLabel, BorderLayout.WEST);
 
 		JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));
 
 		// TEXT FIELD
-		seconds = new JTextField("60", 5);
+		seconds = new JTextField("1", 5); // $NON-NLS-1$
 		secondsLabel.setLabelFor(seconds);
 		loopSubPanel.add(seconds, BorderLayout.CENTER);
 
@@ -207,6 +216,6 @@
 	 */
 	private void setState(long secsCount) {
 		seconds.setEnabled(true);
-		seconds.setText("" + secsCount);
+		seconds.setText("" + secsCount); // $NON-NLS-1$
 	}
 }
Index: C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/LoopControlPanel.java
===================================================================
--- C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/LoopControlPanel.java	(revision 534327)
+++ C:/Documents and Settings/alf.hogemark/workspace/Jmeter 2.2 official/src/core/org/apache/jmeter/control/gui/LoopControlPanel.java	(working copy)
@@ -62,10 +62,10 @@
 	private boolean displayName = true;
 
 	/** The name of the infinite checkbox component. */
-	private static final String INFINITE = "Infinite Field";
+	private static final String INFINITE = "Infinite Field"; // $NON-NLS-1$
 
 	/** The name of the loops field component. */
-	private static final String LOOPS = "Loops Field";
+	private static final String LOOPS = "Loops Field"; // $NON-NLS-1$
 
 	/**
 	 * Create a new LoopControlPanel as a standalone component.
@@ -127,6 +127,16 @@
 		}
 	}
 
+    /**
+     * Implements JMeterGUIComponent.clear
+     */
+    public void clear() {
+        super.clear();
+        
+        loops.setText("1"); // $NON-NLS-1$
+        infinite.setSelected(false);
+    }
+
 	/**
 	 * Invoked when an action occurs. This implementation assumes that the
 	 * target component is the infinite loops checkbox.
@@ -136,7 +146,7 @@
 	 */
 	public void actionPerformed(ActionEvent event) {
 		if (infinite.isSelected()) {
-			loops.setText("");
+			loops.setText(""); // $NON-NLS-1$
 			loops.setEnabled(false);
 		} else {
 			loops.setEnabled(true);
@@ -145,7 +155,7 @@
 	}
 
 	public String getLabelResource() {
-		return "loop_controller_title";
+		return "loop_controller_title"; // $NON-NLS-1$
 	}
 
 	/**
@@ -184,19 +194,19 @@
 		JPanel loopPanel = new JPanel(new BorderLayout(5, 0));
 
 		// LOOP LABEL
-		JLabel loopsLabel = new JLabel(JMeterUtils.getResString("iterator_num"));
+		JLabel loopsLabel = new JLabel(JMeterUtils.getResString("iterator_num")); // $NON-NLS-1$
 		loopPanel.add(loopsLabel, BorderLayout.WEST);
 
 		JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));
 
 		// TEXT FIELD
-		loops = new JTextField("1", 5);
+		loops = new JTextField("1", 5); // $NON-NLS-1$
 		loops.setName(LOOPS);
 		loopsLabel.setLabelFor(loops);
 		loopSubPanel.add(loops, BorderLayout.CENTER);
 
 		// FOREVER CHECKBOX
-		infinite = new JCheckBox(JMeterUtils.getResString("infinite"));
+		infinite = new JCheckBox(JMeterUtils.getResString("infinite")); // $NON-NLS-1$
 		infinite.setActionCommand(INFINITE);
 		infinite.addActionListener(this);
 		loopSubPanel.add(infinite, BorderLayout.WEST);
@@ -220,7 +230,7 @@
 	 *            the String representation of the number of loops
 	 */
 	private void setState(String loopCount) {
-		if (loopCount.startsWith("-")) {
+		if (loopCount.startsWith("-")) { // $NON-NLS-1$
 			setState(-1);
 		} else {
 			loops.setText(loopCount);
@@ -241,11 +251,11 @@
 		if (loopCount <= -1) {
 			infinite.setSelected(true);
 			loops.setEnabled(false);
-			loops.setText("");
+			loops.setText(""); // $NON-NLS-1$
 		} else {
 			infinite.setSelected(false);
 			loops.setEnabled(true);
-			loops.setText("" + loopCount);
+			loops.setText("" + loopCount); // $NON-NLS-1$
 		}
 	}
 }
