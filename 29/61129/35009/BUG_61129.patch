Index: src/components/Test.java
===================================================================
--- src/components/Test.java	(revision 0)
+++ src/components/Test.java	(revision 0)
@@ -0,0 +1,4 @@
+
+public class Test {
+
+}
Index: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
===================================================================
--- src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java	(revision 1793023)
+++ src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java	(working copy)
@@ -78,11 +78,21 @@
      */
     @Override
     protected String getKeyFromSample(Sample sample) {
+        return getErrorKey(sample);
+    }
+
+    /**
+     * @param sample {@link Sample}
+     * @return Error key for sample 
+     */
+    static String getErrorKey(Sample sample) {
         String responseCode = sample.getResponseCode();
         String responseMessage = sample.getResponseMessage();
         String key = responseCode + (!StringUtils.isEmpty(responseMessage) ? 
                  "/" + StringEscapeUtils.escapeJson(responseMessage) : "");
-        if (isSuccessCode(responseCode)) {
+        if (isSuccessCode(responseCode) || 
+                (StringUtils.isEmpty(responseCode) && 
+                        !StringUtils.isEmpty(sample.getFailureMessage()))) {
             key = ASSERTION_FAILED;
             if (ASSERTION_RESULTS_FAILURE_MESSAGE) {
                 String msg = sample.getFailureMessage();
@@ -93,7 +103,6 @@
         }
         return key;
     }
-
     /*
      * (non-Javadoc)
      * 
Index: src/core/org/apache/jmeter/report/processor/Top5ErrorsBySamplerConsumer.java
===================================================================
--- src/core/org/apache/jmeter/report/processor/Top5ErrorsBySamplerConsumer.java	(revision 1793023)
+++ src/core/org/apache/jmeter/report/processor/Top5ErrorsBySamplerConsumer.java	(working copy)
@@ -17,8 +17,6 @@
  */
 package org.apache.jmeter.report.processor;
 
-import org.apache.commons.lang3.StringEscapeUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.util.JMeterUtils;
 
@@ -57,28 +55,11 @@
         }
         
         if(!sample.getSuccess()) {
-            data.registerError(getError(sample));
+            data.registerError(ErrorsSummaryConsumer.getErrorKey(sample));
             data.incErrors();
         }
         data.incTotal();
     }
-    
-    private String getError(Sample sample) {
-        String responseCode = sample.getResponseCode();
-        String responseMessage = sample.getResponseMessage();
-        String key = responseCode + (!StringUtils.isEmpty(responseMessage) ? 
-                 "/" + StringEscapeUtils.escapeJson(responseMessage) : "");
-        if (ErrorsSummaryConsumer.isSuccessCode(responseCode)) {
-            key = ErrorsSummaryConsumer.ASSERTION_FAILED;
-            if (ErrorsSummaryConsumer.ASSERTION_RESULTS_FAILURE_MESSAGE) {
-                String msg = sample.getFailureMessage();
-                if (!StringUtils.isEmpty(msg)) {
-                    key = StringEscapeUtils.escapeJson(msg);
-                }
-            }
-        }
-        return key;
-    }
 
     /*
      * (non-Javadoc)
Index: test/src/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java
===================================================================
--- test/src/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java	(revision 1793023)
+++ test/src/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java	(working copy)
@@ -26,6 +26,24 @@
 public class ErrorsSummaryConsumerTest {
 
     @Test
+    public void testGetErrorKey() {
+        SampleMetadata metadata = new SampleMetadata(',', new String[] { CSVSaveService.SUCCESSFUL,
+                CSVSaveService.RESPONSE_CODE, CSVSaveService.RESPONSE_MESSAGE, CSVSaveService.FAILURE_MESSAGE });
+        Sample sample = new Sample(0, metadata, new String[] { "false", "", "", "FailureMessage" });
+        Assert.assertEquals("FailureMessage", ErrorsSummaryConsumer.getErrorKey(sample));
+
+        sample = new Sample(0, metadata, new String[] { "false", "200", "", "FailureMessage" });
+        Assert.assertEquals("FailureMessage", ErrorsSummaryConsumer.getErrorKey(sample));
+        
+        sample = new Sample(0, metadata, new String[] { "true", "200", "", "" });
+        Assert.assertEquals(ErrorsSummaryConsumer.ASSERTION_FAILED, ErrorsSummaryConsumer.getErrorKey(sample));
+
+        sample = new Sample(0, metadata, new String[] { "false", "500", "Server Error", "FailureMessage" });
+        Assert.assertEquals("500/Server Error", ErrorsSummaryConsumer.getErrorKey(sample));
+    }
+    
+    
+    @Test
     public void testErrorSampleCounter() {
         ErrorsSummaryConsumer consumer = new ErrorsSummaryConsumer();
         Sample sample = createSample(false);
