Index: src/core/org/apache/jmeter/threads/JMeterVariables.java
===================================================================
--- src/core/org/apache/jmeter/threads/JMeterVariables.java	(revision 1177675)
+++ src/core/org/apache/jmeter/threads/JMeterVariables.java	(working copy)
@@ -19,7 +19,6 @@
 package org.apache.jmeter.threads;
 
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
@@ -27,12 +26,14 @@
 
 import org.apache.jmeter.util.JMeterUtils;
 
+import EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap;
+
 /**
  * Class which defines JMeter variables.
  * These are similar to properties, but they are local to a single thread.
  */
 public class JMeterVariables {
-    private final Map<String, Object> variables = new HashMap<String, Object>();
+    private final Map<String, Object> variables = new ConcurrentReaderHashMap();
 
     private int iteration = 0;
 
Index: build.properties
===================================================================
--- build.properties	(revision 1177675)
+++ build.properties	(working copy)
@@ -91,6 +91,11 @@
 commons-net.loc             = ${maven2.repo}/commons-net/commons-net/3.0.1
 commons-net.md5             = 920c3efc7f8d4d887936ddc3fc9a8316
 
+concurrent.jar             = concurrent-1.3.4.jar
+concurrent.loc             = ${maven2.repo}/concurrent/concurrent/1.3.4
+concurrent.md5             = f29b9d930d3426ebc56919eba10fbd4d
+
+
 excalibur-datasource.jar    = excalibur-datasource-1.1.1.jar
 excalibur-datasource.loc    = ${maven2.repo}/excalibur-datasource/excalibur-datasource/1.1.1
 excalibur-datasource.md5    = 59A9EDFF1005D70DFA638CF3A4D3AD6D
Index: eclipse.classpath
===================================================================
--- eclipse.classpath	(revision 1177675)
+++ eclipse.classpath	(working copy)
@@ -53,6 +53,7 @@
 	<classpathentry kind="lib" path="lib/commons-lang-2.6.jar"/>
 	<classpathentry kind="lib" path="lib/commons-logging-1.1.1.jar"/>
 	<classpathentry kind="lib" path="lib/commons-net-3.0.1.jar"/>
+	<classpathentry kind="lib" path="lib/concurrent-1.3.4.jar"/>
 	<classpathentry kind="lib" path="lib/excalibur-datasource-1.1.1.jar"/>
 	<classpathentry kind="lib" path="lib/excalibur-instrument-1.0.jar"/>
 	<classpathentry kind="lib" path="lib/excalibur-logger-1.1.jar"/>
Index: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java	(revision 1177675)
+++ src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java	(working copy)
@@ -30,6 +30,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.cookie.CookieSpec;
@@ -101,6 +102,8 @@
 
     public static final String DEFAULT_POLICY = CookiePolicy.BROWSER_COMPATIBILITY;
 
+    private final ReentrantLock COOKIE_MANAGER_UPDATE_LOCK = new ReentrantLock();
+
     public CookieManager() {
         clearCookies(); // Ensure that there is always a collection available
     }
@@ -153,6 +156,7 @@
         writer.println("# JMeter generated Cookie file");// $NON-NLS-1$
         PropertyIterator cookies = getCookies().iterator();
         long now = System.currentTimeMillis();
+        // No need for sync as not called during test plan
         while (cookies.hasNext()) {
             Cookie cook = (Cookie) cookies.next().getObjectValue();
             final long expiresMillis = cook.getExpiresMillis();
@@ -183,6 +187,7 @@
         // N.B. this must agree with the save() and cookieToString() methods
         String line;
         try {
+            // No need for sync as not called during load test
             final CollectionProperty cookies = getCookies();
             while ((line = reader.readLine()) != null) {
                 try {
@@ -265,11 +270,16 @@
             if (log.isDebugEnabled()) {
                 log.debug("Add cookie to store " + c.toString());
             }
-            getCookies().addItem(c);
+            try {
+                COOKIE_MANAGER_UPDATE_LOCK.lock();
+                getCookies().addItem(c);
+            } finally {
+                COOKIE_MANAGER_UPDATE_LOCK.unlock();
+            }
             if (SAVE_COOKIES)  {
                 JMeterContext context = getThreadContext();
                 if (context.isSamplingStarted()) {
-                    context.getVariables().put(COOKIE_NAME_PREFIX+cn, cv);
+                        context.getVariables().put(COOKIE_NAME_PREFIX+cn, cv);                        
                 }
             }
         }
@@ -332,20 +342,26 @@
      *
      */
     public org.apache.commons.httpclient.Cookie[] getCookiesForUrl(URL url){
-        CollectionProperty jar=getCookies();
-        org.apache.commons.httpclient.Cookie cookies[]=
-            new org.apache.commons.httpclient.Cookie[jar.size()];
-        int i=0;
-        for (PropertyIterator iter = getCookies().iterator(); iter.hasNext();) {
-            Cookie jmcookie = (Cookie) iter.next().getObjectValue();
-            // Set to running version, to allow function evaluation for the cookie values (bug 28715)
-            if (ALLOW_VARIABLE_COOKIES) {
-                jmcookie.setRunningVersion(true);
-            }
-            cookies[i++] = makeCookie(jmcookie);
-            if (ALLOW_VARIABLE_COOKIES) {
-                jmcookie.setRunningVersion(false);
+        org.apache.commons.httpclient.Cookie[] cookies= null;
+        try {
+            COOKIE_MANAGER_UPDATE_LOCK.lock();
+            CollectionProperty jar=getCookies();
+            cookies =
+                new org.apache.commons.httpclient.Cookie[jar.size()];
+            int i=0;
+            for (PropertyIterator iter = getCookies().iterator(); iter.hasNext();) {
+                Cookie jmcookie = (Cookie) iter.next().getObjectValue();
+                // Set to running version, to allow function evaluation for the cookie values (bug 28715)
+                if (ALLOW_VARIABLE_COOKIES) {
+                    jmcookie.setRunningVersion(true);
+                }
+                cookies[i++] = makeCookie(jmcookie);
+                if (ALLOW_VARIABLE_COOKIES) {
+                    jmcookie.setRunningVersion(false);
+                }
             }
+        } finally {
+            COOKIE_MANAGER_UPDATE_LOCK.unlock();
         }
         String host = url.getHost();
         String protocol = url.getProtocol();
@@ -461,19 +477,24 @@
 
     private void removeMatchingCookies(Cookie newCookie){
         // Scan for any matching cookies
-        PropertyIterator iter = getCookies().iterator();
-        while (iter.hasNext()) {
-            Cookie cookie = (Cookie) iter.next().getObjectValue();
-            if (cookie == null) {// TODO is this possible?
-                continue;
-            }
-            if (match(cookie,newCookie)) {
-                if (log.isDebugEnabled()) {
-                    log.debug("New Cookie = " + newCookie.toString()
-                              + " removing matching Cookie " + cookie.toString());
+        try {
+            COOKIE_MANAGER_UPDATE_LOCK.lock();
+            PropertyIterator iter = getCookies().iterator();
+            while (iter.hasNext()) {
+                Cookie cookie = (Cookie) iter.next().getObjectValue();
+                if (cookie == null) {// TODO is this possible?
+                    continue;
                 }
-                iter.remove();
-            }
+                if (match(cookie,newCookie)) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("New Cookie = " + newCookie.toString()
+                                  + " removing matching Cookie " + cookie.toString());
+                    }
+                    iter.remove();
+                }
+            }   
+        } finally {
+            COOKIE_MANAGER_UPDATE_LOCK.unlock();
         }
     }
 
Index: build.xml
===================================================================
--- build.xml	(revision 1177675)
+++ build.xml	(working copy)
@@ -333,6 +333,7 @@
     <include name="${lib.dir}/${commons-lang.jar}"/>
     <include name="${lib.dir}/${commons-logging.jar}"/>
     <include name="${lib.dir}/${commons-net.jar}"/>
+    <include name="${lib.dir}/${concurrent.jar}"/>
     <include name="${lib.dir}/${excalibur-datasource.jar}"/>
     <include name="${lib.dir}/${excalibur-instrument.jar}"/>
     <include name="${lib.dir}/${excalibur-logger.jar}"/>
@@ -393,6 +394,7 @@
     <pathelement location="${lib.dir}/${commons-lang.jar}"/>
     <pathelement location="${lib.dir}/${commons-logging.jar}"/>
     <pathelement location="${lib.dir}/${commons-net.jar}"/>
+    <pathelement location="${lib.dir}/${concurrent.jar}"/>
     <pathelement location="${lib.dir}/${excalibur-datasource.jar}"/>
     <pathelement location="${lib.dir}/${excalibur-instrument.jar}"/>
     <pathelement location="${lib.dir}/${excalibur-logger.jar}"/>
@@ -2173,6 +2175,7 @@
         <process_jarfile jarname="commons-lang"/>
         <process_jarfile jarname="commons-logging"/>
         <process_jarfile jarname="commons-net"/>
+        <process_jarfile jarname="concurrent"/>
         <process_jarfile jarname="excalibur-datasource"/>
         <process_jarfile jarname="excalibur-instrument"/>
         <process_jarfile jarname="excalibur-logger"/>
