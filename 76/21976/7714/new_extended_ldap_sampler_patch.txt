Index: core/org/apache/jmeter/resources/messages.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages.properties,v
retrieving revision 1.49
diff -u -r1.49 messages.properties
--- core/org/apache/jmeter/resources/messages.properties	23 Jun 2003 20:28:43 -0000	1.49
+++ core/org/apache/jmeter/resources/messages.properties	9 Aug 2003 11:34:30 -0000
@@ -367,6 +367,38 @@
 test_configuration=Test Configuration
 test=Test
 ldap_testing_title= LDAP Request
+serverName=Servername :
+addtest=Add Test
+modtest=Modify Test
+deltest=Delete Test
+searchtest=Search Test
+ldapext_sample_title=LDAPExt Request Defaults (ALPHA)
+ddn=DN
+searchfilter=Search Filter
+searchbase=Search base
+entrydn=Entry DN
+testConfiguration=Test Configuration
+testt=Test
+bind=Thread Bind
+sbind=Single bind/unbind
+unbind=Thread Unbind
+compare=Compare
+comparefilt=Compare filter
+userpw=Password
+userdn=Username
+rename=Rename entry
+newdn=New distinghuised name
+modddn=Old entry name
+attribute=Attribute
+opcode=opCode
+scope=Scope
+countlim=Size limit
+timelim=Time limit
+attrs=Attributes
+retobj=Return object
+deref=Dereference aliases
+ldapext_testing_title= LDAPExt Request (ALPHA)
+ldap_testing_title= LDAP Request
 webservice_sampler_title=WebService(SOAP) Request (Alpha Code)
 soap_action=Soap Action
 get_xml_from_file=File with SOAP XML Data (overrides above text)
Index: core/org/apache/jmeter/resources/messages_de.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_de.properties,v
retrieving revision 1.40
diff -u -r1.40 messages_de.properties
--- core/org/apache/jmeter/resources/messages_de.properties	23 Jun 2003 14:09:11 -0000	1.40
+++ core/org/apache/jmeter/resources/messages_de.properties	9 Aug 2003 11:34:31 -0000
@@ -352,7 +352,39 @@
 search_base=Search base
 entry_dn=Entry DN
 test_configuration=Test Configuration
-test =Test
+test=Test
+ldap_testing_title= LDAP Request
+serverName=Servername :
+addtest=Add Test
+modtest=Modify Test
+deltest=Delete Test
+searchtest=Search Test
+ldapext_sample_title=LDAPExt Request Defaults (ALPHA)
+ddn=DN
+searchfilter=Search Filter
+searchbase=Search base
+entrydn=Entry DN
+testConfiguration=Test Configuration
+testt=Test
+bind=Thread Bind
+sbind=Single bind/unbind
+unbind=Thread Unbind
+compare=Compare
+comparefilt=Compare filter
+userpw=Password
+userdn=Username
+rename=Rename entry
+newdn=New distinghuised name
+modddn=Old entry name
+attribute=Attribute
+opcode=opCode
+scope=Scope
+countlim=Size limit
+timelim=Time limit
+attrs=Attributes
+retobj=Return object
+deref=Dereference aliases
+ldapext_testing_title= LDAPExt Request (ALPHA)
 ldap_testing_title= LDAP Request
 minimum_param=The minimum value allowed for a range of values
 maximum_param=The maximum value allowed for a range of values
Index: core/org/apache/jmeter/resources/messages_ja.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_ja.properties,v
retrieving revision 1.36
diff -u -r1.36 messages_ja.properties
--- core/org/apache/jmeter/resources/messages_ja.properties	23 Jun 2003 14:09:11 -0000	1.36
+++ core/org/apache/jmeter/resources/messages_ja.properties	9 Aug 2003 11:34:33 -0000
@@ -347,7 +347,39 @@
 search_base=Search base
 entry_dn=Entry DN
 test_configuration=Test Configuration
-test =Test
+test=Test
+ldap_testing_title= LDAP Request
+serverName=Servername :
+addtest=Add Test
+modtest=Modify Test
+deltest=Delete Test
+searchtest=Search Test
+ldapext_sample_title=LDAPExt Request Defaults (ALPHA)
+ddn=DN
+searchfilter=Search Filter
+searchbase=Search base
+entrydn=Entry DN
+testConfiguration=Test Configuration
+testt=Test
+bind=Thread Bind
+sbind=Single bind/unbind
+unbind=Thread Unbind
+compare=Compare
+comparefilt=Compare filter
+userpw=Password
+userdn=Username
+rename=Rename entry
+newdn=New distinghuised name
+modddn=Old entry name
+attribute=Attribute
+opcode=opCode
+scope=Scope
+countlim=Size limit
+timelim=Time limit
+attrs=Attributes
+retobj=Return object
+deref=Dereference aliases
+ldapext_testing_title= LDAPExt Request (ALPHA)
 ldap_testing_title= LDAP Request
 minimum_param=The minimum value allowed for a range of values
 maximum_param=The maximum value allowed for a range of values
Index: core/org/apache/jmeter/resources/messages_no.properties
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/src/core/org/apache/jmeter/resources/messages_no.properties,v
retrieving revision 1.36
diff -u -r1.36 messages_no.properties
--- core/org/apache/jmeter/resources/messages_no.properties	23 Jun 2003 14:09:11 -0000	1.36
+++ core/org/apache/jmeter/resources/messages_no.properties	9 Aug 2003 11:34:29 -0000
@@ -339,7 +339,39 @@
 search_base=Search base
 entry_dn=Entry DN
 test_configuration=Test Configuration
-test =Test
+test=Test
+ldap_testing_title= LDAP Request
+serverName=Servername :
+addtest=Add Test
+modtest=Modify Test
+deltest=Delete Test
+searchtest=Search Test
+ldapext_sample_title=LDAPExt Request Defaults (ALPHA)
+ddn=DN
+searchfilter=Search Filter
+searchbase=Search base
+entrydn=Entry DN
+testConfiguration=Test Configuration
+testt=Test
+bind=Thread Bind
+sbind=Single bind/unbind
+unbind=Thread Unbind
+compare=Compare
+comparefilt=Compare filter
+userpw=Password
+userdn=Username
+rename=Rename entry
+newdn=New distinghuised name
+modddn=Old entry name
+attribute=Attribute
+opcode=opCode
+scope=Scope
+countlim=Size limit
+timelim=Time limit
+attrs=Attributes
+retobj=Return object
+deref=Dereference aliases
+ldapext_testing_title= LDAPExt Request (ALPHA)
 ldap_testing_title= LDAP Request
 minimum_param=The minimum value allowed for a range of values
 maximum_param=The maximum value allowed for a range of values
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/config/LdapExtConfig.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/config/LdapExtConfig.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/config/LdapExtConfig.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/config/LdapExtConfig.java	9 Aug 2003 11:34:17 -0000
@@ -0,0 +1,165 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.config;
+
+import java.io.Serializable;
+
+import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
+import org.apache.jmeter.protocol.ldap.sampler.LdapExtClient;
+import org.apache.jmeter.testelement.property.BooleanProperty;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ *
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * Based on the work of:
+ *@author    T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+ *@created    Apr 29 2003 11:00 AM
+ *@company    Sip Technologies and Exports Ltd.
+ *@version   1.0
+ ***************************************/
+
+/****************************************
+ * This is model class for the LdapConfigGui
+ * this will hold all the LDAP config value
+ ***************************************/
+public class LdapExtConfig extends ConfigTestElement implements Serializable
+{
+
+     
+   /****************************************
+     * Constructor for the LdapConfig object
+     ***************************************/
+
+    public LdapExtConfig() {
+    	 
+    }
+
+    /************************************************************
+     *  Sets the Rootdn attribute of the LdapConfig object
+     *
+     *@param  rootdn  The new rootdn value
+     ***********************************************************/
+    public void setRootdn(String newRootdn)	{
+        this.setProperty(LDAPExtSampler.ROOTDN,newRootdn);
+    }
+	
+    /************************************************************
+     *  Gets the Rootdn attribute of the LdapConfig object
+     *
+     *@return    The Rootdn value
+     ***********************************************************/
+    public String getRootdn() {
+        return getPropertyAsString(LDAPExtSampler.ROOTDN);
+    }
+
+    /************************************************************
+     *  Sets the Test attribute of the LdapConfig object
+     *
+     *@param  Test  The new test value(Add,Modify,Delete  and search)
+     ***********************************************************/
+    public void setTest(String newTest) {
+        this.setProperty(LDAPExtSampler.TEST,newTest);
+    }
+
+    /************************************************************
+     *  Gets the test attribute of the LdapConfig object
+     *
+     *@return    The test value (Add,Modify,Delete  and search)
+     ***********************************************************/
+    public String getTest()	{
+        return getPropertyAsString(LDAPExtSampler.TEST);
+    }
+
+
+ 
+    /************************************************************
+     *  Sets the Arguments attribute of the LdapConfig object
+     *  This will collect values from the table for user defined test
+     *  case 
+     *@param  value  The  arguments 
+     ***********************************************************/
+    public void setArguments(Arguments value)
+    {
+        setProperty(new TestElementProperty(LDAPExtSampler.ARGUMENTS, value));
+    }
+
+    /************************************************************
+     *  Gets the Arguments attribute of the LdapConfig object
+     *
+     *@return    The  arguments
+     *           user defined test  case
+     ***********************************************************/
+    public Arguments getArguments()
+    {
+        return (Arguments) getProperty(LDAPExtSampler.ARGUMENTS).getObjectValue();
+    }
+	
+    /**
+     * Returns a formatted string label describing this sampler
+     * Example output:
+     *
+     * @return a formatted string label describing this sampler
+     */
+    public String getLabel() {
+        return ("ldap://" + "this.getServername()" + "/" + this.getRootdn());
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java	9 Aug 2003 11:34:18 -0000
@@ -0,0 +1,213 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.config.gui;
+
+import java.io.Serializable;
+
+import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.config.ConfigTestElement;
+
+//Mark Walsh, 2002-08-03, add metadata attribute
+// add constructor Argument(String name, Object value, Object metadata)
+// add MetaData get and set methods
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ * Class representing an argument.  Each argument consists of a 
+ * name/value and opcode combination,
+ * as well as (optional) metadata.
+ * 
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * 
+ * Based on the work of:
+ * 
+ * @author    Michael Stover
+ * @author    Mark Walsh
+ * @version   $Revision: 1.6 $
+ */
+
+public class LDAPArgument extends AbstractTestElement implements Serializable
+{
+    /** Name used to store the argument's name. */
+    public static final String NAME = "Argument.name";
+
+    /** Name used to store the argument's value. */
+    public static final String VALUE = "Argument.value";
+
+   /** Name used to store the argument's value. */
+    public static final String OPCODE = "Argument.opcode";
+
+    /** Name used to store the argument's metadata. */
+    public static final String METADATA = "Argument.metadata";
+
+    /**
+     * Create a new Argument without a name, value, or metadata.
+     */
+    public LDAPArgument()
+    {
+    }
+
+    /**
+     * Create a new Argument with the specified name and value, and no
+     * metadata.
+     *
+     * @param name   the argument name
+     * @param value  the argument value
+     */
+    public LDAPArgument(String name, String value, String opcode)
+    {
+        setProperty(new StringProperty(NAME, name));
+        setProperty(new StringProperty(VALUE, value));
+        setProperty(new StringProperty(OPCODE, opcode));
+    }
+
+    /**
+     * Create a new Argument with the specified name, value, and metadata.
+     *
+     * @param name     the argument name
+     * @param value    the argument value
+     * @param metadata the argument metadata
+     */
+    public LDAPArgument(String name, String value, String opcode, String metadata)
+    {
+        setProperty(new StringProperty(NAME, name));
+        setProperty(new StringProperty(VALUE, value));
+        setProperty(new StringProperty(OPCODE, opcode));
+        setProperty(new StringProperty(METADATA, metadata));
+    }
+
+    /**
+     * Set the name of the Argument.
+     *
+     * @param newName  the new name
+     */
+    public void setName(String newName)
+    {
+        setProperty(new StringProperty(NAME, newName));
+    }
+
+    /**
+     * Get the name of the Argument.
+     * 
+     * @return the attribute's name
+     */
+    public String getName()
+    {
+        return getPropertyAsString(NAME);
+    }
+
+    /**
+     * Sets the value of the Argument.
+     *
+     * @param newValue  the new value
+     */
+    public void setValue(String newValue)
+    {
+        setProperty(new StringProperty(VALUE, newValue));
+    }
+
+    /**
+     * Gets the value of the Argument object.
+     *
+     * @return the attribute's value
+     */
+    public String getValue()
+    {
+        return getPropertyAsString(VALUE);
+    }
+
+    /**
+     * Sets the opcode of the Argument.
+     *
+     * @param newValue  the new value
+     */
+    public void setOpcode(String newOpcode)
+    {
+        setProperty(new StringProperty(OPCODE, newOpcode));
+    }
+
+    /**
+     * Gets the opcode of the Argument object.
+     *
+     * @return the attribute's value
+     */
+    public String getOpcode()
+    {
+        return getPropertyAsString(OPCODE);
+    }
+
+    /**
+     * Sets the Meta Data attribute of the Argument.
+     *
+     * @param newMetaData  the new metadata
+     */
+    public void setMetaData(String newMetaData)
+    {
+        setProperty(new StringProperty(METADATA, newMetaData));
+    }
+
+    /**
+     * Gets the Meta Data attribute of the Argument.
+     *
+     * @return   the MetaData value
+     */
+    public String getMetaData()
+    {
+        return getPropertyAsString(METADATA);
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java	9 Aug 2003 11:34:17 -0000
@@ -0,0 +1,317 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.config.gui;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+import org.apache.jmeter.config.ConfigTestElement;
+
+// Mark Walsh, 2002-08-03 add method:
+//    addArgument(String name, Object value, Object metadata)
+// Modify methods:
+//    toString(), addEmptyArgument(), addArgument(String name, Object value)
+
+/**
+ * A set of LDAPArgument objects.
+  *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * 
+ * Based on the work of:
+ * 
+ * @author    Michael Stover
+ * @author    Mark Walsh
+ * @version   $Revision: 1.6 $
+ 
+public class LDAPArguments extends ConfigTestElement implements Serializable
+{
+    /** The name of the property used to store the arguments. */
+    public static final String ARGUMENTS = "Arguments.arguments";
+
+    /**
+     * Create a new Arguments object with no arguments.
+     */
+    public LDAPArguments()
+    {
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList()));
+    }
+
+    /**
+     * Get the arguments.
+     * 
+     * @return the arguments
+     */
+    public CollectionProperty getArguments()
+    {
+        return (CollectionProperty) getProperty(ARGUMENTS);
+    }
+
+    /**
+     * Clear the arguments.
+     */
+    public void clear()
+    {
+        super.clear();
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList()));
+    }
+
+    /**
+     * Set the list of arguments.  Any existing arguments will be lost.
+     * 
+     * @param arguments the new arguments
+     */
+    public void setArguments(List arguments)
+    {
+        setProperty(new CollectionProperty(ARGUMENTS, arguments));
+    }
+
+    /**
+     * Get the arguments as a Map.  Each argument name is used as the key, and
+     * its value as the value.
+     * 
+     * @return a new Map with String keys and values containing the arguments
+     */
+    public Map getArgumentsAsMap()
+    {
+        PropertyIterator iter = getArguments().iterator();
+        Map argMap = new HashMap();
+        while (iter.hasNext())
+        {
+            LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
+            argMap.put(arg.getName(), arg.getValue());
+        }
+        return argMap;
+    }
+
+    /**
+     * Add a new argument with the given name and value.
+     * 
+     * @param name  the name of the argument
+     * @param value the value of the argument
+     */
+    public void addArgument(String name, String value, String opcode)
+    {
+        addArgument(new LDAPArgument(name, value, opcode, null));
+    }
+
+    /**
+     * Add a new argument.
+     * 
+     * @param arg the new argument
+     */
+    public void addArgument(LDAPArgument arg)
+    {
+        TestElementProperty newArg =
+            new TestElementProperty(arg.getName(), arg);
+        if (isRunningVersion())
+        {
+            newArg.setTemporary(true, this);
+        }
+        getArguments().addItem(newArg);
+    }
+
+    /**
+     * Add a new argument with the given name, value, and metadata.
+     * 
+     * @param name     the name of the argument
+     * @param value    the value of the argument
+     * @param metadata the metadata for the argument
+     */
+    public void addArgument(String name, String value, String opcode, String metadata)
+    {
+        addArgument(new LDAPArgument(name, value, opcode,  metadata));
+    }
+
+    /**
+     * Get a PropertyIterator of the arguments.
+     * 
+     * @return an iteration of the arguments
+     */
+    public PropertyIterator iterator()
+    {
+        return getArguments().iterator();
+    }
+
+    /**
+     * Create a string representation of the arguments.
+     * 
+     * @return the string representation of the arguments
+     */
+    public String toString()
+    {
+        StringBuffer str = new StringBuffer();
+        PropertyIterator iter = getArguments().iterator();
+        while (iter.hasNext())
+        {
+            LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
+            if (arg.getMetaData() == null)
+            {
+                str.append(arg.getName() + "=" + arg.getValue());
+            }
+            else
+            {
+                str.append(arg.getName() + arg.getMetaData() + arg.getValue());
+            }
+            if (iter.hasNext())
+            {
+                str.append("&");
+            }
+        }
+        return str.toString();
+    }
+
+    /**
+     * Remove the specified argument from the list.
+     * 
+     * @param row the index of the argument to remove
+     */
+    public void removeArgument(int row)
+    {
+        if (row < getArguments().size())
+        {
+            getArguments().remove(row);
+        }
+    }
+
+    /**
+     * Remove the specified argument from the list.
+     * 
+     * @param arg the argument to remove
+     */
+    public void removeArgument(LDAPArgument arg)
+    {
+        PropertyIterator iter = getArguments().iterator();
+        while (iter.hasNext())
+        {
+            LDAPArgument item = (LDAPArgument) iter.next().getObjectValue();
+            if (arg.equals(item))
+            {
+                iter.remove();
+            }
+        }
+    }
+
+    /**
+     * Remove the argument with the specified name.
+     * 
+     * @param argName the name of the argument to remove
+     */
+    public void removeArgument(String argName)
+    {
+        PropertyIterator iter = getArguments().iterator();
+        while (iter.hasNext())
+        {
+            LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
+            if (arg.getName().equals(argName))
+            {
+                iter.remove();
+            }
+        }
+    }
+
+    /**
+     * Remove all arguments from the list.
+     */
+    public void removeAllArguments()
+    {
+        getArguments().clear();
+    }
+
+    /**
+     * Add a new empty argument to the list.  The new argument will have the
+     * empty string as its name and value, and null metadata.
+     */
+    public void addEmptyArgument()
+    {
+        addArgument(new LDAPArgument("", "","", null));
+    }
+
+    /**
+     * Get the number of arguments in the list.
+     * 
+     * @return the number of arguments
+     */
+    public int getArgumentCount()
+    {
+        return getArguments().size();
+    }
+
+    /**
+     * Get a single argument.
+     * 
+     * @param row the index of the argument to return.
+     * @return    the argument at the specified index, or null if no argument
+     *            exists at that index.
+     */
+    public LDAPArgument getArgument(int row)
+    {
+        LDAPArgument argument = null;
+
+        if (row < getArguments().size())
+        {
+            argument = (LDAPArgument) getArguments().get(row).getObjectValue();
+        }
+
+        return argument;
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java	9 Aug 2003 11:34:21 -0000
@@ -0,0 +1,529 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.config.gui;
+
+import org.apache.jmeter.config.gui.AbstractConfigGui;
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.FlowLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Collection;
+import java.util.Iterator;
+
+import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
+import javax.swing.table.TableCellEditor;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.ObjectTableModel;
+import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
+
+/**
+ * A GUI panel allowing the user to enter name-value argument pairs.  These
+ * arguments (or parameters) are usually used to provide configuration values
+ * for some other component.
+ * 
+  *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * 
+ * Based on the work of:
+ * 
+ * @author    Michael Stover
+  */
+
+public class LDAPArgumentsPanel
+    extends AbstractConfigGui
+    implements  ActionListener
+{
+    /** Logging. */
+    private static transient Logger log =LoggingManager.getLoggerForClass();
+        
+    /** The title label for this component. */    
+    private JLabel tableLabel;
+
+    /** The table containing the list of arguments. */
+    private transient JTable table;
+    
+    /** The model for the arguments table. */
+    protected transient ObjectTableModel tableModel;
+
+    /** A button for adding new arguments to the table. */
+    private JButton add;
+    
+    /** A button for removing arguments from the table. */
+    private JButton delete;
+
+    /** Command for adding a row to the table. */ 
+    private static final String ADD = "add";
+    
+    /** Command for removing a row from the table. */
+    private static final String DELETE = "delete";
+
+    public static final String[] COLUMN_NAMES =
+        {
+            JMeterUtils.getResString("attribute"),
+            JMeterUtils.getResString("value"),
+            JMeterUtils.getResString("opcode"),
+            JMeterUtils.getResString("metadata")
+        };
+
+    /**
+     * Create a new LDAPArgumentsPanel, using the default title. 
+     */
+    public LDAPArgumentsPanel()
+    {
+        this(JMeterUtils.getResString("paramtable"));
+    }
+
+    /**
+     * Create a new LDAPArgumentsPanel, using the specified title.
+     * 
+     * @param label the title of the component
+     */
+    public LDAPArgumentsPanel(String label)
+    {
+        tableLabel = new JLabel(label);
+        init();
+    }
+
+    /**
+     * This is the list of menu categories this gui component will be available
+     * under. The LDAPArgumentsPanel is not intended to be used as a standalone
+     * component, so this inplementation returns null.
+     *
+     * @return   a Collection of Strings, where each element is one of the
+     *           constants defined in MenuFactory
+     */
+    public Collection getMenuCategories()
+    {
+        return null;
+    }
+
+    /* Implements JMeterGUIComponent.getStaticLabel() */
+    public String getStaticLabel()
+    {
+        return "LDAPArgument List";
+    }
+
+    /* Implements JMeterGUIComponent.createTestElement() */
+    public TestElement createTestElement()
+    {
+        LDAPArguments args = new LDAPArguments();
+        modifyTestElement(args);
+        // TODO: Why do we clone the return value? This is the only reference
+        // to it (right?) so we shouldn't need a separate copy.
+        return (TestElement) args.clone();
+    }
+
+    /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    public void modifyTestElement(TestElement args)
+    {
+        stopTableEditing();
+        Iterator modelData = tableModel.iterator();
+        LDAPArguments arguments = null;
+        if (args instanceof LDAPArguments)
+        {
+            arguments = (LDAPArguments) args;
+            arguments.clear();
+            while (modelData.hasNext())
+            {
+                LDAPArgument arg = (LDAPArgument) modelData.next();
+                arg.setMetaData("=");
+                arguments.addArgument(arg);
+            }
+        }
+        this.configureTestElement(args);
+    }
+
+    /**
+     * A newly created component can be initialized with the contents of
+     * a Test Element object by calling this method.  The component is
+     * responsible for querying the Test Element object for the
+     * relevant information to display in its GUI.
+     *
+     * @param el the TestElement to configure 
+     */
+     public void configure(TestElement el)
+    {
+        super.configure(el);
+        if (el instanceof LDAPArguments)
+        {
+            tableModel.clearData();
+            PropertyIterator iter = ((LDAPArguments) el).iterator();
+            while (iter.hasNext())
+            {
+                LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
+                tableModel.addRow(arg);
+            }
+        }
+        checkDeleteStatus();
+    }
+
+    /**
+     * Get the table used to enter arguments.
+     * 
+     * @return the table used to enter arguments
+     */
+    protected JTable getTable()
+    {
+        return table;
+    }
+
+    /**
+     * Get the title label for this component.
+     * 
+     * @return the title label displayed with the table
+     */
+    protected JLabel getTableLabel()
+    {
+        return tableLabel;
+    }
+
+    /**
+     * Get the button used to delete rows from the table.
+     * 
+     * @return the button used to delete rows from the table
+     */
+    protected JButton getDeleteButton()
+    {
+        return delete;
+    }
+
+    /**
+     * Get the button used to add rows to the table.
+     * 
+     * @return the button used to add rows to the table
+     */
+    protected JButton getAddButton()
+    {
+        return add;
+    }
+
+    /**
+     * Enable or disable the delete button depending on whether or not there
+     * is a row to be deleted.
+     */
+    protected void checkDeleteStatus()
+    {
+        // Disable DELETE if there are no rows in the table to delete.
+        if (tableModel.getRowCount() == 0)
+        {
+            delete.setEnabled(false);
+        }
+        else
+        {
+            delete.setEnabled(true);
+        }
+    }
+
+    /**
+     * Clear all rows from the table.
+     * T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+     */
+    public void clear()
+    {
+        tableModel.clearData();
+    }
+
+    /**
+     * Invoked when an action occurs.  This implementation supports the add
+     * and delete buttons.
+     * 
+     * @param e the event that has occurred
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+        String action = e.getActionCommand();
+        if (action.equals(DELETE))
+        {
+            deleteArgument();
+        }
+        else if (action.equals(ADD))
+        {
+            addArgument();
+        }
+    }
+
+    /**
+     * Remove the currently selected argument from the table.
+     */
+    protected void deleteArgument()
+    {
+        // If a table cell is being edited, we must cancel the editing before
+        // deleting the row
+        if (table.isEditing())
+        {
+            TableCellEditor cellEditor = table.getCellEditor(
+                    table.getEditingRow(),
+                    table.getEditingColumn());
+            cellEditor.cancelCellEditing();
+        }
+
+        int rowSelected = table.getSelectedRow();
+        if (rowSelected >= 0)
+        {
+            tableModel.removeRow(rowSelected);
+            tableModel.fireTableDataChanged();
+
+            // Disable DELETE if there are no rows in the table to delete.
+            if (tableModel.getRowCount() == 0)
+            {
+                delete.setEnabled(false);
+            }
+
+            // Table still contains one or more rows, so highlight (select)
+            // the appropriate one.
+            else
+            {
+                int rowToSelect = rowSelected;
+
+                if (rowSelected >= tableModel.getRowCount())
+                {
+                    rowToSelect = rowSelected - 1;
+                }
+
+                table.setRowSelectionInterval(rowToSelect, rowToSelect);
+            }
+        }
+    }
+
+    /**
+     * Add a new argument row to the table.
+     */
+    protected void addArgument()
+    {
+        // If a table cell is being edited, we should accept the current value
+        // and stop the editing before adding a new row.
+        stopTableEditing();
+
+        tableModel.addRow(makeNewLDAPArgument());
+
+        // Enable DELETE (which may already be enabled, but it won't hurt)
+        delete.setEnabled(true);
+
+        // Highlight (select) the appropriate row.
+        int rowToSelect = tableModel.getRowCount() - 1;
+        table.setRowSelectionInterval(rowToSelect, rowToSelect);
+    }
+
+    /**
+     * Create a new LDAPArgument object.
+     * @return a new LDAPArgument object
+     */
+    protected Object makeNewLDAPArgument()
+    {
+        return new LDAPArgument("", "","");
+    }
+
+    /**
+     * Stop any editing that is currently being done on the table.  This will
+     * save any changes that have already been made.
+     */
+    private void stopTableEditing()
+    {
+        if (table.isEditing())
+        {
+            TableCellEditor cellEditor =
+                table.getCellEditor(
+                    table.getEditingRow(),
+                    table.getEditingColumn());
+            cellEditor.stopCellEditing();
+        }
+    }
+
+    /**
+     * Initialize the table model used for the arguments table.
+     */
+    protected void initializeTableModel()
+    {
+        tableModel =
+            new ObjectTableModel(
+                new String[] {
+                    COLUMN_NAMES[0],
+                    COLUMN_NAMES[1],
+                    COLUMN_NAMES[2] },
+                new String[] { "name", "value","opcode"},
+                new Class[] { String.class, String.class, String.class },
+                new Class[] { String.class, String.class, String.class },
+                new LDAPArgument());
+    }
+
+    /**
+     * Resize the table columns to appropriate widths.
+     * @param table the table to resize columns for
+     */
+    protected void sizeColumns(JTable table)
+    {
+    }
+
+    /**
+     * Create the main GUI panel which contains the argument table.
+     * 
+     * @return the main GUI panel
+     */
+    private Component makeMainPanel()
+    {
+        initializeTableModel();
+        table = new JTable(tableModel);
+        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+        return makeScrollPane(table);
+    }
+
+    /**
+     * Create a panel containing the title label for the table.
+     * 
+     * @return a panel containing the title label
+     */
+    protected Component makeLabelPanel()
+    {
+        JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
+        labelPanel.add(tableLabel);
+        return labelPanel;
+    }
+
+    /**
+     * Create a panel containing the add and delete buttons.
+     * 
+     * @return a GUI panel containing the buttons
+     */
+    private JPanel makeButtonPanel()
+    {
+        add = new JButton(JMeterUtils.getResString("add"));
+        add.setActionCommand(ADD);
+        add.setEnabled(true);
+        
+        delete = new JButton(JMeterUtils.getResString("delete"));
+        delete.setActionCommand(DELETE);
+        
+        checkDeleteStatus();
+        
+        JPanel buttonPanel = new JPanel();
+        buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
+        add.addActionListener(this);
+        delete.addActionListener(this);
+        buttonPanel.add(add);
+        buttonPanel.add(delete);
+        return buttonPanel;
+    }
+
+    /**
+     * Initialize the components and layout of this component.
+     */
+    private void init()
+    {
+        setLayout(new BorderLayout());
+
+        add(makeLabelPanel(), BorderLayout.NORTH);
+        add(makeMainPanel(), BorderLayout.CENTER);
+        // Force a minimum table height of 70 pixels
+        add(Box.createVerticalStrut(70), BorderLayout.WEST);
+        add(makeButtonPanel(), BorderLayout.SOUTH);
+
+        table.revalidate();
+        sizeColumns(table);
+    }
+
+
+    /**
+     * Tests for the LDAPArgumentsPanel component.
+     */
+    public static class Test extends TestCase
+    {
+        /**
+         * Create a new test.
+         * @param name the name of the test
+         */
+        public Test(String name)
+        {
+            super(name);
+        }
+
+        /**
+         * Test that adding an argument to the table results in an appropriate
+         * TestElement being created.
+         * 
+         * @throws Exception if an exception occurred during the test
+         */
+        public void testLDAPArgumentCreation() throws Exception
+        {
+            LDAPArgumentsPanel gui = new LDAPArgumentsPanel();
+            gui.tableModel.addRow(new LDAPArgument());
+            gui.tableModel.setValueAt("howdy", 0, 0);
+            gui.tableModel.addRow(new LDAPArgument());
+            gui.tableModel.setValueAt("doody", 0, 1);
+
+            assertEquals(
+                "=",
+                ((LDAPArgument) ((LDAPArguments) gui.createTestElement())
+                    .getArguments()
+                    .get(0)
+                    .getObjectValue())
+                    .getMetaData());
+        }
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java	9 Aug 2003 11:34:20 -0000
@@ -0,0 +1,698 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.config.gui;
+import java.awt.BorderLayout;
+import java.awt.CardLayout;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+
+import javax.swing.BorderFactory;
+import javax.swing.ButtonGroup;
+import javax.swing.JCheckBox;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JRadioButton;
+import javax.swing.JTextField;
+import javax.swing.JPasswordField;
+
+import javax.naming.directory.DirContext;
+
+import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.config.gui.AbstractConfigGui;
+import org.apache.jmeter.config.gui.ArgumentsPanel;
+import org.apache.jmeter.config.gui.LoginConfigGui;
+import org.apache.jmeter.gui.util.VerticalPanel;
+import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
+import org.apache.jmeter.protocol.ldap.sampler.LdapExtClient;
+import org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.BooleanProperty;
+import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+import org.apache.jmeter.util.JMeterUtils;
+
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ *
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * Based on the work of:
+ *@author    T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+ *@created    Apr 29 2003 11:00 AM
+ *@company    Sip Technologies and Exports Ltd.
+ *@version   1.0
+ ***************************************/
+
+/****************************************
+ * This class LdapConfigGui is user interface gui 
+ * for getting all the configuration value from the
+ * user
+ ***************************************/
+
+public class LdapExtConfigGui extends AbstractConfigGui implements ItemListener
+{
+    private final static String ROOTDN = "rootDn";
+    private final static String TEST = "tesT";
+    private static String testValue="NNNN";
+
+    private JTextField rootdn = new JTextField(20);
+    private JTextField searchbase = new JTextField(20);
+    private JTextField searchfilter = new JTextField(20);
+    private JTextField delete = new JTextField(20);
+    private JTextField add = new JTextField(20);
+    private JTextField modify = new JTextField(20);
+    private JTextField servername = new JTextField(20);
+    private JTextField port = new JTextField(20);
+    private JTextField scope = new JTextField(20);
+    private JTextField countlim = new JTextField(20);
+    private JTextField timelim = new JTextField(20);
+    private JTextField attribs = new JTextField(20);
+    private JTextField retobj = new JTextField(20);
+    private JTextField deref = new JTextField(20);
+    private JTextField userdn = new JTextField(20);
+    private JTextField userpw = new JPasswordField(20);
+    private JTextField comparedn = new JTextField(20);
+    private JTextField comparefilt = new JTextField(20);
+    private JTextField suserdn = new JTextField(20);
+    private JTextField suserpw = new JPasswordField(20);
+    private JTextField modddn = new JTextField(20);
+    private JTextField newdn = new JTextField(20);
+ 
+    private JRadioButton addTest = new JRadioButton(JMeterUtils.getResString("addTest"));
+    private JRadioButton modifyTest = new JRadioButton(JMeterUtils.getResString("modTest"));
+    private JRadioButton deleteTest = new JRadioButton(JMeterUtils.getResString("delTest"));
+    private JRadioButton searchTest = new JRadioButton(JMeterUtils.getResString("searchTest"));
+    private JRadioButton bind = new JRadioButton(JMeterUtils.getResString("bind"));
+    private JRadioButton rename = new JRadioButton(JMeterUtils.getResString("rename"));
+    private JRadioButton unbind = new JRadioButton(JMeterUtils.getResString("unbind"));
+    private JRadioButton sbind = new JRadioButton(JMeterUtils.getResString("sbind"));
+    private JRadioButton compare = new JRadioButton(JMeterUtils.getResString("compare"));
+    private ButtonGroup bGroup = new ButtonGroup();
+    private boolean displayName = true;
+    ArgumentsPanel tableAddPanel = new ArgumentsPanel(JMeterUtils.getResString("addTest"));
+    LDAPArgumentsPanel tableModifyPanel = new LDAPArgumentsPanel(JMeterUtils.getResString("modTest"));
+    private JPanel cards;
+    
+
+    
+    /****************************************
+     *  Default constructor for LdapConfigGui
+     ***************************************/
+    public LdapExtConfigGui()
+    {
+        this(true);
+    }
+
+     
+    /****************************************
+     * !ToDo (Constructor description)
+     *
+     *@param displayName  !ToDo (Parameter description)
+     ***************************************/
+    public LdapExtConfigGui(boolean displayName) {
+        this.displayName = displayName;
+        init();
+    }
+
+	
+   /* Implements JMeterGUIComponent.getStaticLabel() */
+    public String getStaticLabel()
+    {
+        return  JMeterUtils.getResString("Ldapext_sample_title");
+    }
+
+    /**
+     * A newly created component can be initialized with the contents of
+     * a Test Element object by calling this method.  The component is
+     * responsible for querying the Test Element object for the
+     * relevant information to display in its GUI.
+     *
+     * @param element the TestElement to configure 
+     */
+    public void configure(TestElement element)
+    {
+        super.configure(element);
+        servername.setText(element.getPropertyAsString(LDAPExtSampler.SERVERNAME));
+        port.setText(element.getPropertyAsString(LDAPExtSampler.PORT));
+        rootdn.setText(element.getPropertyAsString(LDAPExtSampler.ROOTDN));
+        scope.setText(element.getPropertyAsString(LDAPExtSampler.SCOPE));
+        countlim.setText(element.getPropertyAsString(LDAPExtSampler.COUNTLIM));
+        timelim.setText(element.getPropertyAsString(LDAPExtSampler.TIMELIM));
+        attribs.setText(element.getPropertyAsString(LDAPExtSampler.ATTRIBS));
+        retobj.setText(element.getPropertyAsString(LDAPExtSampler.RETOBJ));
+        deref.setText(element.getPropertyAsString(LDAPExtSampler.DEREF));
+        userpw.setText(element.getPropertyAsString(LDAPExtSampler.USERPW));
+        userdn.setText(element.getPropertyAsString(LDAPExtSampler.USERDN));
+        comparedn.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREDN));
+        comparefilt.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREFILT));
+        suserpw.setText(element.getPropertyAsString(LDAPExtSampler.SUSERPW));
+        suserdn.setText(element.getPropertyAsString(LDAPExtSampler.SUSERDN));
+        modddn.setText(element.getPropertyAsString(LDAPExtSampler.MODDDN));
+        newdn.setText(element.getPropertyAsString(LDAPExtSampler.NEWDN));
+        CardLayout cl = (CardLayout)(cards.getLayout());
+        if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("unbind")) {
+            unbind.setSelected(true);
+            cl.show(cards,"unbind");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("bind")) {
+            bind.setSelected(true);
+            cl.show(cards,"bind");
+         }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("sbind")) {
+            sbind.setSelected(true);
+            cl.show(cards,"sbind");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("compare")) {
+            compare.setSelected(true);
+            cl.show(cards,"compare");
+       }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("add")) {
+            addTest.setSelected(true);
+            add.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));
+            tableAddPanel.configure((TestElement)element.getProperty(LDAPExtSampler.ARGUMENTS).getObjectValue());
+            cl.show(cards,"Add");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("modify")) {
+            modifyTest.setSelected(true);
+            modify.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));
+            tableModifyPanel.configure((TestElement)element.getProperty(LDAPExtSampler.ARGUMENTS).getObjectValue());
+            cl.show(cards,"Modify");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("delete")) {
+            deleteTest.setSelected(true);
+            delete.setText(element.getPropertyAsString(LDAPExtSampler.DELETE));
+            cl.show(cards,"Delete");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("rename")) {
+            rename.setSelected(true);
+            cl.show(cards,"rename");
+        }else if (element.getPropertyAsString(LDAPExtSampler.TEST).equals("search")) {
+            searchTest.setSelected(true);
+            searchbase.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHBASE));
+            searchfilter.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHFILTER));
+            cl.show(cards,"Search");
+        }
+    }
+
+    /* Implements JMeterGUIComponent.createTestElement() */
+    public TestElement createTestElement()
+    {
+        ConfigTestElement element = new ConfigTestElement();
+        modifyTestElement(element);
+        return element;
+    }
+
+    /**
+     * Modifies a given TestElement to mirror the data in the gui components.
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
+     */
+    public void modifyTestElement(TestElement element)
+    {
+        element.clear();
+        configureTestElement(element);
+        element.setProperty(LDAPExtSampler.SERVERNAME,servername.getText());
+        element.setProperty(LDAPExtSampler.PORT,port.getText());
+        element.setProperty(LDAPExtSampler.ROOTDN,rootdn.getText());
+        element.setProperty(LDAPExtSampler.SCOPE,scope.getText());
+        element.setProperty(LDAPExtSampler.COUNTLIM,countlim.getText());
+        element.setProperty(LDAPExtSampler.TIMELIM,timelim.getText());
+        element.setProperty(LDAPExtSampler.ATTRIBS,attribs.getText());
+        element.setProperty(LDAPExtSampler.RETOBJ,retobj.getText());
+        element.setProperty(LDAPExtSampler.DEREF,deref.getText());
+        element.setProperty(LDAPExtSampler.USERDN,userdn.getText());
+        element.setProperty(LDAPExtSampler.USERPW,userpw.getText());
+        element.setProperty(LDAPExtSampler.COMPAREDN,comparedn.getText());
+        element.setProperty(LDAPExtSampler.COMPAREFILT,comparefilt.getText());
+        element.setProperty(LDAPExtSampler.SUSERDN,suserdn.getText());
+        element.setProperty(LDAPExtSampler.SUSERPW,suserpw.getText());
+        element.setProperty(LDAPExtSampler.MODDDN,modddn.getText());
+        element.setProperty(LDAPExtSampler.NEWDN,newdn.getText());
+       if (addTest.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.ADD));
+            element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN,add.getText()));
+            element.setProperty(new TestElementProperty(LDAPExtSampler.ARGUMENTS,tableAddPanel.createTestElement()));
+        }
+        if (modifyTest.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.MODIFY));
+            element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN,modify.getText()));
+            element.setProperty(new TestElementProperty(LDAPExtSampler.ARGUMENTS,tableModifyPanel.createTestElement()));
+        }
+        if (deleteTest.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.DELETE));
+            element.setProperty(new StringProperty(LDAPExtSampler.DELETE,delete.getText()));
+        }
+        if (searchTest.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.SEARCHBASE));
+            element.setProperty(new StringProperty(LDAPExtSampler.SEARCHBASE,searchbase.getText()));
+            element.setProperty(new StringProperty(LDAPExtSampler.SEARCHFILTER,searchfilter.getText()));
+        }
+        if (bind.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.BIND));
+        }
+        if (bind.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.BIND));
+        }
+        if (compare.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.COMPARE));
+        }
+        if (rename.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.RENAME));
+        }
+        if (unbind.isSelected()) {
+            element.setProperty(new StringProperty(LDAPExtSampler.TEST,LDAPExtSampler.UNBIND));
+        }
+}
+
+
+/**********************************************
+ * This itemStateChanged listener for changing  the
+ * card layout for based on the test selected
+ * in the User defined test case.
+ ***********************************************/
+    public void itemStateChanged(ItemEvent ie) {
+        CardLayout cl = (CardLayout)(cards.getLayout());
+            if (addTest.isSelected()){
+                cl.show(cards,"Add");
+                tableModifyPanel.clear();
+             } else if(deleteTest.isSelected()){
+                cl.show(cards,"Delete");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(bind.isSelected()){
+                cl.show(cards,"Bind");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(sbind.isSelected()){
+                cl.show(cards,"Sbind");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(rename.isSelected()){
+                cl.show(cards,"Rename");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(compare.isSelected()){
+                cl.show(cards,"Compare");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(searchTest.isSelected()){
+                cl.show(cards,"Search");
+                delete.setText("");
+                tableModifyPanel.clear();
+                tableAddPanel.clear();
+            } else if(modifyTest.isSelected()){
+                cl.show(cards,"Modify");
+                tableAddPanel.clear();
+            }else {
+                cl.show(cards,"");
+                tableAddPanel.clear();
+                tableModifyPanel.clear();
+            }
+    }
+
+    /****************************************
+     * This will create the servername
+     *panel in the LdapConfigGui
+     ***************************************/
+    public JPanel createServernamePanel() {
+        JPanel serverPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("servername"));
+        label.setLabelFor(servername);
+        serverPanel.add(label, BorderLayout.WEST);
+        serverPanel.add(servername, BorderLayout.CENTER);
+        return serverPanel;
+    }
+
+    /****************************************
+     * This will create the port
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createPortPanel() {
+        JPanel portPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("port"));
+        label.setLabelFor(port);
+        portPanel.add(label, BorderLayout.WEST);
+        portPanel.add(port, BorderLayout.CENTER);
+        return portPanel;
+    }
+    
+    /****************************************
+     * This will create the Root distinguised name
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createRootdnPanel() {
+        JPanel rootdnPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("ddn"));
+        label.setLabelFor(rootdn);
+        rootdnPanel.add(label, BorderLayout.WEST);
+        rootdnPanel.add(rootdn, BorderLayout.CENTER);
+        return rootdnPanel;
+    }
+   /****************************************
+     * This will create the bind
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createSbindPanel() {
+        VerticalPanel sbindPanel = new VerticalPanel();
+        JPanel sBPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel sBlabel0 = new JLabel(JMeterUtils.getResString("userdn"));
+        sBlabel0.setLabelFor(suserdn);
+        sBPanel.add(sBlabel0, BorderLayout.WEST);
+        sBPanel.add(suserdn, BorderLayout.CENTER);
+        sbindPanel.add(sBPanel);
+        
+        JPanel sB1Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel sBlabel1 = new JLabel(JMeterUtils.getResString("userpw"));
+        sBlabel1.setLabelFor(suserpw);
+        sB1Panel.add(sBlabel1, BorderLayout.WEST);
+        sB1Panel.add(suserpw, BorderLayout.CENTER);
+        sbindPanel.add(sB1Panel);
+   		return sbindPanel;
+    }
+
+    /****************************************
+     * This will create the bind
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createBindPanel() {
+        VerticalPanel bindPanel = new VerticalPanel();
+        bindPanel.add(createServernamePanel());
+        bindPanel.add(createPortPanel());
+        bindPanel.add(createRootdnPanel());
+        
+        JPanel BPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel Blabel0 = new JLabel(JMeterUtils.getResString("userdn"));
+        Blabel0.setLabelFor(scope);
+        BPanel.add(Blabel0, BorderLayout.WEST);
+        BPanel.add(userdn, BorderLayout.CENTER);
+        bindPanel.add(BPanel);
+        
+        JPanel B1Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel Blabel1 = new JLabel(JMeterUtils.getResString("userpw"));
+        Blabel1.setLabelFor(countlim);
+        B1Panel.add(Blabel1, BorderLayout.WEST);
+        B1Panel.add(userpw, BorderLayout.CENTER);
+        bindPanel.add(B1Panel);
+   		return bindPanel;
+    }
+
+    /****************************************
+     * This will create the bind
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createComparePanel() {
+        VerticalPanel cbindPanel = new VerticalPanel();
+        JPanel cBPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel cBlabel0 = new JLabel(JMeterUtils.getResString("entrydn"));
+        cBlabel0.setLabelFor(comparedn);
+        cBPanel.add(cBlabel0, BorderLayout.WEST);
+        cBPanel.add(comparedn, BorderLayout.CENTER);
+        cbindPanel.add(cBPanel);
+        
+        JPanel cBPanel1 = new JPanel(new BorderLayout(5, 0));
+        JLabel cBlabel1 = new JLabel(JMeterUtils.getResString("comparefilt"));
+        cBlabel1.setLabelFor(comparefilt);
+        cBPanel1.add(cBlabel1, BorderLayout.WEST);
+        cBPanel1.add(comparefilt, BorderLayout.CENTER);
+        cbindPanel.add(cBPanel1);
+        
+   		return cbindPanel;
+    }
+
+   /****************************************
+     * This will create the Search controls 
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createSCPanel() {
+        VerticalPanel SCPanel = new VerticalPanel();
+    	
+        JPanel SC0Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label0 = new JLabel(JMeterUtils.getResString("scope"));
+        label0.setLabelFor(scope);
+        SC0Panel.add(label0, BorderLayout.WEST);
+        SC0Panel.add(scope, BorderLayout.CENTER);
+        SCPanel.add(SC0Panel);
+        
+        JPanel SC1Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label1 = new JLabel(JMeterUtils.getResString("countlim"));
+        label1.setLabelFor(countlim);
+        SC1Panel.add(label1, BorderLayout.WEST);
+        SC1Panel.add(countlim, BorderLayout.CENTER);
+        SCPanel.add(SC1Panel);
+        
+        JPanel SC2Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label2 = new JLabel(JMeterUtils.getResString("timelim"));
+        label2.setLabelFor(timelim);
+        SC2Panel.add(label2, BorderLayout.WEST);
+        SC2Panel.add(timelim, BorderLayout.CENTER);
+        SCPanel.add(SC2Panel);
+
+        JPanel SC3Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label3 = new JLabel(JMeterUtils.getResString("attrs"));
+        label3.setLabelFor(attribs);
+        SC3Panel.add(label3, BorderLayout.WEST);
+        SC3Panel.add(attribs, BorderLayout.CENTER);
+        SCPanel.add(SC3Panel);
+        
+        JPanel SC4Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label4 = new JLabel(JMeterUtils.getResString("retobj"));
+        label4.setLabelFor(retobj);
+        SC4Panel.add(label4, BorderLayout.WEST);
+        SC4Panel.add(retobj, BorderLayout.CENTER);
+        SCPanel.add(SC4Panel);
+        
+        JPanel SC5Panel = new JPanel(new BorderLayout(5, 0));
+        JLabel label5 = new JLabel(JMeterUtils.getResString("deref"));
+        label5.setLabelFor(deref);
+        SC5Panel.add(label5, BorderLayout.WEST);
+        SC5Panel.add(deref, BorderLayout.CENTER);
+        SCPanel.add(SC5Panel);
+        
+       return SCPanel;
+}        
+   
+    /****************************************
+     * This will create the Search 
+     *panel in the LdapConfigGui
+     ***************************************/
+    
+    private JPanel createSearchPanel() {
+        VerticalPanel searchPanel = new VerticalPanel();
+ 
+        JPanel searchBPanel = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("searchbase"));
+        label.setLabelFor(searchbase);
+        searchBPanel.add(label, BorderLayout.WEST);
+        searchBPanel.add(searchbase, BorderLayout.CENTER);
+ 
+        JPanel searchFPanel  = new JPanel(new BorderLayout(5, 0));
+        JLabel label20 = new JLabel(JMeterUtils.getResString("searchfilter"));
+        label20.setLabelFor(searchfilter);
+        searchFPanel.add(label20, BorderLayout.WEST);
+        searchFPanel.add(searchfilter, BorderLayout.CENTER);
+        
+        searchPanel.add(searchBPanel);
+        searchPanel.add(searchFPanel);
+        searchPanel.add(createSCPanel());
+       return searchPanel;
+    }
+
+    /****************************************
+     * This will create the Moddn 
+     *panel in the LdapConfigGui
+     ***************************************/
+    
+    private JPanel createModdnPanel() {
+        VerticalPanel modPanel = new VerticalPanel();
+ 
+        JPanel renamePanel = new JPanel(new BorderLayout(5, 0));
+        JLabel labelmod = new JLabel(JMeterUtils.getResString("modddn"));
+        labelmod.setLabelFor(modddn);
+        renamePanel.add(labelmod, BorderLayout.WEST);
+        renamePanel.add(modddn, BorderLayout.CENTER);
+ 
+        JPanel rename2Panel  = new JPanel(new BorderLayout(5, 0));
+        JLabel labelmod2 = new JLabel(JMeterUtils.getResString("newdn"));
+        labelmod2.setLabelFor(newdn);
+        rename2Panel.add(labelmod2, BorderLayout.WEST);
+        rename2Panel.add(newdn, BorderLayout.CENTER);
+        
+        modPanel.add(renamePanel);
+        modPanel.add(rename2Panel);
+       return modPanel;
+    }
+
+    /****************************************
+     * This will create the Delete
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createDeletePanel() {
+        VerticalPanel panel = new VerticalPanel();
+        JPanel deletePanel = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("delete"));
+        label.setLabelFor(delete);
+        deletePanel.add(label, BorderLayout.WEST);
+        deletePanel.add(delete, BorderLayout.CENTER);
+        panel.add(deletePanel);
+        return panel;
+    }
+
+    /****************************************
+     * This will create the Add test
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createAddPanel() {
+        JPanel addPanel = new JPanel(new BorderLayout(5,0));
+        JPanel addInnerPanel  = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("entrydn"));
+        label.setLabelFor(add);
+        addInnerPanel.add(label, BorderLayout.WEST);
+        addInnerPanel.add(add, BorderLayout.CENTER);
+        addPanel.add(addInnerPanel,BorderLayout.NORTH);
+        addPanel.add(tableAddPanel,BorderLayout.CENTER);
+        return addPanel;
+    }
+
+    /****************************************
+     * This will create the Modify
+     *panel in the LdapConfigGui
+     ***************************************/
+    private JPanel createModifyPanel() {
+        JPanel modifyPanel = new JPanel(new BorderLayout(5,0));
+        JPanel modifyInnerPanel  = new JPanel(new BorderLayout(5, 0));
+        JLabel label = new JLabel(JMeterUtils.getResString("entrydn"));
+        label.setLabelFor(modify);
+        modifyInnerPanel.add(label, BorderLayout.WEST);
+        modifyInnerPanel.add(modify, BorderLayout.CENTER);
+        modifyPanel.add(modifyInnerPanel,BorderLayout.NORTH);
+        modifyPanel.add(tableModifyPanel,BorderLayout.CENTER);
+        return modifyPanel;
+    }
+
+    /****************************************
+     * This will create the user defined test
+     * panel for create or modify or delete or search
+     * based on the panel selected in the itemevent
+     * in the LdapConfigGui
+     ***************************************/
+    private JPanel testPanel() {
+        cards = new JPanel(new CardLayout());
+        cards.add(new JPanel(),"");
+        cards.add(createAddPanel(),"Add");
+        cards.add(createModifyPanel(),"Modify");
+        cards.add(createModdnPanel(),"Rename");
+        cards.add(createDeletePanel(),"Delete");
+        cards.add(createSearchPanel(),"Search");
+        cards.add(createBindPanel(),"Bind");
+        cards.add(createComparePanel(),"Compare");
+        cards.add(createSbindPanel(),"Sbind");
+        return cards;
+    }
+
+
+    /****************************************
+     * This will create the test panel
+     *in the LdapConfigGui
+     ***************************************/
+    private JPanel createTestPanel() {
+        JPanel testPanel = new JPanel(new BorderLayout());
+        testPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("test_configuration")));
+
+        testPanel.add(new JLabel(JMeterUtils.getResString("testt")));
+        JPanel rowPanel = new JPanel();
+        JPanel row2Panel = new JPanel();
+
+        rowPanel.add(bind);
+        bGroup.add(bind);
+        rowPanel.add(unbind);
+        bGroup.add(unbind);
+        rowPanel.add(sbind);
+        bGroup.add(sbind);
+        rowPanel.add(rename);
+        bGroup.add(rename);
+        row2Panel.add(addTest);
+        bGroup.add(addTest);
+        row2Panel.add(deleteTest);                
+        bGroup.add(deleteTest);
+        row2Panel.add(searchTest);
+        bGroup.add(searchTest);
+        row2Panel.add(compare);
+        bGroup.add(compare);
+        row2Panel.add(modifyTest);
+        bGroup.add(modifyTest);
+        testPanel.add(rowPanel,BorderLayout.NORTH);
+        testPanel.add(row2Panel,BorderLayout.SOUTH);
+        return testPanel;
+    }
+      
+    /****************************************
+     * This will initalise
+     *all the panel in the LdapConfigGui
+     ***************************************/
+    private void init() {
+        bind.addItemListener(this);
+        sbind.addItemListener(this);
+        unbind.addItemListener(this);
+        compare.addItemListener(this);
+        addTest.addItemListener(this);
+        modifyTest.addItemListener(this);
+        rename.addItemListener(this);
+        deleteTest.addItemListener(this);
+        searchTest.addItemListener(this);
+        setLayout(new BorderLayout(0, 5));
+        VerticalPanel mainPanel = new VerticalPanel();
+        if(displayName) {
+            mainPanel.setBorder(makeBorder());
+            add(makeTitlePanel(),BorderLayout.NORTH);
+        }
+            mainPanel.add(createTestPanel());
+            mainPanel.add(testPanel());
+            add(mainPanel,BorderLayout.CENTER);
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java	9 Aug 2003 11:34:25 -0000
@@ -0,0 +1,138 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.control.gui;
+import java.awt.BorderLayout;
+
+import javax.swing.BorderFactory;
+import javax.swing.JPanel;
+
+import org.apache.jmeter.config.gui.LoginConfigGui;
+import org.apache.jmeter.gui.util.VerticalPanel;
+import org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui;
+import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
+import org.apache.jmeter.protocol.ldap.sampler.LdapExtClient;
+import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.util.JMeterUtils;
+
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ *
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * Based on the work of:
+ *@author    T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+ *@created    Apr 29 2003 11:00 AM
+ *@company    Sip Technologies and Exports Ltd.
+ *@version   1.0
+ ***************************************/
+
+public class LdapExtTestSamplerGui extends AbstractSamplerGui {
+    private LoginConfigGui loginPanel;
+    private LdapExtConfigGui ldapDefaultPanel;
+
+    /****************************************
+     * !ToDo (Constructor description)
+     ***************************************/
+    public LdapExtTestSamplerGui() {
+        init();
+    }
+
+    /**
+     * A newly created component can be initialized with the contents of
+     * a Test Element object by calling this method.  The component is
+     * responsible for querying the Test Element object for the
+     * relevant information to display in its GUI.
+     *
+     * @param element the TestElement to configure 
+     */
+    public void configure(TestElement element) {
+        super.configure(element);
+        ldapDefaultPanel.configure(element);
+    }
+
+    public TestElement createTestElement() {
+        LDAPExtSampler sampler = new LDAPExtSampler();
+        modifyTestElement(sampler);
+        return sampler;
+    }
+
+    /**
+     * Modifies a given TestElement to mirror the data in the gui components.
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
+     */
+    public void modifyTestElement(TestElement sampler) {
+        sampler.clear();
+        ((LDAPExtSampler)sampler).addTestElement(ldapDefaultPanel.createTestElement());
+        this.configureTestElement(sampler);
+    }
+
+    public String getStaticLabel() {
+        return JMeterUtils.getResString("Ldapext_testing_title");
+    }
+    
+    private void init() {
+        setLayout(new BorderLayout(0, 5));
+        setBorder(makeBorder());
+        add(makeTitlePanel(),BorderLayout.NORTH);
+        // MAIN PANEL
+        JPanel mainPanel = new JPanel(new BorderLayout(0, 5));
+        ldapDefaultPanel = new LdapExtConfigGui(false);
+        mainPanel.add(ldapDefaultPanel);
+        add(mainPanel,BorderLayout.CENTER);
+    }
+}
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java	9 Aug 2003 11:34:25 -0000
@@ -0,0 +1,829 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.util.*;
+import javax.naming.NamingException;
+import javax.naming.NoPermissionException;
+import javax.naming.directory.Attribute;
+import javax.naming.directory.BasicAttribute;
+import javax.naming.directory.BasicAttributes;
+import javax.naming.directory.DirContext;
+import javax.naming.directory.InitialDirContext;
+import javax.naming.directory.ModificationItem;
+import javax.naming.NamingEnumeration;
+
+import org.apache.jmeter.config.Argument;
+import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.config.LoginConfig;
+import org.apache.jmeter.protocol.ldap.config.LdapExtConfig;
+import org.apache.jmeter.protocol.ldap.control.gui.LdapExtTestSamplerGui;
+import org.apache.jmeter.protocol.ldap.config.gui.LDAPArgument;
+import org.apache.jmeter.protocol.ldap.config.gui.LDAPArguments;
+import org.apache.jmeter.protocol.ldap.sampler.LdapExtClient;
+import org.apache.jmeter.samplers.AbstractSampler;
+import org.apache.jmeter.samplers.Entry;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.BooleanProperty;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
+
+
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ *
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * Based on the work of:
+ *@author    T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+ *@created    Apr 29 2003 11:00 AM
+ *@company    Sip Technologies and Exports Ltd.
+ *@version   1.0
+ ***************************************/
+
+/*****************************************************
+ * Ldap Sampler class is main class for the LDAP test.
+ * This will control all the test available in the LDAP Test.
+ *****************************************************/
+
+public class LDAPExtSampler extends AbstractSampler  {
+
+    transient private static Logger log = Hierarchy.getDefaultHierarchy()
+    .getLoggerFor("jmeter.protocol.ldap");
+
+    public final static String SERVERNAME = "servername";
+    public final static String PORT = "port";
+    public final static String ROOTDN = "rootdn";
+    public final static String TEST = "test";
+    public final static String ADD = "add";
+    public final static String MODIFY = "modify";
+    public final static String BIND = "bind";
+    public final static String UNBIND = "unbind";
+    public final static String DELETE = "delete";             
+    public final static String SEARCHBASE = "search";
+    public final static String SEARCHFILTER = "searchfilter";
+    public final static String ARGUMENTS = "arguments";
+    public final static String BASE_ENTRY_DN = "base_entry_dn";
+    public final static String SCOPE = "scope";
+    public final static String COUNTLIM = "countlimit";
+    public final static String TIMELIM = "timelimit";
+    public final static String ATTRIBS = "attributes";
+    public final static String RETOBJ = "return_object";
+    public final static String DEREF = "deref_aliases";
+    public final static String USERDN = "user_dn";
+    public final static String USERPW = "user_pw";
+    public final static String SBIND = "sbind";
+    public final static String COMPARE = "compare";
+    
+    public final static String SUSERDN = "suser_dn";
+    public final static String SUSERPW = "suser_pw";
+    public final static String COMPAREDN = "comparedn";
+    public final static String COMPAREFILT = "comparefilt";
+
+    public final static String RENAME = "rename";
+    public final static String MODDDN = "modddn";
+    public final static String NEWDN = "newdn";
+    //For In build test case using this counter 
+    //create the new entry in the server
+    public static int counter=0;
+    
+    private DirContext dirContext;
+    private  LdapExtClient temp_client ;
+    public static Hashtable ldapConnections=new Hashtable();
+    public static Hashtable ldapContexts=new Hashtable();
+   
+ 
+    /************************************************************
+     *  !ToDo (Constructor description)
+     ***********************************************************/
+    public LDAPExtSampler()
+    {
+    }
+
+
+    /************************************************************
+     *  
+     ***********************************************************/
+
+    public void addCustomTestElement(TestElement element)
+    {
+        if(element instanceof LdapExtConfig || element instanceof LoginConfig)
+        {
+            mergeIn(element);
+        }
+    }
+
+    /************************************************************
+     *  Gets the username attribute of the LDAP object
+     *
+     *@return    The username
+     *************************************************************/
+
+    public String getUserDN()
+    {
+        return getPropertyAsString(USERDN);
+    }
+	
+    /************************************************************
+     *  Sets the username attribute of the LDAP object
+     *
+     *@return    The username
+     *************************************************************/
+
+    public void SetUserDN(String newUserDN)
+    {
+        setProperty(new StringProperty(USERDN, newUserDN));
+    }
+	
+    /************************************************************
+     *  Gets the password attribute of the LDAP object
+     *
+     *@return    The password
+     *************************************************************/
+
+    public String getUserPw()
+    {
+        return getPropertyAsString(USERPW);
+    }
+
+    /************************************************************
+     *  Gets the password attribute of the LDAP object
+     *
+     *@return    The password
+     *************************************************************/
+
+    public void setUserPw(String newUserPw)
+    {
+        setProperty(new StringProperty(USERPW, newUserPw));
+    }
+
+    /************************************************************
+     *  Gets the username attribute of the LDAP object
+     *
+     *@return    The username
+     *************************************************************/
+
+    public String getSuserDN()
+    {
+        return getPropertyAsString(SUSERDN);
+    }
+	
+    /************************************************************
+     *  Sets the username attribute of the LDAP object
+     *
+     *@return    The username
+     *************************************************************/
+
+    public void SetSuserDN(String newUserDN)
+    {
+        setProperty(new StringProperty(SUSERDN, newUserDN));
+    }
+	
+    /************************************************************
+     *  Gets the password attribute of the LDAP object
+     *
+     *@return    The password
+     *************************************************************/
+
+    public String getSuserPw()
+    {
+        return getPropertyAsString(SUSERPW);
+    }
+
+    /************************************************************
+     *  Gets the password attribute of the LDAP object
+     *
+     *@return    The password
+     *************************************************************/
+
+    public void setSuserPw(String newUserPw)
+    {
+        setProperty(new StringProperty(SUSERPW, newUserPw));
+    }
+
+    /************************************************************
+     *  Sets the Servername attribute of the ServerConfig object
+     *
+     *@param  servername  The new servername value
+     ***********************************************************/
+    public void setServername(String servername) {
+        setProperty(new StringProperty(SERVERNAME, servername));
+    }
+
+    /************************************************************
+     *  Sets the Port attribute of the ServerConfig object
+     *
+     *@param  port  The new Port value
+     ***********************************************************/
+    public void setPort(String port) {
+        setProperty(new StringProperty(PORT, port));
+    }
+
+
+    /************************************************************
+     *  Gets the servername attribute of the LDAPSampler object
+     *
+     *@return    The Servername value
+     ***********************************************************/
+
+    public String getServername()
+    {
+        return getPropertyAsString(SERVERNAME);
+    }
+	
+    /************************************************************
+     *  Gets the Port attribute of the LDAPSampler object
+     *
+     *@return    The Port value
+     *************************************************************/
+
+    public String getPort()
+    {
+        return getPropertyAsString(PORT);
+    }
+	
+    /************************************************************
+     *  Sets the Rootdn attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new rootdn value
+     ***********************************************************/
+    public void setRootdn(String newRootdn)
+    {
+        this.setProperty(ROOTDN,newRootdn);
+    }
+    /************************************************************
+     *  Gets the Rootdn attribute of the LDAPSampler object
+     *
+     *@return    The Rootdn value
+     ***********************************************************/
+    public String getRootdn() {
+        return getPropertyAsString(ROOTDN);
+    }
+
+    /************************************************************
+     *  Gets the search scope attribute of the LDAPSampler object
+     *
+     *@return    The scope value
+     ***********************************************************/
+    public String getScope() {
+        return getPropertyAsString(SCOPE);
+    }
+
+    /************************************************************
+     *  Sets the search scope attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new scope value
+     ***********************************************************/
+    public void setScope(String newScope)
+    {
+        this.setProperty(SCOPE,newScope);
+    }
+     /************************************************************
+     *  Gets the size limit attribute of the LDAPSampler object
+     *
+     *@return    The scope value
+     ***********************************************************/
+    public String getCountlim() {
+        return getPropertyAsString(COUNTLIM);
+    }
+
+    /************************************************************
+     *  Sets the size limit attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new scope value
+     ***********************************************************/
+    public void setCountlim(String newClim)
+    {
+        this.setProperty(COUNTLIM,newClim);
+    }
+    
+     /************************************************************
+     *  Gets the time limit attribute of the LDAPSampler object
+     *
+     *@return    The scope value
+     ***********************************************************/
+    public String getTimelim() {
+        return getPropertyAsString(TIMELIM);
+    }
+
+    /************************************************************
+     *  Sets the time limit attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new scope value
+     ***********************************************************/
+    public void setTimelim(String newTlim)
+    {
+        this.setProperty(TIMELIM,newTlim);
+    }
+    
+     /************************************************************
+     *  Gets the return objects attribute of the LDAPSampler object
+     *
+     *@return    The scope value
+     ***********************************************************/
+    public boolean getRetobj() {
+        return getPropertyAsBoolean(RETOBJ);
+    }
+
+    /************************************************************
+     *  Sets the return objects attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new scope value
+     ***********************************************************/
+    public void setRetobj(String newRobj)
+    {
+        this.setProperty(RETOBJ,newRobj);
+    }
+    
+    /************************************************************
+     *  Gets the search scope attribute of the LDAPSampler object
+     *
+     *@return    The scope value
+     ***********************************************************/
+    public boolean getDeref() {
+        return getPropertyAsBoolean(DEREF);
+    }
+
+    /************************************************************
+     *  Sets the search scope attribute of the LDAPSampler object
+     *
+     *@param  rootdn  The new scope value
+     ***********************************************************/
+    public void setDeref(String newDref)
+    {
+        this.setProperty(DEREF,newDref);
+    }
+    
+  /************************************************************
+     *  Sets the Test attribute of the LdapConfig object
+     *
+     *@param  Test  The new test value(Add,Modify,Delete  and search)
+     ***********************************************************/
+    public void setTest(String newTest) {
+        this.setProperty(TEST,newTest);
+    }
+    
+    /************************************************************
+     *  Gets the test attribute of the LDAPSampler object
+     *
+     *@return    The test value (Add,Modify,Delete  and search)
+     ***********************************************************/
+    public String getTest()
+    {
+        return getPropertyAsString(TEST);
+    }
+
+   /************************************************************
+     *  Sets the Test attribute of the LdapConfig object
+     *
+     *@param  Test  The new test value(Add,Modify,Delete  and search)
+     ***********************************************************/
+    public void setAttrs(String newAttrs) {
+        this.setProperty(ATTRIBS,newAttrs);
+    }
+    
+    /************************************************************
+     *  Gets the test attribute of the LDAPSampler object
+     *
+     *@return    The test value (Add,Modify,Delete  and search)
+     ***********************************************************/
+    public String getAttrs()
+    {
+        return getPropertyAsString(ATTRIBS);
+    }
+
+
+    /************************************************************
+     *  Sets the Base Entry DN attribute of the LDAPSampler object
+     *
+     *@param  value  The  new Base entry DN value 
+     ***********************************************************/
+    public void setBaseEntryDN(String  newbaseentry) {
+        setProperty(new StringProperty(BASE_ENTRY_DN, newbaseentry));
+    }
+
+    /************************************************************
+     *  Gets the BaseEntryDN attribute of the LDAPSampler object
+     *
+     *@return    The  Base entry DN value
+     ***********************************************************/
+    public String getBaseEntryDN() {
+        return getPropertyAsString(BASE_ENTRY_DN);
+    }
+
+    /************************************************************
+     *  Sets the Arguments attribute of the LdapConfig object
+     *  This will collect values from the table for user defined test
+     *  case 
+     *@param  value  The  arguments 
+     ***********************************************************/
+    public void setArguments(Arguments value)
+    {
+        setProperty(new TestElementProperty(ARGUMENTS, value));
+    }
+
+    /************************************************************
+     *  Gets the Arguments attribute of the LdapConfig object
+     *
+     *@return    The  arguments
+     *           user defined test  case
+     ***********************************************************/
+    public Arguments getArguments()
+    {
+        return (Arguments) getProperty(ARGUMENTS).getObjectValue();
+    }
+	
+   /************************************************************
+     *  Gets the LDAPArguments attribute of the LdapConfig object
+     *
+     *@return    The  LDAParguments
+     *           user defined modify test  case
+     ***********************************************************/
+    public LDAPArguments getLDAPArguments()
+    {
+        return (LDAPArguments) getProperty(ARGUMENTS).getObjectValue();
+    }
+	
+
+    /************************************************************
+     * Collect all the value from the table (Arguments), using  this
+     * create the basicAttributes 
+     * This will create the Basic Attributes for the User defined 
+     * TestCase  for Add Test
+     *@return    The  BasicAttributes
+     ***********************************************************/
+    public BasicAttributes getUserAttributes() {
+        BasicAttributes attrs = new BasicAttributes(true);
+        Attribute attr;
+        PropertyIterator iter = getArguments().iterator();
+         
+        while (iter.hasNext()) {
+            Argument item = (Argument) iter.next().getObjectValue();
+            attr=attrs.get(item.getName());
+            if (attr == null ) {
+                 attr = getBasicAttribute( item.getName(),item.getValue());
+            } else {
+            	attr.add(item.getValue());
+            }
+            attrs.put(attr);
+        }
+        return attrs;
+    }
+
+
+    /************************************************************
+     * Collect all the value from the table (Arguments), using  this
+     * create the basicAttributes 
+     * This will create the Basic Attributes for the User defined 
+     * TestCase for Modify test
+     *@return    The  BasicAttributes
+     ***********************************************************/
+    public ModificationItem[] getUserModAttributes() {
+        ModificationItem[] mods =new  ModificationItem[getLDAPArguments().getArguments().size()];
+        boolean add =true;
+        BasicAttributes attrs = new BasicAttributes(true);
+        BasicAttribute attr;
+        PropertyIterator iter = getLDAPArguments().iterator();
+        int count =0;
+        while (iter.hasNext()) {
+            LDAPArgument item = (LDAPArgument) iter.next().getObjectValue();
+            if ((item.getValue()).equals("")) {
+                 attr = new BasicAttribute(item.getName());
+            } else {
+               attr = getBasicAttribute( item.getName(),item.getValue());
+            }
+            if ("add".equals(item.getOpcode())) {
+            	mods[count ] = new ModificationItem(DirContext.ADD_ATTRIBUTE, attr);
+            } else {
+               if ("delete".equals(item.getOpcode())) {
+            	mods[count ] = new ModificationItem(DirContext.REMOVE_ATTRIBUTE, attr);
+               } else {
+            	  mods[count ] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, attr);
+               }
+            }
+            count+=1;
+        }
+        return mods;
+    }
+
+     /************************************************************
+     * Collect all the value from the table (Arguments), using  this
+     * create the Attributes 
+     * This will create the Basic Attributes for the User defined 
+     * TestCase for search test
+     *@return    The  BasicAttributes
+     ***********************************************************/
+    public String[] getRequestAttributes(String reqAttr) {
+    	int index;
+    	String[] mods;
+        int count =0;
+        if (reqAttr.length()==0) {
+        	return null;
+        }
+        if (!reqAttr.endsWith(";")) {
+        	reqAttr=reqAttr+";";
+        }
+    	String attr=reqAttr;
+    	
+    	while (attr.length() >0) {
+    		index=attr.indexOf(";");
+    		count+=1;
+    		attr=attr.substring(index+1);
+    	}
+    	if (count > 0) {
+           mods =new  String[count];
+           attr=reqAttr;
+           count=0;
+           while (attr.length() >0) {
+    		   index=attr.indexOf(";");
+     		   mods[count]=attr.substring(0,index);
+   		       count+=1;
+    		   attr=attr.substring(index+1);
+    	   }
+    	} else {
+    		mods=null;
+    	}
+        return mods;
+    }
+
+
+ 
+    /************************************************************
+     * This will create the Basic Attribute for the give name 
+     * value pair
+     *@return    The  BasicAttribute
+     ***********************************************************/
+    public BasicAttribute getBasicAttribute(String name,String value)
+    {
+        BasicAttribute attr = new BasicAttribute(name,value);
+        return attr;
+    }
+
+    /**
+     * Returns a formatted string label describing this sampler
+     * Example output:
+     *
+     * @return a formatted string label describing this sampler
+     */
+    public String getLabel() {
+        return ("ldap://" + this.getServername() +":"+getPort()+ "/" + this.getRootdn());
+    }
+
+
+    /************************************************************
+     * This will do the add test  for the User defined 
+     * TestCase
+     *@return    executed time for the give test case
+     ***********************************************************/
+    public long addTest(LdapExtClient ldap, DirContext dirContext)throws NoPermissionException,NamingException{
+        long start =0L;
+        long end =0L;
+            start = System.currentTimeMillis();
+            ldap.createTest(dirContext, getUserAttributes(), getPropertyAsString(BASE_ENTRY_DN));
+            end = System.currentTimeMillis();
+        return (end-start);
+    }
+         
+
+    /************************************************************
+     * This will do the delete test  for the User defined 
+     * TestCase
+     *@return    executed time for the give test case
+     ***********************************************************/
+    public long deleteTest(LdapExtClient ldap, DirContext dirContext)throws NoPermissionException,NamingException {
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        ldap.deleteTest(dirContext, getPropertyAsString(DELETE));
+        end = System.currentTimeMillis();
+        return (end-start);
+    }
+
+    /************************************************************
+     * This will do the search test  for the User defined 
+     * TestCase
+     *@return    executed time for the give test case
+     ***********************************************************/
+    public long searchTest(LdapExtClient ldap, DirContext dirContext)throws NoPermissionException,NamingException {
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        ldap.searchTest(dirContext, getPropertyAsString(SEARCHBASE),getPropertyAsString(SEARCHFILTER)
+        	,getPropertyAsInt(SCOPE),getPropertyAsLong(COUNTLIM),getPropertyAsInt(TIMELIM)
+        		,getRequestAttributes(getPropertyAsString(ATTRIBS)),getPropertyAsBoolean(RETOBJ),getPropertyAsBoolean(DEREF));
+        end = System.currentTimeMillis();
+        return (end-start);
+    }
+
+    /************************************************************
+     * This will do the modify test  for the User defined 
+     * TestCase
+     *@return    executed time for the give test case
+     ***********************************************************/
+    public long modifyTest(LdapExtClient ldap, DirContext dirContext)throws NoPermissionException,NamingException{
+        long start =0L;
+        long end =0L;
+            start = System.currentTimeMillis();
+            ldap.modifyTest(dirContext, getUserModAttributes(), getPropertyAsString(BASE_ENTRY_DN));
+            end = System.currentTimeMillis();
+        return (end-start);
+    }
+         
+    /************************************************************
+     * This will do the bind  for the User defined 
+     * Thread, this bind is used for the whole context
+     *@return    executed time for the bind op
+     ***********************************************************/
+    public long bindOp(LdapExtClient ldap, DirContext dirContext) throws Exception{
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        dirContext=ldap.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw());
+        ldapContexts.put(Thread.currentThread().getName(), dirContext);
+        end = System.currentTimeMillis();
+        
+        return (end-start);
+    }
+         
+    /************************************************************
+     * This will do the bind  for the User defined 
+     * TestCase  
+     *@return    executed time for the bind op
+     ***********************************************************/
+    public long singleBindOp() throws Exception{
+        long start =0L;
+        long end =0L;
+        LdapExtClient ldap_temp;
+        ldap_temp=new LdapExtClient();
+        start = System.currentTimeMillis();
+        ldap_temp.sbind(getServername(),getPort(),getRootdn(),getSuserDN(),getSuserPw());
+        end = System.currentTimeMillis();
+        
+        return (end-start);
+    }
+         
+    /************************************************************
+     * This will do a compare Opp for the User and attribute/value pair defined 
+     *@return    executed time for the compare op
+     ***********************************************************/
+    public long compareOp(LdapExtClient ldap, DirContext dirContext) throws Exception{
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        ldap.compare(dirContext, getPropertyAsString(COMPAREFILT), getPropertyAsString(COMPAREDN));
+        end = System.currentTimeMillis();
+        
+        return (end-start);
+    }
+         
+    /************************************************************
+     * This will do a moddn Opp for the User new DN defined 
+     *@return    executed time for the moddn op
+     ***********************************************************/
+    public long renameTest(LdapExtClient ldap, DirContext dirContext) throws Exception{
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        ldap.moddnOp(dirContext, getPropertyAsString(MODDDN), getPropertyAsString(NEWDN));
+        end = System.currentTimeMillis();
+        
+        return (end-start);
+    }
+         
+    /************************************************************
+     * This will do the unbind  for the User defined 
+     * TestCase  as well as inbuilt test case
+     *@return    executed time for the bind op
+     ***********************************************************/
+    public long unbindOp(LdapExtClient ldap, DirContext dirContext) throws Exception{
+        long start =0L;
+        long end =0L;
+        start = System.currentTimeMillis();
+        ldap.disconnect(dirContext);
+        end = System.currentTimeMillis();
+        log.error("context and LdapExtClients removed");
+        return (end-start);
+    }
+         
+    /************************************************************
+     *  !ToDo (Method description)
+     *
+     *@param  e  !ToDo (Parameter description)
+     *@return    !ToDo (Return description)
+     ***********************************************************/
+    public SampleResult sample(Entry e)
+    {
+        SampleResult res = new SampleResult();
+        boolean isSuccessful = false;
+        res.setSampleLabel(getLabel()+":"+getPropertyAsString(TEST)+":"+Thread.currentThread().getName()+";"+System.currentTimeMillis());
+        long time=0L;
+        temp_client =(LdapExtClient) ldapConnections.get(Thread.currentThread().getName());
+        dirContext =(DirContext) ldapContexts.get(Thread.currentThread().getName());
+        if (temp_client == null) {
+          	 temp_client =new LdapExtClient();
+             try {
+          	    dirContext=new InitialDirContext();
+             } catch (Exception err) {
+                log.error("Ldap client context creation - ",err);
+             }
+        	 ldapConnections.put(Thread.currentThread().getName(), temp_client);
+        }
+
+         try
+        {
+        	log.error("performing test: "+getPropertyAsString(TEST));
+            if (getPropertyAsString(TEST).equals("unbind")) {
+                time = unbindOp(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("bind")) {
+                time = bindOp(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("sbind")) {
+                time = singleBindOp();
+            }else if (getPropertyAsString(TEST).equals("compare")) {
+                time = compareOp(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("add")) {
+                time =addTest(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("delete")) {
+                time = deleteTest(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("modify")) {
+                time = modifyTest(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("rename")) {
+                time = renameTest(temp_client, dirContext);
+            }else if (getPropertyAsString(TEST).equals("search")) {
+                time = searchTest(temp_client, dirContext);
+            }
+            res.setResponseData("success full".getBytes());
+            isSuccessful = true;
+        }
+        catch (Exception ex) {
+            res.setResponseData(ex.toString().getBytes());
+            log.error("Ldap client - ",ex);
+            temp_client.disconnect(dirContext);
+            isSuccessful = false;
+            time = 0L;
+        }
+        // Calculate response time
+        res.setTime(time);
+        // Set if we were successful or not
+        res.setSuccessful(isSuccessful);
+        return res;
+    }
+}
\ No newline at end of file
Index: protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
===================================================================
RCS file: protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
diff -N protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java	9 Aug 2003 11:34:22 -0000
@@ -0,0 +1,219 @@
+/*
+ * ====================================================================
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2001 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in
+ * the documentation and/or other materials provided with the
+ * distribution.
+ *
+ * 3. The end-user documentation included with the redistribution,
+ * if any, must include the following acknowledgment:
+ * "This product includes software developed by the
+ * Apache Software Foundation (http://www.apache.org/)."
+ * Alternately, this acknowledgment may appear in the software itself,
+ * if and wherever such third-party acknowledgments normally appear.
+ *
+ * 4. The names "Apache" and "Apache Software Foundation" and
+ * "Apache JMeter" must not be used to endorse or promote products
+ * derived from this software without prior written permission. For
+ * written permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache",
+ * "Apache JMeter", nor may "Apache" appear in their name, without
+ * prior written permission of the Apache Software Foundation.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ */
+package org.apache.jmeter.protocol.ldap.sampler;
+
+import java.util.Hashtable;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+import javax.naming.NamingEnumeration;
+import javax.naming.NoPermissionException;
+import javax.naming.directory.BasicAttributes;
+import javax.naming.directory.DirContext;
+import javax.naming.directory.InitialDirContext;
+import javax.naming.directory.ModificationItem;
+import javax.naming.directory.SearchControls;
+
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
+
+
+/****************************************
+ * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ *
+ *@author    Dolf Smits(Dolf.Smits@Siemens.com)
+ *@created    Aug 09 2003 11:00 AM
+ *@company    Siemens Netherlands N.V..
+ *@version   1.0
+ * Based on the work of:
+ *@author    T.Elanjchezhiyan(chezhiyan@siptech.co.in)
+ *@created    Apr 29 2003 11:00 AM
+ *@company    Sip Technologies and Exports Ltd.
+ *@version   1.0
+ ***************************************/
+
+
+/*****************************************************
+ *Ldap Client class is main class to create ,modify,
+ *search and delete all the LDAP functionality available
+ *****************************************************/
+public class LdapExtClient
+{
+    transient private static Logger log = Hierarchy.getDefaultHierarchy()
+    .getLoggerFor("jmeter.protocol.ldap");
+   public final static String CONNECTOR = "ldap_con";
+    /**
+     *  Constructor for the LdapClient object
+     */
+    public LdapExtClient() {
+     }
+
+    /**
+     *  connect to server
+     *
+     *@param  host           Description of Parameter
+     *@param  username       Description of Parameter
+     *@param  password       Description of Parameter
+     *@exception  Exception  Description of Exception
+     */
+    public DirContext connect(String host,String port,String rootdn,String username,
+                        String password) throws Exception{
+        DirContext dirContext;
+        Hashtable env = new Hashtable();
+        env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
+        env.put(Context.PROVIDER_URL,"ldap://"+host +":"+port+"/"+rootdn);
+        env.put(Context.REFERRAL,"throw"); 
+        env.put("java.naming.batchsize", "0");
+        env.put(Context.SECURITY_CREDENTIALS,password);
+        env.put(Context.SECURITY_PRINCIPAL,username);
+        dirContext = new InitialDirContext(env);
+        log.error("new context created");
+        return dirContext;
+    }
+
+    public void sbind(String host,String port,String rootdn,String username,
+                        String password) throws Exception{
+        DirContext dirContext;
+        Hashtable env = new Hashtable();
+        env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");
+        env.put(Context.PROVIDER_URL,"ldap://"+host +":"+port+"/"+rootdn);
+        env.put(Context.REFERRAL,"throw"); 
+        env.put("java.naming.batchsize", "0");
+        env.put(Context.SECURITY_CREDENTIALS,password);
+        env.put(Context.SECURITY_PRINCIPAL,username);
+        dirContext = new InitialDirContext(env);
+    }
+
+    /**
+     *  disconnect from the server
+     */
+    public void disconnect(DirContext dirContext) {
+        try {
+            dirContext.close();
+        } catch (Exception e) {
+            log.error("Ldap client disconnect - ",e);
+        }
+    }
+
+   /************************************************************
+     * Filter  the data in the ldap directory for the given
+     * search base 
+     *@param  search base  where the search should start
+     *@param  search filter filter this value from the base  
+     ***********************************************************/
+    public void searchTest(DirContext dirContext, String searchBase, String searchFilter, int scope, long countlim, int timelim, String[] attrs, boolean retobj, boolean deref )
+        throws NoPermissionException,NamingException {
+        SearchControls searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref); 
+        dirContext.search(searchBase, searchFilter, searchcontrols);
+        log.error("search performed");
+    }
+
+   /************************************************************
+     * Filter  the data in the ldap directory for the given
+     * search base 
+     *@param  search base  where the search should start
+     *@param  search filter filter this value from the base  
+     ***********************************************************/
+   public void compare(DirContext dirContext, String filter, String entrydn) throws Exception{
+       SearchControls searchcontrols = new SearchControls(0, 1, 0, new String[0], false, false); 
+       dirContext.search(entrydn, filter, searchcontrols);
+    }
+
+   /************************************************************
+     * ModDN  the data in the ldap directory for the given
+     * search base 
+     *@param  search base  where the search should start
+     *@param  search filter filter this value from the base  
+     ***********************************************************/
+   public void moddnOp(DirContext dirContext, String ddn, String newdn) throws Exception{
+       dirContext.rename(ddn, newdn);
+    }
+
+   /************************************************************
+     * Modify  the attribute in the ldap directory for the given
+     * string
+     *@param  ModificationItem  add all the entry in to the 
+     *                          ModificationItem
+     *@param  string  The  string (dn) value 
+     ***********************************************************/
+    public void modifyTest(DirContext dirContext, ModificationItem[] mods, String string)
+        throws NoPermissionException,NamingException {
+        	log.error("modifytest geet lopen");
+        dirContext.modifyAttributes(string, mods);
+        	log.error("modifytest ging lopen");
+        
+     }
+
+    /************************************************************
+     * Create the attribute in the ldap directory for the given
+     * string
+     *@param  basicattributes  add all the entry in to the 
+     *                          basicattribute
+     *@param  string  The  string (dn) value 
+     ***********************************************************/
+    public void createTest(DirContext dirContext, BasicAttributes basicattributes, String string) 
+        throws NoPermissionException,NamingException {
+        dirContext.createSubcontext(string, basicattributes);
+    }
+        
+    /************************************************************
+     * Delete the attribute from the ldap directory
+     *@param  value  The  string (dn) value 
+     ***********************************************************/
+    public void deleteTest(DirContext dirContext, String string) throws 
+    NoPermissionException,NamingException {
+        dirContext.destroySubcontext(string);
+    }
+}
\ No newline at end of file
