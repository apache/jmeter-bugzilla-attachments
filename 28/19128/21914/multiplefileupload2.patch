Index: test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java	(revision 653098)
+++ test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 
 public class TestHttpRequestHdr  extends JMeterTestCase {
     public TestHttpRequestHdr(String name) {
@@ -465,9 +466,10 @@
         // Check arguments
         Arguments arguments = s.getArguments();
         assertEquals(0, arguments.getArgumentCount());
-        assertEquals(fileFieldValue, s.getFileField());
-        assertEquals(fileName, s.getFilename());
-        assertEquals(mimeType, s.getMimetype());
+        HTTPFileArg file = s.getFirstHTTPFileArg();
+        assertEquals(fileFieldValue, file.getParamName());
+        assertEquals(fileName, file.getPath());
+        assertEquals(mimeType, file.getMimeType());
     }        
 
     private String createMultipartFormBody(String titleValue, String descriptionValue, String contentEncoding, boolean includeExtraHeaders, String boundary, String endOfLine) {
Index: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java	(revision 653098)
+++ test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -1096,15 +1097,13 @@
     		String titleValue,
     		String descriptionField,
     		String descriptionValue,
-    		String fileField,
+    		String paramName,
     		File fileValue,
     		String fileMimeType) {
     	// Set the form data
     	setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);
     	// Set the file upload data
-    	httpSampler.setFileField(fileField);
-    	httpSampler.setFilename(fileValue.getAbsolutePath());
-    	httpSampler.setMimetype(fileMimeType);    	
+    	httpSampler.addHTTPFileArg(new HTTPFileArg(fileValue.getAbsolutePath(), paramName, fileMimeType));
     }
 
     /**
Index: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java	(revision 653098)
+++ test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java	(working copy)
@@ -36,6 +36,7 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -586,15 +587,11 @@
      * 
      * @param httpSampler
      */
-    private void setupFilepart(HTTPSampler httpSampler, String fileField, File file, String mimeType) {
-        httpSampler.setFileField(fileField);
-        if(file != null) {
-            httpSampler.setFilename(file.getAbsolutePath());
-        }
-        else {
-            httpSampler.setFilename("");
-        }
-        httpSampler.setMimetype(mimeType);
+    private void setupFilepart(HTTPSampler httpSampler, String paramName, File file, String mimeType) {
+        String path = (file != null)
+            ? file.getAbsolutePath()
+            : "";
+         httpSampler.setHTTPFileArg(new HTTPFileArg(path, paramName, mimeType));
     }
 
     /**
Index: test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java	(revision 0)
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.sampler;
+
+import java.net.URLConnection;
+import junit.framework.TestCase;
+
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPConstants;
+
+/**
+ * @author Erhan Kesken
+ */
+public class PutWriterTest extends TestCase {
+
+	public PutWriterTest(String name) {
+		super(name);
+	}
+
+	public void testSetHeaders() throws Exception {
+		URLConnection uc = new NullURLConnection();
+		HTTPSampler sampler = new HTTPNullSampler();
+		sampler.setHTTPFileArg(new HTTPFileArg("file1", null, "mime1"));
+		PutWriter pw = new PutWriter();
+		pw.setHeaders(uc, sampler);
+		assertEquals("mime1", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
+		uc = new NullURLConnection();
+		sampler.setHTTPFileArg(new HTTPFileArg("file2", "param2", "mime2"));
+		pw.setHeaders(uc, sampler);
+		assertEquals("mime2", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java	(revision 653098)
+++ test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java	(working copy)
@@ -13,13 +13,15 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- * 
+ *
  */
 
 package org.apache.jmeter.protocol.http.sampler;
 
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
 
 import junit.framework.TestCase;
 
@@ -34,14 +36,20 @@
         HTTPSamplerBase sampler = new HTTPNullSampler();
         Arguments args;
         Argument arg;
-        
+        HTTPFileArgs files;
+        HTTPFileArg file;
+
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         sampler.parseArguments("");
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         sampler.parseArguments("name1");
         args = sampler.getArguments();
         assertEquals(1,args.getArgumentCount());
@@ -49,7 +57,9 @@
         assertEquals("name1",arg.getName());
         assertEquals("",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         sampler.parseArguments("name2=");
         args = sampler.getArguments();
         assertEquals(2,args.getArgumentCount());
@@ -57,7 +67,9 @@
         assertEquals("name2",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         sampler.parseArguments("name3=value3");
         args = sampler.getArguments();
         assertEquals(3,args.getArgumentCount());
@@ -65,7 +77,8 @@
         assertEquals("name3",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("value3",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
     }
 
     // Parse arguments all at once
@@ -73,29 +86,40 @@
         HTTPSamplerBase sampler = new HTTPNullSampler();
         Arguments args;
         Argument arg;
-        
+        HTTPFileArgs files;
+        HTTPFileArg file;
+
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         sampler.parseArguments("&name1&name2=&name3=value3");
         args = sampler.getArguments();
         assertEquals(3,args.getArgumentCount());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         arg=args.getArgument(0);
         assertEquals("name1",arg.getName());
         assertEquals("",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         arg=args.getArgument(1);
         assertEquals("name2",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
+
         arg=args.getArgument(2);
         assertEquals("name3",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("value3",arg.getValue());
-        
+        files = sampler.getHTTPFileArgs();
+        assertEquals(0,files.getHTTPFileArgCount());
     }
 
         public void testArgumentWithoutEquals() throws Exception {
@@ -212,4 +236,107 @@
             config.setDomain("www.apache.org");
             assertEquals("http://www.apache.org/index.html", config.getUrl().toString());
         }
+
+        public void testAddSetGetHTTPFileArgForUpload() {
+            HTTPSamplerBase sampler = new HTTPNullSampler();
+            sampler.addHTTPFileArg(new HTTPFileArg("file1"));
+            sampler.addHTTPFileArg(new HTTPFileArg("file2"));
+            HTTPFileArgs files = sampler.getHTTPFileArgs();
+            assertEquals(2, files.getHTTPFileArgCount());
+            HTTPFileArg file = files.getHTTPFileArg(0);
+            assertEquals("file1", file.getPath());
+            file = files.getHTTPFileArg(1);
+            assertEquals("file2", file.getPath());
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("file1", file.getPath());
+
+            sampler.setHTTPFileArg(new HTTPFileArg("file3", "param3", "mime3"));
+            files = sampler.getHTTPFileArgs();
+            assertEquals(1, files.getHTTPFileArgCount());
+            HTTPFileArg hfile = (HTTPFileArg) files.getHTTPFileArg(0);
+            assertEquals("file3", hfile.getPath());
+            assertEquals("param3", hfile.getParamName());
+            assertEquals("mime3", hfile.getMimeType());
+
+            HTTPFileArgs files2 = new HTTPFileArgs();
+            files2.addHTTPFileArg(new HTTPFileArg("file1"));
+            files2.addHTTPFileArg(new HTTPFileArg("file2"));
+            sampler.setHTTPFileArgs(files2);
+            files = sampler.getHTTPFileArgs();
+            assertEquals(2, files.getHTTPFileArgCount());
+            file = files.getHTTPFileArg(0);
+            assertEquals("file1", file.getPath());
+            file = files.getHTTPFileArg(1);
+            assertEquals("file2", file.getPath());
+        }
+
+        public void testGetSendHTTPFileArgAsPostBody() {
+            HTTPSamplerBase sampler = new HTTPNullSampler();
+            assertFalse(sampler.getSendFileAsPostBody());
+            sampler.addHTTPFileArg(new HTTPFileArg("file1"));
+            assertTrue(sampler.getSendFileAsPostBody());
+            sampler.addHTTPFileArg(new HTTPFileArg("file2"));
+            assertFalse(sampler.getSendFileAsPostBody());
+            sampler.setHTTPFileArg(new HTTPFileArg("file", null, "mime"));
+            assertTrue(sampler.getSendFileAsPostBody());
+            sampler.setHTTPFileArg(new HTTPFileArg("file", "param", "mime"));
+            assertFalse(sampler.getSendFileAsPostBody());
+        }
+
+        public void testSetAndGetFileField() {
+            HTTPSamplerBase sampler = new HTTPNullSampler();
+            sampler.setFileField("param");
+            assertEquals("param", sampler.getPropertyAsString(HTTPSamplerBase.FILE_FIELD));
+            HTTPFileArg file = sampler.getFirstHTTPFileArg();
+            assertEquals("param", file.getParamName());
+
+            sampler.setFileField("param2");
+            assertEquals("param2", sampler.getPropertyAsString(HTTPSamplerBase.FILE_FIELD));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("param2", file.getParamName());
+
+            sampler.addHTTPFileArg(new HTTPFileArg("path", "param3", null));
+            sampler.setFileField("param4");
+            assertEquals("param4", sampler.getPropertyAsString(HTTPSamplerBase.FILE_FIELD));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("param4", file.getParamName());
+        }
+
+        public void testSetAndGetFilename() {
+            HTTPSamplerBase sampler = new HTTPNullSampler();
+            sampler.setFilename("name");
+            assertEquals("name", sampler.getPropertyAsString(HTTPSamplerBase.FILE_NAME));
+            HTTPFileArg file = sampler.getFirstHTTPFileArg();
+            assertEquals("name", file.getPath());
+
+            sampler.setFilename("name2");
+            assertEquals("name2", sampler.getPropertyAsString(HTTPSamplerBase.FILE_NAME));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("name2", file.getPath());
+
+            sampler.addHTTPFileArg(new HTTPFileArg("name3", null, null));
+            sampler.setFilename("name4");
+            assertEquals("name4", sampler.getPropertyAsString(HTTPSamplerBase.FILE_NAME));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("name4", file.getPath());
+        }
+
+        public void testSetAndGetMimetype() {
+            HTTPSamplerBase sampler = new HTTPNullSampler();
+            sampler.setMimetype("mime");
+            assertEquals("mime", sampler.getPropertyAsString(HTTPSamplerBase.MIMETYPE));
+            HTTPFileArg file = sampler.getFirstHTTPFileArg();
+            assertEquals("mime", file.getMimeType());
+
+            sampler.setMimetype("mime2");
+            assertEquals("mime2", sampler.getPropertyAsString(HTTPSamplerBase.MIMETYPE));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("mime2", file.getMimeType());
+
+            sampler.addHTTPFileArg(new HTTPFileArg("name", null, "mime3"));
+            sampler.setMimetype("mime4");
+            assertEquals("mime4", sampler.getPropertyAsString(HTTPSamplerBase.MIMETYPE));
+            file = sampler.getFirstHTTPFileArg();
+            assertEquals("mime4", file.getMimeType());
+        }
 }
Index: test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java	(revision 0)
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.sampler;
+
+import java.net.URL;
+import java.net.URLConnection;
+import java.net.MalformedURLException;
+import java.util.Map;
+import java.util.Properties;
+
+/**
+ * Dummy URLConnection class for use by classes that need an
+ * URLConnection for junit tests.
+ *
+ * @author Erhan Kesken
+ */
+public final class NullURLConnection extends URLConnection {
+
+	private Map data = new Properties();
+
+	public NullURLConnection() throws MalformedURLException {
+		this(new URL("http://localhost"));
+	}
+
+	public NullURLConnection(URL url) {
+		super(url);
+	}
+
+	public void connect() {
+	}
+
+	public void setRequestProperty(String name, String value) {
+		data.put(name, value);
+	}
+
+	public String getRequestProperty(String name) {
+		return (String) data.get(name);
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java	(revision 653098)
+++ test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java	(working copy)
@@ -24,7 +24,7 @@
  * Dummy HTTPSampler class for use by classes that need an HTTPSampler, but that
  * don't need an actual sampler, e.g. for Parsing testing.
  */
-public final class HTTPNullSampler extends HTTPSamplerBase {
+public final class HTTPNullSampler extends HTTPSampler {
 
 	/*
 	 * (non-Javadoc)
Index: test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFileArgsPanel.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFileArgsPanel.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFileArgsPanel.java	(revision 0)
@@ -0,0 +1,186 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.gui;
+
+import java.util.Collection;
+import java.awt.Color;
+import java.awt.event.ActionEvent;
+
+import javax.swing.JButton;
+import javax.swing.JPanel;
+import javax.swing.JLabel;
+import javax.swing.JTable;
+
+import junit.framework.TestCase;
+
+import org.apache.jorphan.gui.ObjectTableModel;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
+import org.apache.jmeter.testelement.TestElement;
+
+/**
+ * @author Erhan Kesken
+ */
+public class TestHTTPFileArgsPanel extends TestCase {
+
+	/**
+	 * Create a new test.
+	 *
+	 * @param name
+	 *            the name of the test
+	 */
+	public TestHTTPFileArgsPanel(String name) {
+		super(name);
+		JMeterUtils.getProperties("testfiles/jmetertest.properties");
+	}
+
+	/**
+	 * Test constructors.
+	 *
+	 * @throws Exception
+	 *             if an exception occurred during the test
+	 */
+	public void testConstructors() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		assertEquals(JMeterUtils.getResString("user_defined_variables"), panel.getTableLabel().getText());
+		panel = new HTTPFileArgsPanel("hede");
+		assertEquals("hede", panel.getTableLabel().getText());
+		panel = new HTTPFileArgsPanel("hede", null);
+		assertEquals("hede", panel.getTableLabel().getText());
+		assertTrue("HTTPFileArgsPanel Functor", HTTPFileArgsPanel.testFunctors());
+	}
+
+	public void testGetLabelResource() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		assertEquals("user_defined_variables", panel.getLabelResource());
+	}
+
+	public void testGetMenuCategories() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		Collection menu = panel.getMenuCategories();
+		assertEquals(1, menu.size());
+		assertEquals("[menu_config_element]", menu.toString());
+	}
+
+	public void testCreateTestElement() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		TestElement te = panel.createTestElement();
+		assertEquals("", te.toString());
+		assertEquals("User Defined Variables", te.getName());
+		assertEquals("", te.getComment());
+	}
+
+	public void testModifyTestElement() throws Exception {
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg("file1");
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		panel.modifyTestElement(files);
+		assertEquals("User Defined Variables", files.getName());
+		assertEquals("", files.getComment());
+	}
+
+	public void testConfigure() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg(new HTTPFileArg("file1", "param1", "mime1"));
+		panel.configure(files);
+		JButton delete = panel.getDeleteButton();
+		assertTrue(delete.isEnabled());
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		HTTPFileArg file = (HTTPFileArg) tableModel.iterator().next();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("mime1", file.getMimeType());
+
+		files = new HTTPFileArgs();
+		panel.configure(files);
+		delete = panel.getDeleteButton();
+		assertFalse(delete.isEnabled());
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testClear() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg("file1");
+		panel.configure(files);
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		panel.clear();
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testClearGui() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg("file1");
+		panel.configure(files);
+		assertEquals("", panel.getName());
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		panel.clearGui();
+		assertEquals("User Defined Variables", panel.getName());
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testMakeLabelPanel() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel("hede", Color.GRAY);
+		JPanel lpanel = (JPanel) panel.makeLabelPanel();
+		assertEquals(Color.GRAY, lpanel.getBackground());
+		JLabel label = (JLabel) lpanel.getComponent(0);
+		assertEquals("hede", label.getText());
+	}
+
+	public void testAddDeleteFile() throws Exception {
+		HTTPFileArgsPanel panel = new HTTPFileArgsPanel();
+		panel.addFile("");
+		JTable table = panel.getTable();
+		ObjectTableModel tableModel = (ObjectTableModel) table.getModel();
+		JButton delete = panel.getDeleteButton();
+		ActionEvent ev = new ActionEvent(panel, 0, "delete");
+		assertTrue(delete.isEnabled());
+		assertEquals(1, tableModel.getRowCount());
+		table.setRowSelectionInterval(0, 0);
+		panel.actionPerformed(ev);
+		assertFalse(table.isEditing());
+		assertFalse(delete.isEnabled());
+		assertEquals(0, tableModel.getRowCount());
+
+		panel.addFile(""); panel.addFile(""); panel.addFile("");
+		assertEquals(3, tableModel.getRowCount());
+		table.setRowSelectionInterval(1, 1);
+		panel.actionPerformed(ev);
+		assertFalse(table.isEditing());
+		assertEquals(2, tableModel.getRowCount());
+		assertEquals(1, table.getSelectedRow());
+
+		panel.addFile("");
+		assertEquals(3, tableModel.getRowCount());
+		table.setRowSelectionInterval(2, 2);
+		panel.actionPerformed(ev);
+		assertFalse(table.isEditing());
+		assertEquals(2, tableModel.getRowCount());
+		assertEquals(1, table.getSelectedRow());
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java	(revision 0)
@@ -0,0 +1,130 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.config;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.config.Argument;
+import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
+
+/**
+ * @author Erhan Kesken
+ */
+public class MultipartUrlConfigTest extends TestCase {
+
+	public MultipartUrlConfigTest(String name) {
+		super(name);
+	}
+
+	public void testConstructors() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		assertEquals(0, muc.getArguments().getArgumentCount());
+		assertEquals(0, muc.getHTTPFileArgs().getHTTPFileArgCount());
+		muc = new MultipartUrlConfig("boundary");
+		assertEquals(0, muc.getArguments().getArgumentCount());
+		assertEquals(0, muc.getHTTPFileArgs().getHTTPFileArgCount());
+		assertEquals("boundary", muc.getBoundary());
+	}
+
+	public void testAddGetHTTPFileArgs() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		muc.addHTTPFileArg("file1", "param1", "mime1");
+		HTTPFileArgs files = muc.getHTTPFileArgs();
+		assertEquals(1, files.getHTTPFileArgCount());
+		HTTPFileArg file = (HTTPFileArg) files.iterator().next().getObjectValue();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("mime1", file.getMimeType());
+	}
+
+	public void testSetGetFilename() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		muc.setFilename("file");
+		assertEquals("file", muc.getFilename());
+		muc.addHTTPFileArg("file1", null, null);
+		muc.addHTTPFileArg("file2", null, null);
+		muc.setFilename("file3");
+		assertEquals("file3", muc.getFilename());
+		assertEquals(1, muc.getHTTPFileArgs().getHTTPFileArgCount());
+	}
+
+	public void testSetGetMimeType() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		muc.setMimeType("mime");
+		assertEquals("mime", muc.getMimeType());
+		muc.setHTTPFileArg(new HTTPFileArg("file1", "param1", null));
+		muc.addHTTPFileArg("file2", "param2", null);
+		muc.setMimeType("mime3");
+		assertEquals("file1", muc.getFilename());
+		assertEquals("mime3", muc.getMimeType());
+		assertEquals(1, muc.getHTTPFileArgs().getHTTPFileArgCount());
+	}
+
+	public void testSetGetFileFieldName() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		muc.setFileFieldName("param");
+		assertEquals("param", muc.getFileFieldName());
+		muc.setHTTPFileArg(new HTTPFileArg("file1", "param1", null));
+		muc.addHTTPFileArg("file2", "param2", null);
+		muc.setFileFieldName("param3");
+		assertEquals("file1", muc.getFilename());
+		assertEquals("param3", muc.getFileFieldName());
+		assertEquals(1, muc.getHTTPFileArgs().getHTTPFileArgCount());
+	}
+
+	public void testParseArguments() {
+		String queryString
+			= "Content-Disposition: form-data; name=\"aa\"\n"
+			+ "Content-Type: text/plain; charset=ISO-8859-1\n"
+			+ "Content-Transfer-Encoding: 8bit\n"
+			+ "\n"
+			+ "aa\n"
+			+ "--7d159c1302d0y0\n"
+			+ "Content-Disposition: form-data; name=\"xx\"\n"
+			+ "Content-Type: text/plain; charset=ISO-8859-1\n"
+			+ "Content-Transfer-Encoding: 8bit\n"
+			+ "\n"
+			+ "xx\n"
+			+ "--7d159c1302d0y0\n"
+			+ "Content-Disposition: form-data; name=\"param1\"; filename=\"file1\"\n"
+			+ "Content-Type: text/plain\n"
+			+ "Content-Transfer-Encoding: binary\n"
+			+ "\n"
+			+ "file content\n"
+			+ "\n";
+		MultipartUrlConfig muc = new MultipartUrlConfig("7d159c1302d0y0");
+		muc.parseArguments(queryString);
+		HTTPFileArgs files = muc.getHTTPFileArgs();
+		assertEquals(1, files.getHTTPFileArgCount());
+		HTTPFileArg file = (HTTPFileArg) files.iterator().next().getObjectValue();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("text/plain", file.getMimeType());
+		Arguments args = muc.getArguments();
+		assertEquals(2, args.getArgumentCount());
+		Argument arg = args.getArgument(0);
+		assertEquals("aa", arg.getName());
+		assertEquals("aa", arg.getValue());
+		arg = args.getArgument(1);
+		assertEquals("xx", arg.getName());
+		assertEquals("xx", arg.getValue());
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArg.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArg.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArg.java	(revision 0)
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import junit.framework.TestCase;
+
+/**
+ * @author Erhan Kesken
+ */
+public class TestHTTPFileArg extends TestCase {
+	public TestHTTPFileArg(String name) {
+		super(name);
+	}
+
+	public void testConstructors() throws Exception {
+		HTTPFileArg file = new HTTPFileArg();
+		assertEquals("no parameter failure", "", file.getPath());
+		assertEquals("no parameter failure", "", file.getParamName());
+		assertEquals("no parameter failure", "", file.getMimeType());
+		file = new HTTPFileArg("path");
+		assertEquals("single parameter failure", "path", file.getPath());
+		assertEquals("single parameter failure", null, file.getParamName());
+		assertEquals("single parameter failure", null, file.getMimeType());
+		file = new HTTPFileArg("path", "param", "mimetype");
+		assertEquals("two parameter failure", "path", file.getPath());
+		assertEquals("two parameter failure", "param", file.getParamName());
+		assertEquals("two parameter failure", "mimetype", file.getMimeType());
+		HTTPFileArg file2 = new HTTPFileArg(file);
+		assertEquals("copy constructor failure", "path", file2.getPath());
+		assertEquals("copy constructor failure", "param", file2.getParamName());
+		assertEquals("copy constructor failure", "mimetype", file2.getMimeType());
+	}
+
+	public void testGettersSetters() throws Exception {
+		HTTPFileArg file = new HTTPFileArg();
+		assertEquals("", file.getPath());
+		assertEquals("", file.getParamName());
+		assertEquals("", file.getMimeType());
+		file.setPath("path");
+		file.setParamName("param");
+		file.setMimeType("mimetype");
+		file.setHeader("header");
+		assertEquals("path", file.getPath());
+		assertEquals("param", file.getParamName());
+		assertEquals("mimetype", file.getMimeType());
+		assertEquals("header", file.getHeader());
+	}
+
+	public void testToString() throws Exception {
+		HTTPFileArg file = new HTTPFileArg("path1", "param1", "mimetype1");
+		assertEquals("path:'path1'|param:'param1'|mimetype:'mimetype1'", file.toString());
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java	(revision 0)
@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import java.util.List;
+import java.util.LinkedList;
+import junit.framework.TestCase;
+
+import org.apache.jmeter.testelement.property.PropertyIterator;
+
+/**
+ * @author Erhan Kesken
+ */
+public class TestHTTPFileArgs extends TestCase {
+	public TestHTTPFileArgs(String name) {
+		super(name);
+	}
+
+	public void testConstructors() throws Exception {
+		HTTPFileArgs files = new HTTPFileArgs();
+		assertEquals(0, files.getHTTPFileArgCount());
+	}
+
+	public void testAdding() throws Exception {
+		HTTPFileArgs files = new HTTPFileArgs();
+		assertEquals(0, files.getHTTPFileArgCount());
+		files.addHTTPFileArg("hede");
+		assertEquals(1, files.getHTTPFileArgCount());
+		assertEquals("hede", ((HTTPFileArg) files.iterator().next().getObjectValue()).getPath());
+		HTTPFileArg file = new HTTPFileArg("hodo");
+		files.addHTTPFileArg(file);
+		assertEquals(2, files.getHTTPFileArgCount());
+		PropertyIterator iter = files.iterator();
+		assertEquals("hede", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("hodo", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		files.addEmptyHTTPFileArg();
+		assertEquals(3, files.getHTTPFileArgCount());
+		iter = files.iterator();
+		assertEquals("hede", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("hodo", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+	}
+
+	public void testSetHTTPFileArgs() throws Exception {
+		List newHTTPFileArgs = new LinkedList();
+		newHTTPFileArgs.add(new HTTPFileArg("hede"));
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.setHTTPFileArgs((List) newHTTPFileArgs);
+		assertEquals(1, files.getHTTPFileArgCount());
+		assertEquals("hede", ((HTTPFileArg) files.iterator().next().getObjectValue()).getPath());
+	}
+
+	public void testRemoving() throws Exception {
+		HTTPFileArgs files = new HTTPFileArgs();
+		assertEquals(0, files.getHTTPFileArgCount());
+		files.addHTTPFileArg("hede");
+		assertEquals(1, files.getHTTPFileArgCount());
+		files.clear();
+		assertEquals(0, files.getHTTPFileArgCount());
+		files.addHTTPFileArg("file1");
+		files.addHTTPFileArg("file2");
+		files.addHTTPFileArg("file3");
+		HTTPFileArg file = new HTTPFileArg("file4");
+		files.addHTTPFileArg(file);
+		files.addHTTPFileArg("file5");
+		files.addHTTPFileArg("file6");
+		assertEquals(6, files.getHTTPFileArgCount());
+		files.removeHTTPFileArg("file3");
+		assertEquals(5, files.getHTTPFileArgCount());
+		PropertyIterator iter = files.iterator();
+		assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file4", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file5", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		files.removeHTTPFileArg(file);
+		assertEquals(4, files.getHTTPFileArgCount());
+		iter = files.iterator();
+		assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file5", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		files.removeHTTPFileArg(new HTTPFileArg("file5"));
+		assertEquals(3, files.getHTTPFileArgCount());
+		iter = files.iterator();
+		assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		files.removeHTTPFileArg(1);
+		assertEquals(2, files.getHTTPFileArgCount());
+		iter = files.iterator();
+		assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());
+		files.removeAllHTTPFileArgs();
+		assertEquals(0, files.getHTTPFileArgCount());
+	}
+
+	public void testToString() throws Exception {
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg("file1");
+		files.addHTTPFileArg("file2");
+		files.addHTTPFileArg("file3");
+		assertEquals("file1&file2&file3", files.toString());
+	}
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	(working copy)
@@ -418,9 +418,7 @@
                 // Set the form data
                 sampler.setArguments(urlConfig.getArguments());
                 // Set the file uploads
-                sampler.setFileField(urlConfig.getFileFieldName());
-                sampler.setFilename(urlConfig.getFilename());
-                sampler.setMimetype(urlConfig.getMimeType());
+                sampler.setHTTPFileArgs(urlConfig.getHTTPFileArgs());
             } else if (postData.trim().startsWith("<?")) {
                 // Not sure if this is needed anymore. I assume these requests
                 // do not have HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED as content type,
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java	(working copy)
@@ -25,6 +25,7 @@
 
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 
 /**
@@ -54,18 +55,21 @@
         String contentTypeHeader = connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);
         boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.length() > 0; 
 
+        HTTPFileArg file = sampler.getFirstHTTPFileArg();
         // If there are no arguments, we can send a file as the body of the request
+        // TODO: needs a multiple file upload scenerio
         if(sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
+            // If getSendFileAsPostBody returned true, it's sure that file is not null
             hasPutBody = true;
             if(!hasContentTypeHeader) {
                 // Allow the mimetype of the file to control the content type
-                if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                 }
             }
 
             // Create the content length we are going to write
-            File inputFile = new File(sampler.getFilename());
+            File inputFile = new File(file.getPath());
             contentLength = inputFile.length();
         }
         else if(sampler.getSendParameterValuesAsPostBody()) {
@@ -73,8 +77,10 @@
             // Allow the mimetype of the file to control the content type
             // This is not obvious in GUI if you are not uploading any files,
             // but just sending the content of nameless parameters
-            if(!hasContentTypeHeader && sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+            // TODO: needs a multiple file upload scenerio
+            if(!hasContentTypeHeader && sampler.getHTTPFileArgCount() == 1
+               && file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
             }
 
             // We create the post body content now, so we know the size
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java	(working copy)
@@ -30,7 +30,9 @@
 
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.CollectionProperty;
 
 /**
  * Class for setting the necessary headers for a POST request, and sending the
@@ -52,8 +54,6 @@
     protected byte[] formDataUrlEncoded;    
     /** The form data that is going to be sent in post body */
     protected byte[] formDataPostBody;
-    /** The start of the file multipart to be sent */
-    private byte[] formDataFileStartMultipart;
     /** The boundary string for multipart */
     private final String boundary;
     
@@ -84,7 +84,8 @@
 	public String sendPostData(URLConnection connection, HTTPSampler sampler) throws IOException {
         // Buffer to hold the post body, except file content
         StringBuffer postedBody = new StringBuffer(1000);
-        
+        CollectionProperty files = sampler.getHTTPFileArgsCollection();
+
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(sampler.getUseMultipartForPost()) {
@@ -98,24 +99,30 @@
             postedBody.append(new String(formDataPostBody, "UTF-8")); // $NON-NLS-1$
             
             // Add any files
-            if(sampler.hasUploadableFiles()) {
-                // First write the start multipart file
-                out.write(formDataFileStartMultipart);
-                // We get the posted bytes as UTF-8, since java is using UTF-8
-                postedBody.append(new String(formDataFileStartMultipart, "UTF-8")); // $NON-NLS-1$
-                
-                // Write the actual file content
-                writeFileToStream(sampler.getFilename(), out);
-                // We just add placeholder text for file content
-                postedBody.append("<actual file content, not shown here>"); // $NON-NLS-1$
-
-                // Write the end of multipart file
-                byte[] fileMultipartEndDivider = getFileMultipartEndDivider(); 
-                out.write(fileMultipartEndDivider);
-                // We get the posted bytes as UTF-8, since java is using UTF-8
-                postedBody.append(new String(fileMultipartEndDivider, "UTF-8")); // $NON-NLS-1$
+            if(files.size() > 0) {
+                PropertyIterator iter = files.iterator();
+                while (iter.hasNext()) {
+                    HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();
+                    // First write the start multipart file
+                    byte[] header = file.getHeader().getBytes();
+                    out.write(header);
+                    // We get the posted bytes as UTF-8, since java is using UTF-8
+                    postedBody.append(new String(header, "UTF-8")); // $NON-NLS-1$
+                    // Write the actual file content
+                    writeFileToStream(file.getPath(), out);
+                    // We just add placeholder text for file content
+                    postedBody.append("<actual file content, not shown here>"); // $NON-NLS-1$
+                    // Write the end of multipart file
+                    byte[] fileMultipartEndDivider = getFileMultipartEndDivider();
+                    out.write(fileMultipartEndDivider);
+                    // We get the posted bytes as UTF-8, since java is using UTF-8
+                    postedBody.append(new String(fileMultipartEndDivider, "UTF-8")); // $NON-NLS-1$
+                    if(iter.hasNext()) {
+                        out.write(CRLF);
+                        postedBody.append(new String(CRLF, "UTF-8"));
+                    }
+                }
             }
-
             // Write end of multipart
             byte[] multipartEndDivider = getMultipartEndDivider(); 
             out.write(multipartEndDivider);
@@ -129,7 +136,10 @@
             // If there are no arguments, we can send a file as the body of the request
             if(sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {
                 OutputStream out = connection.getOutputStream();
-                writeFileToStream(sampler.getFilename(), out);
+                // we're sure that there is one file because of
+                // getSendFileAsPostBody method's return value.
+                HTTPFileArg file = sampler.getFirstHTTPFileArg();
+                writeFileToStream(file.getPath(), out);
                 out.flush();
                 out.close();
 
@@ -158,7 +168,8 @@
             contentEncoding = ENCODING;
         }
         long contentLength = 0L;
-    	
+        CollectionProperty files = sampler.getHTTPFileArgsCollection();
+
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(sampler.getUseMultipartForPost()) {
@@ -199,19 +210,27 @@
             // Now we just construct any multipart for the files
             // We only construct the file multipart start, we do not write
             // the actual file content
-            if(sampler.hasUploadableFiles()) {
-                bos = new ByteArrayOutputStream();
-                // Write multipart for file
-                writeStartFileMultipart(bos, sampler.getFilename(), sampler.getFileField(), sampler.getMimetype());
-                bos.flush();
-                formDataFileStartMultipart = bos.toByteArray();
-                bos.close();
-                contentLength += formDataFileStartMultipart.length;
-                // Add also the length of the file content
-                File uploadFile = new File(sampler.getFilename());
-                contentLength += uploadFile.length();
-                // And the end of the file multipart
-                contentLength += getFileMultipartEndDivider().length;
+            if(files.size() > 0) {
+                PropertyIterator iter = files.iterator();
+                while (iter.hasNext()) {
+                    HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();
+                    // Write multipart for file
+                    bos = new ByteArrayOutputStream();
+                    writeStartFileMultipart(bos, file.getPath(), file.getParamName(), file.getMimeType());
+                    bos.flush();
+                    String header = bos.toString();
+                    file.setHeader(header);
+                    bos.close();
+                    contentLength += header.length();
+                    // Add also the length of the file content
+                    File uploadFile = new File(file.getPath());
+                    contentLength += uploadFile.length();
+                    // And the end of the file multipart
+                    contentLength += getFileMultipartEndDivider().length;
+                    if(iter.hasNext()) {
+                        contentLength += CRLF.length;
+                    }
+                }
             }
 
             // Add the end of multipart
@@ -232,18 +251,20 @@
             
             // If there are no arguments, we can send a file as the body of the request
             if(sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
+                // we're sure that there is one file because of
+                // getSendFileAsPostBody method's return value.
+                HTTPFileArg file = sampler.getFirstHTTPFileArg();
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
-                    if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                    if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
-                
                 // Create the content length we are going to write
-                File inputFile = new File(sampler.getFilename());
+                File inputFile = new File(file.getPath());
                 contentLength = inputFile.length();
             }
             else {
@@ -266,9 +287,11 @@
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
+                    // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
-                        if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                        HTTPFileArg file = sampler.getFirstHTTPFileArg();
+                        if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                             // TODO: is this the correct default?
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java	(working copy)
@@ -71,6 +71,7 @@
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.LoopbackHttpClientSocketFactory;
 import org.apache.jmeter.protocol.http.util.SlowHttpClientSocketFactory;
 import org.apache.jmeter.testelement.property.CollectionProperty;
@@ -287,10 +288,12 @@
             }
             
             // Add any files
-            if(hasUploadableFiles()) {
-                File inputFile = new File(getFilename());
+            PropertyIterator files = getHTTPFileArgsCollection().iterator();
+            while (files.hasNext()) {
+                HTTPFileArg file = (HTTPFileArg) files.next().getObjectValue();
+                File inputFile = new File(file.getPath());
                 // We do not know the char set of the file to be uploaded, so we set it to null
-                ViewableFilePart filePart = new ViewableFilePart(getFileField(), inputFile, getMimetype(), null);
+                ViewableFilePart filePart = new ViewableFilePart(file.getParamName(), inputFile, file.getMimeType(), null);
                 filePart.setCharSet(null); // We do not know what the char set of the file is
                 parts[partNo++] = filePart;
             }
@@ -338,20 +341,22 @@
             // This allows the user to specify his own content-type for a POST request
             Header contentTypeHeader = post.getRequestHeader(HEADER_CONTENT_TYPE);
             boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0; 
-
+            HTTPFileArg file = getFirstHTTPFileArg();
             // If there are no arguments, we can send a file as the body of the request
+            // TODO: needs a multiple file upload scenerio
             if(!hasArguments() && getSendFileAsPostBody()) {
+                // If getSendFileAsPostBody returned true, it's sure that file is not null
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
-                    if(getMimetype() != null && getMimetype().length() > 0) {
-                        post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                    if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                        post.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         post.setRequestHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
-                
-                FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(getFilename()),null); 
+
+                FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(file.getPath()),null);
                 post.setRequestEntity(fileRequestEntity);
                 
                 // We just add placeholder text for file content
@@ -376,9 +381,10 @@
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
+                    // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
-                        if(getMimetype() != null && getMimetype().length() > 0) {
-                            post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                        if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                            post.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                         	 // TODO - is this the correct default?
@@ -918,12 +924,15 @@
         // This allows the user to specify his own content-type for a POST request
         Header contentTypeHeader = put.getRequestHeader(HEADER_CONTENT_TYPE);
         boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0; 
+        HTTPFileArg file = getFirstHTTPFileArg();
 
         // If there are no arguments, we can send a file as the body of the request
+        // TODO: needs a multiple file upload scenerio
         if(!hasArguments() && getSendFileAsPostBody()) {
             hasPutBody = true;
                 
-            FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(getFilename()),null); 
+            // If getSendFileAsPostBody returned true, it's sure that file is not null
+            FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(file.getPath()),null);
             put.setRequestEntity(fileRequestEntity);
                 
             // We just add placeholder text for file content
@@ -982,8 +991,9 @@
                 // Allow the mimetype of the file to control the content type
                 // This is not obvious in GUI if you are not uploading any files,
                 // but just sending the content of nameless parameters
-                if(getMimetype() != null && getMimetype().length() > 0) {
-                    put.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                // TODO: needs a multiple file upload scenerio
+                if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                    put.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                 }
             }
             // Set the content length
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(working copy)
@@ -46,6 +46,8 @@
 import org.apache.jmeter.protocol.http.parser.HTMLParser;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
 import org.apache.jmeter.protocol.http.util.HTTPConstantsInterface;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
@@ -58,6 +60,7 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -78,12 +81,16 @@
 
 	public static final String ARGUMENTS = "HTTPsampler.Arguments"; // $NON-NLS-1$
 
+	public final static String FILE_ARGS = "HTTPsampler.Files"; // $NON-NLS-1$
+
 	public static final String AUTH_MANAGER = "HTTPSampler.auth_manager"; // $NON-NLS-1$
 
 	public static final String COOKIE_MANAGER = "HTTPSampler.cookie_manager"; // $NON-NLS-1$
 
 	public static final String HEADER_MANAGER = "HTTPSampler.header_manager"; // $NON-NLS-1$
 
+	//TODO: kept MIMETYPE for backward compatibility with old test
+	//plans, can be removed after enough time.
 	public static final String MIMETYPE = "HTTPSampler.mimetype"; // $NON-NLS-1$
 
 	public static final String DOMAIN = "HTTPSampler.domain"; // $NON-NLS-1$
@@ -129,12 +136,16 @@
     
 	public static final String USE_KEEPALIVE = "HTTPSampler.use_keepalive"; // $NON-NLS-1$
 
+	//TODO: kept FILE_NAME for backward compatibility with old test
+	//plans, can be removed after enough time.
 	public static final String FILE_NAME = "HTTPSampler.FILE_NAME"; // $NON-NLS-1$
     
     public static final String DO_MULTIPART_POST = "HTTPSampler.DO_MULTIPART_POST"; // $NON-NLS-1$
 
     /* Shown as Parameter Name on the GUI */
 	public static final String FILE_FIELD = "HTTPSampler.FILE_FIELD"; // $NON-NLS-1$
+	//TODO: kept FILE_FIELD for backward compatibility with old test
+	//plans, can be removed after enough time.
 
 //	public static final String FILE_DATA = "HTTPSampler.FILE_DATA"; // $NON-NLS-1$
 
@@ -225,34 +236,42 @@
     
     public HTTPSamplerBase() {
 		setArguments(new Arguments());
+		setHTTPFileArgs(new HTTPFileArgs());
 	}
 
     /**
      * The name parameter to be applied to the file
      */
 	public void setFileField(String value) {
-		setProperty(FILE_FIELD, value);
+		setHTTPFileArg("HTTPSamplerBase.setFileField", null, value, null);
+		setProperty(FILE_FIELD, value); //kept this line to let it possible to create
+										//backward compatible test plans
 	}
 
     /**
      * The name parameter to be applied to the file
      */
 	public String getFileField() {
-		return getPropertyAsString(FILE_FIELD);
+		HTTPFileArg file = getFirstHTTPFileArg("HTTPSamplerBase.getFileField");
+		return file != null ? file.getParamName() : null;
 	}
 
     /**
      * The actual name of the file to POST
      */
 	public void setFilename(String value) {
-		setProperty(FILE_NAME, value);
+		setHTTPFileArg("HTTPSamplerBase.setFilename", value, null, null);
+		setProperty(FILE_NAME, value); //kept this line to let it
+									   //possible to create backward
+									   //compatible test plans
 	}
 
     /**
      * The actual name of the file to POST
      */
 	public String getFilename() {
-		return getPropertyAsString(FILE_NAME);
+		HTTPFileArg file = getFirstHTTPFileArg("HTTPSamplerBase.getFilename");
+		return file != null ? file.getPath() : null;
 	}
 
 	/**
@@ -263,10 +282,73 @@
 	 * i.e. FileField is blank
 	 */
 	public boolean getSendFileAsPostBody() {
-        // If no file field is specified, the file is sent as post body
-		return getFileField().length()== 0 && getFilename().length() > 0;
+		// If there is one file with no parameter name, the file will
+		// be sent as post body.
+		HTTPFileArg file = getFirstHTTPFileArg();
+		return (getHTTPFileArgCount() == 1)
+			&& (file.getPath() != null && file.getPath().length() > 0)
+			&& (file.getParamName() == null || file.getParamName().length() == 0);
+		// NOTE: this method is kept for backward compatibility with
+		// old file parameter panel. it maybe better to remove this
+		// future.
 	}
-    
+
+	/**
+	 * adds a new file to be post.
+	 *
+	 * @param file
+	 *			 the new HTTPFileArg object
+	 */
+	public void addHTTPFileArg(HTTPFileArg file) {
+		this.getHTTPFileArgs().addHTTPFileArg(file);
+	}
+
+	/**
+	 * resets files list and adds given HTTPFileArg to the new list.
+	 *
+	 * @param file
+	 *			 the new HTTPFileArg object
+	 */
+	public void setHTTPFileArg(HTTPFileArg file) {
+		HTTPFileArgs files = new HTTPFileArgs();
+		files.addHTTPFileArg(file);
+		setHTTPFileArgs(files);
+	}
+
+	/**
+	 * checks file count attached to http request, if there are
+	 * multiple files logs a warning with given method name, changes
+	 * first attached file's information with given non null
+	 * parameters, and removes other files; if there is no file
+	 * attached, replaces file information with given non null
+	 * parameters.
+	 *
+	 * @param method
+	 *		method name needed for warning log.
+	 * @param filePath
+	 *		give null not to change path information of http file
+	 *		argument.
+	 * @param paramName
+	 *		give null not to change parameter name of http file
+	 *		argument.
+	 * @param mimeType
+	 *		give null not to change mime type of http file
+	 *		argument.
+	 */
+	private void setHTTPFileArg(String method, String filePath, String paramName, String mimeType) {
+		int fileCount = getHTTPFileArgCount();
+		if (fileCount > 1) {
+			logOldMethodCallForMultipleFiles(method);
+		}
+		HTTPFileArg file = (fileCount == 0)
+			? new HTTPFileArg()
+			: getFirstHTTPFileArg();
+		if (filePath != null) { file.setPath(filePath); }
+		if (paramName != null) { file.setParamName(paramName); }
+		if (mimeType != null) { file.setMimeType(mimeType); }
+		setHTTPFileArg(file);
+	}
+
     /**
      * Determine if none of the parameters have a name, and if that
      * is the case, it means that the parameter values should be sent
@@ -615,6 +697,23 @@
 		return (Arguments) getProperty(ARGUMENTS).getObjectValue();
 	}
 
+	/**
+	 * Method to set files list to be uploaded.
+	 *
+	 * @param value
+	 *	 HTTPFileArgs object that stores file list to be uploaded.
+	 */
+	public void setHTTPFileArgs(HTTPFileArgs value) {
+		setProperty(new TestElementProperty(FILE_ARGS, value));
+	}
+
+	/**
+	 * Method to get files list to be uploaded.
+	 */
+	public HTTPFileArgs getHTTPFileArgs() {
+		return (HTTPFileArgs) getProperty(FILE_ARGS).getObjectValue();
+	}
+
 	public void setAuthManager(AuthManager value) {
 		AuthManager mgr = getAuthManager();
 		if (mgr != null) {
@@ -652,11 +751,15 @@
 	}
 
 	public void setMimetype(String value) {
-		setProperty(MIMETYPE, value);
+		setHTTPFileArg("HTTPSamplerBase.setMimetype", null, null, value);
+		setProperty(MIMETYPE, value); //kept this line to let it
+									  //possible to create backward
+									  //compatible test plans
 	}
 
 	public String getMimetype() {
-		return getPropertyAsString(MIMETYPE);
+		HTTPFileArg file = getFirstHTTPFileArg("HTTPSamplerBase.getMimetype");
+		return file != null ? file.getMimeType() : null;
 	}
 
 	public boolean isImageParser() {
@@ -1321,9 +1424,61 @@
      * Method to tell if the request has any files to be uploaded
      */
     protected boolean hasUploadableFiles() {
-        return getFilename() != null && getFilename().trim().length() > 0;        
+        return getHTTPFileArgCount() > 0;
     }
 
+    /**
+     * count of files to be uploaded.
+     */
+    protected int getHTTPFileArgCount() {
+        return getHTTPFileArgsCollection().size();
+    }
+
+    /**
+     * Method to tell if the request has only one file to upload.
+     *
+     * @return false for zero or multiple files, true for one file.
+     */
+    protected boolean hasSingleFileArgument() {
+        return getHTTPFileArgCount() == 1;
+    }
+
+    /**
+     * Method to get files collection to be uploaded.
+     */
+    protected CollectionProperty getHTTPFileArgsCollection() {
+        return this.getHTTPFileArgs().getHTTPFileArgsCollection();
+    }
+
+    /**
+     * Method to get the first file to be uploaded.
+     *
+     * @return HTTPFileArg object if there exists any file, null
+     * otherwise.
+     */
+    public HTTPFileArg getFirstHTTPFileArg() {
+        return this.getHTTPFileArgs().getHTTPFileArg(0);
+    }
+
+    /**
+     * Method to get the first file to be uploaded, prints a warning
+     * message with given method name if multiple files exist.
+     *
+     * @return HTTPFileArg object if there exists any file, null
+     * otherwise.
+     */
+    private HTTPFileArg getFirstHTTPFileArg(String method) {
+        if (getHTTPFileArgCount() > 1) {
+            logOldMethodCallForMultipleFiles(method);
+        }
+        return getFirstHTTPFileArg();
+    }
+
+    private void logOldMethodCallForMultipleFiles(String method) {
+            log.warn(method + " method is called "
+                     + "while there are multiple files");
+    }
+
     public static String[] getValidMethodsAsArray(){
         return (String[]) METHODLIST.toArray(new String[0]);
     }
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java	(working copy)
@@ -30,6 +30,7 @@
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -131,7 +132,6 @@
     private void setupConnection(URL url, 
                  String method,
                  HTTPSampleResult res) throws IOException {
-
         String host = url.getHost();
         int port = url.getPort();
         if(port <= 0 || port == url.getDefaultPort()) {
@@ -185,12 +185,7 @@
         AuthManager auth = getAuthManager();
         int hsz = 1; // Host always
         if(method.equals(POST)) {
-            String fn = getFilename();
-            if(fn != null && fn.trim().length() > 0) {
-                hsz += 3;
-            } else {
-                hsz += 2;
-            }
+            hsz += (2 + getHTTPFileArgCount());
         }
         if(headers != null) {
             hsz += headers.size();
@@ -236,15 +231,16 @@
         }
         if(method.equals(POST)) {
             int cl = -1;
-            String fn = getFilename();
-            if(fn != null && fn.trim().length() > 0) {
-                File input = new File(fn);
+            //TODO: make it compatible with multiple file upload.
+            HTTPFileArg file = getFirstHTTPFileArg();
+            if(file != null) {
+                File input = new File(file.getPath());
                 cl = (int)input.length();
                 body = new FileInputStream(input);
                 setString(HEADER_CONTENT_DISPOSITION);
-                setString("form-data; name=\""+encode(getFileField())+
-                      "\"; filename=\"" + encode(fn) +"\""); //$NON-NLS-1$ //$NON-NLS-2$
-                String mt = getMimetype();
+                setString("form-data; name=\""+encode(file.getParamName())+
+                      "\"; filename=\"" + encode(file.getPath()) +"\""); //$NON-NLS-1$ //$NON-NLS-2$
+                String mt = file.getMimeType();
                 hbuf.append(HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);
                 setInt(0xA007); // content-type
                 setString(mt);
Index: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java	(revision 0)
@@ -0,0 +1,536 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.gui;
+
+import java.io.File;
+import java.awt.BorderLayout;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.FlowLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Collection;
+import java.util.Iterator;
+
+import javax.swing.JFileChooser;
+import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableColumn;
+
+import org.apache.jmeter.config.gui.AbstractConfigGui;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.ObjectTableModel;
+import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jorphan.reflect.Functor;
+
+/**
+ * A GUI panel allowing the user to enter file information for http
+ * upload.
+ *
+ * @author Erhan Kesken
+ */
+public class HTTPFileArgsPanel extends AbstractConfigGui implements ActionListener {
+
+	/** The title label for this component. */
+	private JLabel tableLabel;
+
+	/** The table containing the list of files. */
+	private transient JTable table;
+
+	/** The model for the files table. */
+	protected transient ObjectTableModel tableModel;
+
+	/** A button for adding new files to the table. */
+	private JButton add;
+
+	/** A button for browsing file system to set path of selected row in table. */
+	private JButton browse;
+
+	/** A button for removing files from the table. */
+	private JButton delete;
+
+	/**
+	 * Added background support for reporting tool
+	 */
+	private Color background;
+
+	/**
+	 * Boolean indicating whether this component is a standalone component or it
+	 * is intended to be used as a subpanel for another component.
+	 */
+	private boolean standalone = true;
+
+	/** Command for adding a row to the table. */
+	private static final String ADD = "add"; // $NON-NLS-1$
+
+	/** Command for browsing filesystem to set path of selected row in table. */
+	private static final String BROWSE = "browse"; // $NON-NLS-1$
+
+	/** Command for removing a row from the table. */
+	private static final String DELETE = "delete"; // $NON-NLS-1$
+
+	public static final String FILEPATH = JMeterUtils.getResString("send_file_filename_label"); // $NON-NLS-1$
+
+	/** The parameter name column title of file table. */
+	private static final String PARAMNAME = JMeterUtils.getResString("send_file_param_name_label"); //$NON-NLS-1$
+
+	/** The mime type column title of file table. */
+	private static final String MIMETYPE = JMeterUtils.getResString("send_file_mime_label"); //$NON-NLS-1$
+
+	/**
+	 * Standalone Constructor.
+	 *
+	 * Sets panel title to the string matches with
+	 * user_defined_variables resource.
+	 */
+	public HTTPFileArgsPanel() {
+		tableLabel = new JLabel(JMeterUtils.getResString("user_defined_variables")); // $NON-NLS-1$
+		standalone = true;
+		init();
+	}
+
+	/**
+	 * Create a new HTTPFileArgsPanel as an embedded component, using the
+	 * specified title.
+	 *
+	 * @param label
+	 *	the title for the component.
+	 */
+	public HTTPFileArgsPanel(String label) {
+		tableLabel = new JLabel(label);
+		standalone = false;
+		init();
+	}
+
+	/**
+	 * Create a new HTTPFileArgsPanel with a border and color background.
+	 *
+	 * @param label text for label
+	 * @param bkg background colour
+	 */
+	public HTTPFileArgsPanel(String label, Color bkg) {
+		tableLabel = new JLabel(label);
+		this.background = bkg;
+		standalone = false;
+		init();
+	}
+
+	/**
+	 * This is the list of menu categories this gui component will be
+	 * available under.
+	 *
+	 * @return a Collection of Strings, where each element is one of the
+	 *	constants defined in MenuFactory
+	 */
+	public Collection getMenuCategories() {
+		if (standalone) {
+			return super.getMenuCategories();
+		}
+		return null;
+	}
+
+	public String getLabelResource() {
+		return "user_defined_variables";
+		// TODO: need to edit
+		// 'xdocs/usermanual/component_reference.xml' first to be able
+		// to use a specific label resource without breaking unit
+		// tests.
+	}
+
+	/**
+	 * Initialize the table model used for the http files table.
+	 */
+	protected void initializeTableModel() {
+		tableModel = new ObjectTableModel(new String[] {
+				FILEPATH, PARAMNAME, MIMETYPE},
+			HTTPFileArg.class,
+			new Functor[] {
+				new Functor("getPath"), //$NON-NLS-1$
+				new Functor("getParamName"), //$NON-NLS-1$
+				new Functor("getMimeType")}, //$NON-NLS-1$
+			new Functor[] {
+				new Functor("setPath"), //$NON-NLS-1$
+				new Functor("setParamName"), //$NON-NLS-1$
+				new Functor("setMimeType")}, //$NON-NLS-1$
+			new Class[] {String.class, String.class, String.class});
+	}
+
+	public static boolean testFunctors(){
+		HTTPFileArgsPanel instance = new HTTPFileArgsPanel();
+		instance.initializeTableModel();
+		return instance.tableModel.checkFunctors(null,instance.getClass());
+	}
+
+	/**
+	 * Resize the table columns to appropriate widths.
+	 *
+	 * @param table
+	 *	the table to resize columns for
+	 */
+	protected void sizeColumns(JTable table) {
+		int resizeMode = table.getAutoResizeMode();
+		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
+		fixSize(table.getColumn(PARAMNAME));
+		fixSize(table.getColumn(MIMETYPE));
+		table.setAutoResizeMode(resizeMode);
+	}
+
+	/**
+	 * Resize the table column to a fixed size.
+	 *
+	 * @param column
+	 *	the column whose size will be fixed
+	 */
+	private void fixSize(TableColumn column) {
+		column.sizeWidthToFit();
+		column.setMaxWidth((int) (column.getWidth() * 2));
+		column.setWidth(column.getMaxWidth());
+		column.setResizable(false);
+	}
+
+	/* Implements JMeterGUIComponent.createTestElement() */
+	public TestElement createTestElement() {
+		stopTableEditing();
+		Iterator modelData = tableModel.iterator();
+		HTTPFileArgs files = new HTTPFileArgs();
+		while (modelData.hasNext()) {
+			HTTPFileArg file = (HTTPFileArg) modelData.next();
+			files.addHTTPFileArg(file);
+		}
+		this.modifyTestElement(files);
+		return (TestElement) files.clone();
+	}
+
+	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+	public void modifyTestElement(TestElement args) {
+		this.configureTestElement(args);
+	}
+
+	/**
+	 * A newly created component can be initialized with the contents of a Test
+	 * Element object by calling this method. The component is responsible for
+	 * querying the Test Element object for the relevant information to display
+	 * in its GUI.
+	 *
+	 * @param el
+	 *	the TestElement to configure
+	 */
+	public void configure(TestElement el) {
+		super.configure(el);
+		if(el instanceof HTTPFileArgs) {
+			tableModel.clearData();
+			PropertyIterator iter = ((HTTPFileArgs) el).getHTTPFileArgsCollection().iterator();
+			while (iter.hasNext()) {
+				HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();
+				tableModel.addRow(file);
+			}
+		}
+		checkDeleteAndBrowseStatus();
+	}
+
+	/**
+	 * Get the table used to enter files.
+	 *
+	 * @return the table used to enter files
+	 */
+	protected JTable getTable() {
+		return table;
+	}
+
+	/**
+	 * Get the title label for this component.
+	 *
+	 * @return the title label displayed with the table
+	 */
+	protected JLabel getTableLabel() {
+		return tableLabel;
+	}
+
+	/**
+	 * Get the button used to delete rows from the table.
+	 *
+	 * @return the button used to delete rows from the table
+	 */
+	protected JButton getDeleteButton() {
+		return delete;
+	}
+
+	/**
+	 * Get the button used to add rows to the table.
+	 *
+	 * @return the button used to add rows to the table
+	 */
+	protected JButton getAddButton() {
+		return add;
+	}
+
+	/**
+	 * Get the button used to browse file system to select a file to
+	 * set selected row's path.
+	 *
+	 * @return the button used to add rows to the table
+	 */
+	protected JButton getBrowseButton() {
+		return browse;
+	}
+
+	/**
+	 * Enable or disable the delete button depending on whether or not there is
+	 * a row to be deleted.
+	 */
+	protected void checkDeleteAndBrowseStatus() {
+		// Disable DELETE and BROWSE buttons if there are no rows in
+		// the table to delete.
+		if (tableModel.getRowCount() == 0) {
+			browse.setEnabled(false);
+			delete.setEnabled(false);
+		} else {
+			browse.setEnabled(true);
+			delete.setEnabled(true);
+		}
+	}
+
+	public void clearGui(){
+		super.clearGui();
+		clear();
+	}
+
+	/**
+	 * Clear all rows from the table.
+	 */
+	public void clear() {
+		stopTableEditing();
+		tableModel.clearData();
+	}
+
+	/**
+	 * Invoked when an action occurs. This implementation supports the add and
+	 * delete buttons.
+	 *
+	 * @param e
+	 *	the event that has occurred
+	 */
+	public void actionPerformed(ActionEvent e) {
+		String action = e.getActionCommand();
+		if (action.equals(ADD)) {
+			addFile("");
+		}
+		runCommandOnSelectedFile(action);
+	}
+
+	/**
+	 * runs specified command on currently selected file.
+	 *
+	 * @param command specifies which process will be done on selected
+	 * file. it's coming from action command currently catched by
+	 * action listener.
+	 *
+	 * @see runCommandOnRow
+	 */
+	private void runCommandOnSelectedFile(String command) {
+		// If a table cell is being edited, we must cancel the editing before
+		// deleting the row
+		if (table.isEditing()) {
+			TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());
+			cellEditor.cancelCellEditing();
+		}
+		int rowSelected = table.getSelectedRow();
+		if (rowSelected >= 0) {
+			runCommandOnRow(command, rowSelected);
+			tableModel.fireTableDataChanged();
+			// Disable DELETE and BROWSE if there are no rows in the table to delete.
+			checkDeleteAndBrowseStatus();
+			// Table still contains one or more rows, so highlight (select)
+			// the appropriate one.
+			if (tableModel.getRowCount() != 0) {
+				int rowToSelect = rowSelected;
+				if (rowSelected >= tableModel.getRowCount()) {
+					rowToSelect = rowSelected - 1;
+				}
+				table.setRowSelectionInterval(rowToSelect, rowToSelect);
+			}
+		}
+	}
+
+	/**
+	 * runs specified command on currently selected table row.
+	 *
+	 * @param command specifies which process will be done on selected
+	 * file. it's coming from action command currently catched by
+	 * action listener.
+	 *
+	 * @param rowSelected index of selected row.
+	 */
+	private void runCommandOnRow(String command, int rowSelected) {
+		if (DELETE.equals(command)) {
+			tableModel.removeRow(rowSelected);
+		} else if (BROWSE.equals(command)) {
+			String path = browseAndGetFilePath();
+			tableModel.setValueAt(path, rowSelected, 0);
+		}
+	}
+
+	/**
+	 * Add a new file row to the table.
+	 */
+	protected void addFile(String path) {
+		// If a table cell is being edited, we should accept the current value
+		// and stop the editing before adding a new row.
+		stopTableEditing();
+
+		tableModel.addRow(new HTTPFileArg(path));
+
+		// Enable DELETE (which may already be enabled, but it won't hurt)
+		delete.setEnabled(true);
+		browse.setEnabled(true);
+
+		// Highlight (select) the appropriate row.
+		int rowToSelect = tableModel.getRowCount() - 1;
+		table.setRowSelectionInterval(rowToSelect, rowToSelect);
+	}
+
+	/**
+	 * opens a dialog box to choose a file and returns selected file's
+	 * path.
+	 *
+	 * @return a new File object
+	 */
+	private String browseAndGetFilePath() {
+		String path = "";
+		JFileChooser chooser = FileDialoger.promptToOpenFile();
+		if (chooser != null) {
+			File file = chooser.getSelectedFile();
+			if (file != null) {
+				path = file.getPath();
+			}
+		}
+		return path;
+	}
+
+	/**
+	 * Stop any editing that is currently being done on the table. This will
+	 * save any changes that have already been made.
+	 */
+	protected void stopTableEditing() {
+		if (table.isEditing()) {
+			TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());
+			cellEditor.stopCellEditing();
+		}
+	}
+
+	/**
+	 * Create the main GUI panel which contains the file table.
+	 *
+	 * @return the main GUI panel
+	 */
+	private Component makeMainPanel() {
+		initializeTableModel();
+		table = new JTable(tableModel);
+		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+		if (this.background != null) {
+			table.setBackground(this.background);
+		}
+		return makeScrollPane(table);
+	}
+
+	/**
+	 * Create a panel containing the title label for the table.
+	 *
+	 * @return a panel containing the title label
+	 */
+	protected Component makeLabelPanel() {
+		JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
+		labelPanel.add(tableLabel);
+		if (this.background != null) {
+			labelPanel.setBackground(this.background);
+		}
+		return labelPanel;
+	}
+
+	/**
+	 * Create a panel containing the add and delete buttons.
+	 *
+	 * @return a GUI panel containing the buttons
+	 */
+	private JPanel makeButtonPanel() {
+		add = new JButton(JMeterUtils.getResString("add")); // $NON-NLS-1$
+		add.setActionCommand(ADD);
+		add.setEnabled(true);
+
+		browse = new JButton(JMeterUtils.getResString("browse")); // $NON-NLS-1$
+		browse.setActionCommand(BROWSE);
+
+		delete = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$
+		delete.setActionCommand(DELETE);
+
+		checkDeleteAndBrowseStatus();
+
+		JPanel buttonPanel = new JPanel();
+		buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
+		if (this.background != null) {
+			buttonPanel.setBackground(this.background);
+		}
+		add.addActionListener(this);
+		browse.addActionListener(this);
+		delete.addActionListener(this);
+		buttonPanel.add(add);
+		buttonPanel.add(browse);
+		buttonPanel.add(delete);
+		return buttonPanel;
+	}
+
+	/**
+	 * Initialize the components and layout of this component.
+	 */
+	private void init() {
+		JPanel p = this;
+
+		if (standalone) {
+			setLayout(new BorderLayout(0, 5));
+			setBorder(makeBorder());
+			add(makeTitlePanel(), BorderLayout.NORTH);
+			p = new JPanel();
+		}
+
+		p.setLayout(new BorderLayout());
+
+		p.add(makeLabelPanel(), BorderLayout.NORTH);
+		p.add(makeMainPanel(), BorderLayout.CENTER);
+		// Force a minimum table height of 70 pixels
+		p.add(Box.createVerticalStrut(70), BorderLayout.WEST);
+		p.add(makeButtonPanel(), BorderLayout.SOUTH);
+
+		if (standalone) {
+			add(p, BorderLayout.CENTER);
+		}
+
+		table.revalidate();
+		sizeColumns(table);
+	}
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java	(working copy)
@@ -21,7 +21,6 @@
 import java.awt.BorderLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.io.File;
 
 import javax.swing.BorderFactory;
 import javax.swing.BoxLayout;
@@ -31,29 +30,23 @@
 import javax.swing.JPanel;
 import javax.swing.JTextField;
 
-import org.apache.jmeter.gui.util.FileDialoger;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
+import org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 
 public class MultipartUrlConfigGui extends UrlConfigGui implements ActionListener {
 
-	private JTextField filenameField;
+	/**
+	 * Files panel that holds file informations to be uploaded by
+	 * http request.
+	 */
+	protected HTTPFileArgsPanel filesPanel;
 
-	private JTextField paramNameField;
-
-	private JTextField mimetypeField;
-
-	// TODO these are used as names for the GUI elements - are they needed? are they NLS?
-	private static final String FILENAME = "filename";
-
-	private static final String BROWSE = "browse";  // $NON-NLS-1$ used as an ActionName locally
-
-	private static final String PARAMNAME = "paramname";
-
-	private static final String MIMETYPE = "mimetype";
-
 	public MultipartUrlConfigGui() {
 		super();
 		init();
@@ -66,11 +59,18 @@
 
 	public TestElement createTestElement() {
 		TestElement ce = super.createTestElement();
-
 		configureTestElement(ce);
-		ce.setProperty(HTTPSamplerBase.MIMETYPE, mimetypeField.getText());
-		ce.setProperty(HTTPSamplerBase.FILE_NAME, filenameField.getText());
-		ce.setProperty(HTTPSamplerBase.FILE_FIELD, paramNameField.getText());
+		HTTPFileArgs files = (HTTPFileArgs) filesPanel.createTestElement();
+		ce.setProperty(new TestElementProperty(HTTPSamplerBase.FILE_ARGS, files));
+		// following lines are for letting it possible to create
+		// backward compatible test plans.
+		//TODO: remove backward compatibility stuff after enough time.
+		HTTPFileArg file = files.getHTTPFileArg(0);
+		if (file != null) {
+			ce.setProperty(HTTPSamplerBase.FILE_NAME, file.getPath());
+			ce.setProperty(HTTPSamplerBase.FILE_FIELD, file.getParamName());
+			ce.setProperty(HTTPSamplerBase.MIMETYPE, file.getMimeType());
+		}
 		return ce;
 	}
 
@@ -85,9 +85,22 @@
 
 	public void configure(TestElement el) {
 		super.configure(el);
-		mimetypeField.setText(el.getPropertyAsString(HTTPSamplerBase.MIMETYPE));
-		filenameField.setText(el.getPropertyAsString(HTTPSamplerBase.FILE_NAME));
-		paramNameField.setText(el.getPropertyAsString(HTTPSamplerBase.FILE_FIELD));
+		//kept backward compatibility with test plans prepared
+		//by old versions of jmeter.
+		//TODO: remove backward compatibility stuff after enough time.
+		String fileName = el.getPropertyAsString(HTTPSamplerBase.FILE_NAME);
+		String paramName = el.getPropertyAsString(HTTPSamplerBase.FILE_FIELD);
+		String mimeType = el.getPropertyAsString(HTTPSamplerBase.MIMETYPE);
+		if(!"".equals(fileName) || !"".equals(paramName) || !"".equals(mimeType)) {
+			// if any file information is saved previously.
+			HTTPFileArg file = new HTTPFileArg(fileName, paramName, mimeType);
+			HTTPFileArgs files = new HTTPFileArgs();
+			files.addHTTPFileArg(file);
+			filesPanel.configure(files);
+			//convert old properties to new all-in-one property
+			el.setProperty(new TestElementProperty(HTTPSamplerBase.FILE_ARGS, files));
+		}
+		filesPanel.configure((TestElement) el.getProperty(HTTPSamplerBase.FILE_ARGS).getObjectValue());
 	}
 
 	public String getLabelResource() {
@@ -98,20 +111,6 @@
 	}
 
 	public void actionPerformed(ActionEvent e) {
-		String name = e.getActionCommand();
-
-		if (name.equals(BROWSE)) {
-			JFileChooser chooser = FileDialoger.promptToOpenFile();
-
-			if (chooser == null) {
-				return;
-			}
-			File file = chooser.getSelectedFile();
-
-			if (file != null) {
-				filenameField.setText(file.getPath());
-			}
-		}
 	}
 
 	private void init() {// called from ctor, so must not be overridable
@@ -140,67 +139,17 @@
 
 		webRequestPanel.add(northPanel, BorderLayout.NORTH);
 		webRequestPanel.add(getParameterPanel(), BorderLayout.CENTER);
-		webRequestPanel.add(getFilePanel(), BorderLayout.SOUTH);
+		webRequestPanel.add(getHTTPFileArgsPanel(), BorderLayout.SOUTH);
 
 		this.add(webServerPanel, BorderLayout.NORTH);
 		this.add(webRequestPanel, BorderLayout.CENTER);
 	}
 
-	protected JPanel getFilePanel() {
-		JPanel filePanel = new VerticalPanel();
-		filePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), 
-				JMeterUtils.getResString("send_file"))); // $NON-NLS-1$
-
-		filePanel.add(createFilenamePanel());
-		filePanel.add(createFileParamNamePanel());
-		filePanel.add(createFileMimeTypePanel());
-
-		return filePanel;
+	protected JPanel getHTTPFileArgsPanel() {
+		filesPanel = new HTTPFileArgsPanel(JMeterUtils.getResString("send_file"));
+		return filesPanel;
 	}
 
-	private JPanel createFileMimeTypePanel() {
-		mimetypeField = new JTextField(15);
-		mimetypeField.setName(MIMETYPE);
-
-		JLabel mimetypeLabel = new JLabel(JMeterUtils.getResString("send_file_mime_label")); // $NON-NLS-1$
-		mimetypeLabel.setLabelFor(mimetypeField);
-		JPanel mimePanel = new JPanel(new BorderLayout(5, 0));
-		mimePanel.add(mimetypeLabel, BorderLayout.WEST);
-		mimePanel.add(mimetypeField, BorderLayout.CENTER);
-		return mimePanel;
-	}
-
-	private JPanel createFileParamNamePanel() {
-		paramNameField = new JTextField(15);
-		paramNameField.setName(PARAMNAME);
-
-		JLabel paramNameLabel = new JLabel(JMeterUtils.getResString("send_file_param_name_label")); // $NON-NLS-1$
-		paramNameLabel.setLabelFor(paramNameField);
-
-		JPanel paramNamePanel = new JPanel(new BorderLayout(5, 0));
-		paramNamePanel.add(paramNameLabel, BorderLayout.WEST);
-		paramNamePanel.add(paramNameField, BorderLayout.CENTER);
-		return paramNamePanel;
-	}
-
-	private JPanel createFilenamePanel() {
-		filenameField = new JTextField(15);
-		filenameField.setName(FILENAME);
-
-		JLabel filenameLabel = new JLabel(JMeterUtils.getResString("send_file_filename_label")); // $NON-NLS-1$
-		filenameLabel.setLabelFor(filenameField);
-
-		JButton browseFileButton = new JButton(JMeterUtils.getResString("send_file_browse")); // $NON-NLS-1$
-		browseFileButton.setActionCommand(BROWSE);
-		browseFileButton.addActionListener(this);
-
-		JPanel filenamePanel = new JPanel(new BorderLayout(5, 0));
-		filenamePanel.add(filenameLabel, BorderLayout.WEST);
-		filenamePanel.add(filenameField, BorderLayout.CENTER);
-		filenamePanel.add(browseFileButton, BorderLayout.EAST);
-		return filenamePanel;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * 
@@ -209,8 +158,6 @@
 	public void clear() {
 		// TODO Auto-generated method stub
 		super.clear();
-		filenameField.setText(""); // $NON-NLS-1$
-		mimetypeField.setText(""); // $NON-NLS-1$
-		paramNameField.setText(""); // $NON-NLS-1$
+		filesPanel.clear();
 	}
 }
Index: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java	(revision 653098)
+++ src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java	(working copy)
@@ -22,23 +22,35 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.util.JOrphanUtils;
+import org.apache.jorphan.logging.LoggingManager;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.Perl5Compiler;
 import org.apache.oro.text.regex.Perl5Matcher;
+import org.apache.log.Logger;
 
 /**
  * @author Michael Stover
  */
 public class MultipartUrlConfig implements Serializable {
 
-	private String boundary, filename, fileField, mimetype;
+	private static final Logger log = LoggingManager.getLoggerForClass();
 
+	private String boundary;
+
 	private Arguments args;
 
+	/**
+	 * HTTPFileArgs list to be uploaded with http request.
+	 */
+	private HTTPFileArgs files;
+
 	public MultipartUrlConfig() {
 		args = new Arguments();
+		files = new HTTPFileArgs();
 	}
 
 	public MultipartUrlConfig(String boundary) {
@@ -55,31 +67,54 @@
 	}
 
 	public void setFilename(String filename) {
-		this.filename = filename;
+		setHTTPFileArg("MultipartUrlConfig.setFilename", filename, null, null);
 	}
 
 	public String getFilename() {
-		return filename;
+		HTTPFileArg file = this.getFirstHTTPFileArg();
+		return (file != null) ? file.getPath() : null;
 	}
 
 	public Arguments getArguments() {
 		return args;
 	}
 
+	/**
+	 * get HTTPFileArgs list to be uploaded with http request.
+	 *
+	 * @return HTTPFileArgs current files list to be uploaded with
+	 * request.
+	 */
+	public HTTPFileArgs getHTTPFileArgs() {
+		return files;
+	}
+
+	/**
+	 * gets first item of HTTPFileArgs list.
+	 *
+	 * @return HTTPFileArg object if there exists any file, null
+	 * otherwise.
+	 */
+	public HTTPFileArg getFirstHTTPFileArg() {
+		return files.getHTTPFileArg(0);
+	}
+
 	public void setFileFieldName(String name) {
-		this.fileField = name;
+		setHTTPFileArg("MultipartUrlConfig.setFileFieldName", null, name, null);
 	}
 
 	public String getFileFieldName() {
-		return fileField;
+		HTTPFileArg file = this.getFirstHTTPFileArg();
+		return (file != null) ? file.getParamName() : null;
 	}
 
 	public void setMimeType(String type) {
-		mimetype = type;
+		setHTTPFileArg("MultipartUrlConfig.setMimeType", null, null, type);
 	}
 
 	public String getMimeType() {
-		return mimetype;
+		HTTPFileArg file = this.getFirstHTTPFileArg();
+		return (file != null) ? file.getMimeType() : null;
 	}
 
 	public void addArgument(String name, String value) {
@@ -92,6 +127,75 @@
 		myArgs.addArgument(new HTTPArgument(name, value, metadata));
 	}
 
+	/**
+	 * adds a new File to the HTTPFileArgs list to be uploaded with http
+	 * request.
+	 *
+	 * @param path file full path.
+	 * @param param http parameter name.
+	 * @param mime mime type of file.
+	 */
+	public void addHTTPFileArg(String path, String param, String mime) {
+		files.addHTTPFileArg(new HTTPFileArg(path, param, mime));
+	}
+
+	/**
+	 * resets HTTPFileArgs list and adds a new HTTPFileArg to the
+	 * new list.
+	 *
+	 * @param file
+	 *			 the new HTTPFileArg object
+	 */
+	public void setHTTPFileArg(HTTPFileArg file) {
+		files = new HTTPFileArgs();
+		files.addHTTPFileArg(file);
+	}
+
+	/**
+	 * checks attached file count; if there are multiple files, logs a
+	 * warning with given method name, changes first attached file's
+	 * information with given non null parameters, and removes other
+	 * files; if there is no file attached, attaches a new one with
+	 * given non null parameters.
+	 *
+	 * @param method
+	 *		method name needed for warning log.
+	 * @param filePath
+	 *		give null not to change path information of http file
+	 *		argument.
+	 * @param paramName
+	 *		give null not to change parameter name of http file
+	 *		argument.
+	 * @param mimeType
+	 *		give null not to change mime type of http file
+	 *		argument.
+	 */
+	protected void setHTTPFileArg(String method, String filePath, String paramName, String mimeType) {
+		int fileCount = files.getHTTPFileArgCount();
+		if (fileCount > 1) {
+			logOldMethodCallForMultipleFiles(method);
+		}
+		HTTPFileArg file = (fileCount == 0)
+			? new HTTPFileArg()
+			: getFirstHTTPFileArg();
+		if (filePath != null) { file.setPath(filePath); }
+		if (paramName != null) { file.setParamName(paramName); }
+		if (mimeType != null) { file.setMimeType(mimeType); }
+		setHTTPFileArg(file);
+	}
+
+	/**
+	 * logs a generic warning message about an old method call which
+	 * assumes there can be only one file, but for now multiple file
+	 * upload is possible.
+	 *
+	 * @param method name of the old method which is called.
+	 */
+	private void logOldMethodCallForMultipleFiles(String method) {
+			log.warn(method + " method is called "
+					 + "while there are multiple files");
+	}
+
 // NOT USED	
 //    /**
 //     * @deprecated values in a multipart/form-data are not urlencoded,
@@ -146,9 +250,7 @@
                     String fn = contentDisposition.substring(index, contentDisposition.indexOf("\"", index));
                     if(fn != null && fn.length() > 0) {
                         // Set the values retrieves for the file upload
-                        this.setFileFieldName(name);
-                        this.setFilename(fn);
-                        this.setMimeType(contentType);
+                        this.addHTTPFileArg(fn, name, contentType);
                     }
                 }
                 else {
Index: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArg.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArg.java	(revision 0)
@@ -0,0 +1,164 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import java.io.Serializable;
+
+import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.property.StringProperty;
+
+/*
+ * Class representing a file parameter for http upload consists of a
+ * http parameter name/file path pair with (optional) mimetype.
+ *
+ * @author Erhan Kesken
+ */
+public class HTTPFileArg extends AbstractTestElement implements Serializable {
+
+	/** Name used to store the file's path. */
+	public static final String FILEPATH = "File.path";
+
+	/** Name used to store the file's paramname. */
+	public static final String PARAMNAME = "File.paramname";
+
+	/** Name used to store the file's mimetype. */
+	public static final String MIMETYPE = "File.mimetype";
+
+	/** Name used to store the file's http header. */
+	public static final String HEADER = "File.header";
+
+	/**
+	 * Constructor for an empty HTTPFileArg object
+	 */
+	public HTTPFileArg() {
+	}
+
+	/**
+	 * Constructor for the HTTPFileArg object with given path.
+	 */
+	public HTTPFileArg(String path) {
+		this(path, null, null);
+	}
+
+	/**
+	 * Constructor for the HTTPFileArg object with full information.
+	 */
+	public HTTPFileArg(String path, String paramname, String mimetype) {
+		setPath(path);
+		setParamName(paramname);
+		setMimeType(mimetype);
+	}
+
+	/**
+	 * Copy Constructor.
+	 */
+	public HTTPFileArg(HTTPFileArg file) {
+		this(file.getPath(), file.getParamName(), file.getMimeType());
+	}
+
+	/**
+	 * Set the http parameter name of the File.
+	 *
+	 * @param newParamName
+	 *	the new http parameter name
+	 */
+	public void setParamName(String newParamName) {
+		setProperty(new StringProperty(PARAMNAME, newParamName));
+	}
+
+	/**
+	 * Get the http parameter name of the File.
+	 *
+	 * @return the http parameter name
+	 */
+	public String getParamName() {
+		return getPropertyAsString(PARAMNAME);
+	}
+
+	/**
+	 * Set the mimetype of the File.
+	 *
+	 * @param newMimeType
+	 *	the new mimetype
+	 */
+	public void setMimeType(String newMimeType) {
+		setProperty(new StringProperty(MIMETYPE, newMimeType));
+	}
+
+	/**
+	 * Get the mimetype of the File.
+	 *
+	 * @return the http parameter mimetype
+	 */
+	public String getMimeType() {
+		return getPropertyAsString(MIMETYPE);
+	}
+
+	/**
+	 * Set the path of the File.
+	 *
+	 * @param newPath
+	 *	the new path
+	 */
+	public void setPath(String newPath) {
+		setProperty(new StringProperty(FILEPATH, newPath));
+	}
+
+	/**
+	 * Get the path of the File.
+	 *
+	 * @return the file's path
+	 */
+	public String getPath() {
+		return getPropertyAsString(FILEPATH);
+	}
+
+	/**
+	 * Sets the http headers for the HTTPFileArg object. Header
+	 * contains path, parameter name and mime type information.
+	 *
+	 * @param newHeader
+	 *	the new Header value
+	 */
+	public void setHeader(String newHeader) {
+		setProperty(new StringProperty(HEADER, newHeader));
+	}
+
+	/**
+	 * Gets the http headers for the HTTPFileArg object.
+	 */
+	public String getHeader() {
+		return getPropertyAsString(HEADER);
+	}
+
+	/**
+	 * returns path, param name, mime type information of
+	 * HTTPFileArg object.
+	 *
+	 * @return the string demonstration of HTTPFileArg object in this
+	 * format:
+	 *    "path:'<PATH>'|param:'<PARAM NAME>'|mimetype:'<MIME TYPE>'"
+	 */
+	public String toString() {
+		return "path:'" + getPath()
+			+ "'|param:'" + getParamName()
+			+ "'|mimetype:'" + getMimeType() + "'";
+	}
+
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArgs.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArgs.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArgs.java	(revision 0)
@@ -0,0 +1,207 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+
+/**
+ * A set of HTTPFileArg objects.
+ *
+ * @author Erhan Kesken
+ */
+public class HTTPFileArgs extends ConfigTestElement implements Serializable {
+	/** The name of the property used to store the files. */
+	public static final String HTTP_FILE_ARGS = "HTTPFileArgs.files"; //$NON-NLS-1$
+
+	/**
+	 * Create a new HTTPFileArgs object with no files.
+	 */
+	public HTTPFileArgs() {
+		setProperty(new CollectionProperty(HTTP_FILE_ARGS, new ArrayList()));
+	}
+
+	/**
+	 * Get the files.
+	 *
+	 * @return the files
+	 */
+	public CollectionProperty getHTTPFileArgsCollection() {
+		return (CollectionProperty) getProperty(HTTP_FILE_ARGS);
+	}
+
+	/**
+	 * Clear the files.
+	 */
+	public void clear() {
+		super.clear();
+		setProperty(new CollectionProperty(HTTP_FILE_ARGS, new ArrayList()));
+	}
+
+	/**
+	 * Set the list of files. Any existing files will be lost.
+	 *
+	 * @param files
+	 *	the new files
+	 */
+	public void setHTTPFileArgs(List files) {
+		setProperty(new CollectionProperty(HTTP_FILE_ARGS, files));
+	}
+
+	/**
+	 * Add a new file with the given path.
+	 *
+	 * @param path
+	 *	the path of the file
+	 */
+	public void addHTTPFileArg(String path) {
+		addHTTPFileArg(new HTTPFileArg(path));
+	}
+
+	/**
+	 * Add a new file.
+	 *
+	 * @param file
+	 *	the new file
+	 */
+	public void addHTTPFileArg(HTTPFileArg file) {
+		TestElementProperty newHTTPFileArg = new TestElementProperty(file.getPath(), file);
+		if (isRunningVersion()) {
+			this.setTemporary(newHTTPFileArg);
+		}
+		getHTTPFileArgsCollection().addItem(newHTTPFileArg);
+	}
+
+	/**
+	 * Get a PropertyIterator of the files.
+	 *
+	 * @return an iteration of the files
+	 */
+	public PropertyIterator iterator() {
+		return getHTTPFileArgsCollection().iterator();
+	}
+
+	/**
+	 * Create a string representation of the files.
+	 *
+	 * @return the string representation of the files
+	 */
+	public String toString() {
+		StringBuffer str = new StringBuffer();
+		PropertyIterator iter = getHTTPFileArgsCollection().iterator();
+		while (iter.hasNext()) {
+			HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();
+			str.append(file.getPath());
+			if (iter.hasNext()) {
+				str.append("&"); //$NON-NLS-1$
+			}
+		}
+		return str.toString();
+	}
+
+	/**
+	 * Remove the specified file from the list.
+	 *
+	 * @param row
+	 *	the index of the file to remove
+	 */
+	public void removeHTTPFileArg(int row) {
+		if (row < getHTTPFileArgCount()) {
+			getHTTPFileArgsCollection().remove(row);
+		}
+	}
+
+	/**
+	 * Remove the specified file from the list.
+	 *
+	 * @param file
+	 *	the file to remove
+	 */
+	public void removeHTTPFileArg(HTTPFileArg file) {
+		PropertyIterator iter = getHTTPFileArgsCollection().iterator();
+		while (iter.hasNext()) {
+			HTTPFileArg item = (HTTPFileArg) iter.next().getObjectValue();
+			if (file.equals(item)) {
+				iter.remove();
+			}
+		}
+	}
+
+	/**
+	 * Remove the file with the specified path.
+	 *
+	 * @param filePath
+	 *	the path of the file to remove
+	 */
+	public void removeHTTPFileArg(String filePath) {
+		PropertyIterator iter = getHTTPFileArgsCollection().iterator();
+		while (iter.hasNext()) {
+			HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();
+			if (file.getPath().equals(filePath)) {
+				iter.remove();
+			}
+		}
+	}
+
+	/**
+	 * Remove all files from the list.
+	 */
+	public void removeAllHTTPFileArgs() {
+		getHTTPFileArgsCollection().clear();
+	}
+
+	/**
+	 * Add a new empty file to the list. The new file will have the
+	 * empty string as its path.
+	 */
+	public void addEmptyHTTPFileArg() {
+		addHTTPFileArg(new HTTPFileArg(""));
+	}
+
+	/**
+	 * Get the number of files in the list.
+	 *
+	 * @return the number of files
+	 */
+	public int getHTTPFileArgCount() {
+		return getHTTPFileArgsCollection().size();
+	}
+
+	/**
+	 * Get a single file.
+	 *
+	 * @param row
+	 *	the index of the file to return.
+	 * @return the file at the specified index, or null if no file
+	 *	exists at that index.
+	 */
+	public HTTPFileArg getHTTPFileArg(int row) {
+		HTTPFileArg file = null;
+		if (row < getHTTPFileArgCount()) {
+			file = (HTTPFileArg) getHTTPFileArgsCollection().get(row).getObjectValue();
+		}
+		return file;
+	}
+}
Index: src/core/org/apache/jmeter/resources/messages.properties
===================================================================
--- src/core/org/apache/jmeter/resources/messages.properties	(revision 653098)
+++ src/core/org/apache/jmeter/resources/messages.properties	(working copy)
@@ -699,11 +699,11 @@
 searchtest=Search test
 second=second
 secure=Secure
-send_file=Send a File With the Request\:
+send_file=Send Files With the Request\:
 send_file_browse=Browse...
-send_file_filename_label=Filename\:
+send_file_filename_label=File Path\:
 send_file_mime_label=MIME Type\:
-send_file_param_name_label=Value for "name" attribute\:
+send_file_param_name_label=Parameter Name\:
 server=Server Name or IP\:
 servername=Servername \:
 session_argument_name=Session Argument Name
Index: src/core/org/apache/jmeter/resources/messages_tr.properties
===================================================================
--- src/core/org/apache/jmeter/resources/messages_tr.properties	(revision 653098)
+++ src/core/org/apache/jmeter/resources/messages_tr.properties	(working copy)
@@ -674,9 +674,9 @@
 secure=G\u00FCvenli
 send_file=\u0130stekle Beraber Dosya G\u00F6nder\:
 send_file_browse=G\u00F6zat...
-send_file_filename_label=Dosya ismi\:
-send_file_mime_label=MIME Tipi
-send_file_param_name_label="isim" \u00F6zniteli\u011Fi de\u011Feri\:
+send_file_filename_label=Dosya Yolu\:
+send_file_mime_label=MIME Tipi\:
+send_file_param_name_label=Parametre \u0130smi\:
 server=Sunucu \u0130smi veya IP\:
 servername=Sunucu \u0130smi \:
 session_argument_name=Oturum Arg\u00FCman\u0131 \u0130smi
Index: src/core/org/apache/jmeter/util/JMeterVersion.java
===================================================================
--- src/core/org/apache/jmeter/util/JMeterVersion.java	(revision 653098)
+++ src/core/org/apache/jmeter/util/JMeterVersion.java	(working copy)
@@ -44,7 +44,7 @@
 	 * This ensures that JMeterUtils always gets the correct
 	 * version, even if JMeterUtils is not re-compiled during the build.
 	 */
-	private static final String VERSION = "2.3.2";
+	private static final String VERSION = "2.3.20080503";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2008 The Apache Software Foundation";
 
Index: build.xml
===================================================================
--- build.xml	(revision 653098)
+++ build.xml	(working copy)
@@ -1716,6 +1716,7 @@
       <classpath>
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <fileset dir="${lib.opt}" includes="optional.jar"/>
+        <pathelement location="${build.test}"/>
         <path refid="classpath"/>
       </classpath>
   <test name="${test.case}" todir="reports"/>
@@ -1749,4 +1750,4 @@
     		revisionProperty="svn.revision"/>
     	</svn>
     </target>
-</project>
\ No newline at end of file
+</project>
Index: bin/testfiles/LoopTestPlan.jmx
===================================================================
--- bin/testfiles/LoopTestPlan.jmx	(revision 653098)
+++ bin/testfiles/LoopTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,61 +28,68 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <stringProp name="LoopController.continue_forever">true</stringProp>
           <stringProp name="LoopController.loops">5</stringProp>
-          <stringProp name="LoopController.continue_forever">true</stringProp>
         </LoopController>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -105,10 +113,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">loop-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/OnceOnlyTestPlan.jmx
===================================================================
--- bin/testfiles/OnceOnlyTestPlan.jmx	(revision 653098)
+++ bin/testfiles/OnceOnlyTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">3</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,58 +28,65 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -102,10 +110,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">once-only-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/AuthManagerTestPlan.jmx
===================================================================
--- bin/testfiles/AuthManagerTestPlan.jmx	(revision 653098)
+++ bin/testfiles/AuthManagerTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -30,83 +31,92 @@
           <collectionProp name="AuthManager.auth_list">
             <elementProp name="" elementType="Authorization">
               <stringProp name="Authorization.url">http://localhost/secret</stringProp>
+              <stringProp name="Authorization.username">kevin</stringProp>
+              <stringProp name="Authorization.password">spot</stringProp>
+              <stringProp name="Authorization.domain"></stringProp>
               <stringProp name="Authorization.realm"></stringProp>
-              <stringProp name="Authorization.domain"></stringProp>
-              <stringProp name="Authorization.password">spot</stringProp>
-              <stringProp name="Authorization.username">kevin</stringProp>
             </elementProp>
           </collectionProp>
         </AuthManager>
         <hashTree/>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">localhost</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">localhost</stringProp>
           <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage1" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/secret/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage2" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/secret/index2.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="NoSecretPage" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -130,10 +140,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">auth-manager.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/AssertionTestPlan.jmx
===================================================================
--- bin/testfiles/AssertionTestPlan.jmx	(revision 653098)
+++ bin/testfiles/AssertionTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,22 +28,24 @@
       </ThreadGroup>
       <hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree>
           <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
@@ -56,7 +59,9 @@
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -80,14 +85,14 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">assertion.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
         <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -111,10 +116,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename"></stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/GuiTest.jmx
===================================================================
--- bin/testfiles/GuiTest.jmx	(revision 653098)
+++ bin/testfiles/GuiTest.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -20,6 +20,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Components" enabled="true">
@@ -29,8 +30,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -56,7 +57,7 @@
           </ResponseAssertion>
           <hashTree/>
           <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
-            <longProp name="DurationAssertion.duration">0</longProp>
+            <stringProp name="DurationAssertion.duration">0</stringProp>
           </DurationAssertion>
           <hashTree/>
           <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
@@ -91,17 +92,18 @@
           <hashTree/>
           <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
             <intProp name="ThroughputController.style">0</intProp>
+            <boolProp name="ThroughputController.perThread">true</boolProp>
+            <intProp name="ThroughputController.maxThroughput">1</intProp>
             <FloatProperty>
+              <name>ThroughputController.percentThroughput</name>
               <value>100.0</value>
               <savedValue>0.0</savedValue>
-              <name>ThroughputController.percentThroughput</name>
             </FloatProperty>
-            <boolProp name="ThroughputController.perThread">true</boolProp>
-            <intProp name="ThroughputController.maxThroughput">1</intProp>
           </ThroughputController>
           <hashTree/>
           <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
             <stringProp name="IfController.condition">${__threadNum()} == 3</stringProp>
+            <stringProp name="IfController.evaluateAll">false</stringProp>
           </IfController>
           <hashTree/>
         </hashTree>
@@ -125,6 +127,7 @@
             <stringProp name="CounterConfig.name"></stringProp>
             <boolProp name="CounterConfig.per_user">false</boolProp>
             <stringProp name="CounterConfig.end">0</stringProp>
+            <stringProp name="CounterConfig.format"></stringProp>
           </CounterConfig>
           <hashTree/>
           <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
@@ -161,8 +164,13 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Timers" enabled="true"/>
         <hashTree>
           <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
-            <stringProp name="throughput">60</stringProp>
+            <doubleProp>
+              <name>throughput</name>
+              <value>60.0</value>
+              <savedValue>0.0</savedValue>
+            </doubleProp>
             <boolProp name="legacyMode">false</boolProp>
+            <stringProp name="calcMode">sadece bu iş parçacığı</stringProp>
           </ConstantThroughputTimer>
           <hashTree/>
           <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
@@ -183,7 +191,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Visualizers" enabled="true"/>
         <hashTree>
           <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -207,14 +217,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphAccumVisualizer" testclass="ResultCollector" testname="Graph Accum Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -238,14 +248,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -269,14 +279,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -300,14 +310,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SplineVisualizer" testclass="ResultCollector" testname="Spline Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -331,14 +341,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="StatVisualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -362,14 +372,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Table Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -393,14 +403,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Full Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -424,10 +434,8 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
         </hashTree>
@@ -439,8 +447,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -459,6 +467,11 @@
           <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
             <stringProp name="variableNames"></stringProp>
             <stringProp name="filename"></stringProp>
+            <stringProp name="fileEncoding"></stringProp>
+            <stringProp name="delimiter">,</stringProp>
+            <boolProp name="quotedData">false</boolProp>
+            <boolProp name="recycle">true</boolProp>
+            <boolProp name="stopThread">false</boolProp>
           </CSVDataSet>
           <hashTree/>
         </hashTree>
@@ -467,8 +480,8 @@
           <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
           <hashTree/>
           <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+            <boolProp name="LoopController.continue_forever">true</boolProp>
             <stringProp name="LoopController.loops">1</stringProp>
-            <boolProp name="LoopController.continue_forever">true</boolProp>
           </LoopController>
           <hashTree/>
         </hashTree>
@@ -480,8 +493,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -493,6 +506,11 @@
           <ConfigTestElement guiclass="FtpConfigGui" testclass="ConfigTestElement" testname="FTP Config" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
+            <stringProp name="FTPSampler.localfilename"></stringProp>
+            <stringProp name="FTPSampler.inputdata"></stringProp>
+            <stringProp name="FTPSampler.binarymode">false</stringProp>
+            <stringProp name="FTPSampler.saveresponse">false</stringProp>
+            <stringProp name="FTPSampler.upload">false</stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
@@ -501,6 +519,11 @@
           <FTPSampler guiclass="FtpTestSamplerGui" testclass="FTPSampler" testname="FTP Test Sampler" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
+            <stringProp name="FTPSampler.localfilename"></stringProp>
+            <stringProp name="FTPSampler.inputdata"></stringProp>
+            <stringProp name="FTPSampler.binarymode">false</stringProp>
+            <stringProp name="FTPSampler.saveresponse">false</stringProp>
+            <stringProp name="FTPSampler.upload">false</stringProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
           </FTPSampler>
@@ -514,8 +537,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -525,13 +548,14 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
@@ -547,8 +571,8 @@
           </AuthManager>
           <hashTree/>
           <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Panel" enabled="true">
+            <collectionProp name="CookieManager.cookies"/>
             <boolProp name="CookieManager.clearEachIteration">false</boolProp>
-            <collectionProp name="CookieManager.cookies"/>
           </CookieManager>
           <hashTree/>
           <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Panel" enabled="true">
@@ -562,12 +586,12 @@
           <hashTree/>
           <ParamModifier guiclass="ParamModifierGui" testclass="ParamModifier" testname="Param Modifier" enabled="true">
             <elementProp name="ParamModifier.mask" elementType="ParamMask">
-              <longProp name="ParamModifier.upper_bound">10</longProp>
+              <stringProp name="ParamModifier.field_name"></stringProp>
               <stringProp name="ParamModifier.prefix"></stringProp>
               <longProp name="ParamModifier.lower_bound">0</longProp>
+              <longProp name="ParamModifier.upper_bound">10</longProp>
+              <longProp name="ParamModifier.increment">1</longProp>
               <stringProp name="ParamModifier.suffix"></stringProp>
-              <longProp name="ParamModifier.increment">1</longProp>
-              <stringProp name="ParamModifier.field_name"></stringProp>
             </elementProp>
           </ParamModifier>
           <hashTree/>
@@ -576,6 +600,7 @@
             <boolProp name="path_extension_no_questionmark">false</boolProp>
             <stringProp name="argument_name"></stringProp>
             <boolProp name="path_extension_no_equals">false</boolProp>
+            <boolProp name="cache_value">true</boolProp>
           </URLRewritingModifier>
           <hashTree/>
           <UserParameterModifier guiclass="UserParameterModifierGui" testclass="UserParameterModifier" testname="User Parameter Modifier" enabled="true">
@@ -586,49 +611,61 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Test Sampler" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP Sampler" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
+              <collectionProp name="HTTPFileArgs.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-              <collectionProp name="Arguments.arguments"/>
-            </elementProp>
             <intProp name="HTTPSampler.port">-1</intProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
             <stringProp name="SoapSampler.URL_DATA"></stringProp>
+            <stringProp name="SoapSampler.xml_data_file"></stringProp>
+            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
+            <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
+            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           </SoapSampler>
           <hashTree/>
           <WebServiceSampler guiclass="WebServiceSamplerGui" testclass="WebServiceSampler" testname="WebService (SOAP) Request" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
+              <collectionProp name="HTTPFileArgs.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="WebServiceSampler.proxy_host"></stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-              <collectionProp name="Arguments.arguments"/>
-            </elementProp>
             <stringProp name="WebServiceSampler.proxy_port"></stringProp>
-            <intProp name="HTTPSampler.port">80</intProp>
+            <stringProp name="HTTPSampler.port">80</stringProp>
             <stringProp name="WebServiceSampler.use_proxy">false</stringProp>
             <stringProp name="Soap.Action"></stringProp>
             <stringProp name="WebServiceSampler.xml_data_file"></stringProp>
@@ -638,14 +675,18 @@
             <stringProp name="WebServiceSampler.memory_cache">false</stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
+            <stringProp name="WebserviceSampler.timeout"></stringProp>
           </WebServiceSampler>
           <hashTree/>
           <AccessLogSampler guiclass="TestBeanGUI" testclass="AccessLogSampler" testname="Tomcat Access Log Sampler" enabled="true">
-            <stringProp name="AccessLogSampler.parser_class_name">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
+              <collectionProp name="HTTPFileArgs.files"/>
+            </elementProp>
+            <stringProp name="AccessLogSampler.parser_class_name">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
+            <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <intProp name="HTTPSampler.port">80</intProp>
             <stringProp name="parserClassName">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
             <stringProp name="portString"></stringProp>
@@ -666,8 +707,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -677,94 +718,93 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <JavaConfig guiclass="JavaConfigGui" testclass="JavaConfig" testname="Java Config" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
+                  <stringProp name="Argument.name">SleepTime</stringProp>
+                  <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">1000</stringProp>
-                  <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
+                  <stringProp name="Argument.name">SleepMask</stringProp>
+                  <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0x3FF</stringProp>
-                  <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
           </JavaConfig>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java SleepTest" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
+                  <stringProp name="Argument.name">SleepTime</stringProp>
+                  <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">1000</stringProp>
-                  <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
+                  <stringProp name="Argument.name">SleepMask</stringProp>
+                  <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0x3FF</stringProp>
-                  <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
           </JavaSampler>
           <hashTree/>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="JavaTest" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="Sleep_Time" elementType="Argument">
+                  <stringProp name="Argument.name">Sleep_Time</stringProp>
+                  <stringProp name="Argument.value">100</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">100</stringProp>
-                  <stringProp name="Argument.name">Sleep_Time</stringProp>
                 </elementProp>
                 <elementProp name="Sleep_Mask" elementType="Argument">
+                  <stringProp name="Argument.name">Sleep_Mask</stringProp>
+                  <stringProp name="Argument.value">0xFF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0xFF</stringProp>
-                  <stringProp name="Argument.name">Sleep_Mask</stringProp>
                 </elementProp>
                 <elementProp name="Label" elementType="Argument">
+                  <stringProp name="Argument.name">Label</stringProp>
+                  <stringProp name="Argument.value">JavaTest</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">JavaTest</stringProp>
-                  <stringProp name="Argument.name">Label</stringProp>
                 </elementProp>
                 <elementProp name="ResponseCode" elementType="Argument">
+                  <stringProp name="Argument.name">ResponseCode</stringProp>
+                  <stringProp name="Argument.value">200 (or any other number)</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">200 (or any other number)</stringProp>
-                  <stringProp name="Argument.name">ResponseCode</stringProp>
                 </elementProp>
                 <elementProp name="ResponseMessage" elementType="Argument">
+                  <stringProp name="Argument.name">ResponseMessage</stringProp>
+                  <stringProp name="Argument.value">OK (or any other text)</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">OK (or any other text)</stringProp>
-                  <stringProp name="Argument.name">ResponseMessage</stringProp>
                 </elementProp>
                 <elementProp name="Status" elementType="Argument">
+                  <stringProp name="Argument.name">Status</stringProp>
+                  <stringProp name="Argument.value">OK</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">OK</stringProp>
-                  <stringProp name="Argument.name">Status</stringProp>
                 </elementProp>
                 <elementProp name="SamplerData" elementType="Argument">
+                  <stringProp name="Argument.name">SamplerData</stringProp>
+                  <stringProp name="Argument.value">SamplerData goes here</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">SamplerData goes here</stringProp>
-                  <stringProp name="Argument.name">SamplerData</stringProp>
                 </elementProp>
                 <elementProp name="ResultData" elementType="Argument">
+                  <stringProp name="Argument.name">ResultData</stringProp>
+                  <stringProp name="Argument.value">ResultData goes here</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">ResultData goes here</stringProp>
-                  <stringProp name="Argument.name">ResultData</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
           </JavaSampler>
           <hashTree/>
           <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
-            <stringProp name="BeanShellSampler.filename"></stringProp>
             <stringProp name="BeanShellSampler.query">ResponseCode=12;
 ResponseMessage=&quot;Buckle my shoe&quot;;
 IsSuccess=false;
@@ -772,7 +812,9 @@
 // FileName is the Script file name
 // bsh.args[1] == &quot;quick&quot;
 return &quot;This will go into the Response Data field&quot;;</stringProp>
+            <stringProp name="BeanShellSampler.filename"></stringProp>
             <stringProp name="BeanShellSampler.parameters">the quick brown fox</stringProp>
+            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
           </BeanShellSampler>
           <hashTree/>
         </hashTree>
@@ -784,8 +826,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -822,6 +864,9 @@
             <stringProp name="JDBCSampler.driver"></stringProp>
             <stringProp name="JDBCSampler.connPoolClass">org.apache.jmeter.protocol.jdbc.util.JMeter19ConnectionPool</stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
+            <stringProp name="queryType">Select Statement</stringProp>
+            <stringProp name="queryArguments"></stringProp>
+            <stringProp name="queryArgumentsTypes"></stringProp>
           </JDBCSampler>
           <hashTree/>
         </hashTree>
@@ -833,8 +878,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -844,9 +889,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="LdapConfigGui" testclass="ConfigTestElement" testname="LDAP Request Defaults" enabled="true">
-            <stringProp name="rootdn"></stringProp>
             <stringProp name="servername"></stringProp>
             <stringProp name="port"></stringProp>
+            <stringProp name="rootdn"></stringProp>
             <boolProp name="user_defined">false</boolProp>
           </ConfigTestElement>
           <hashTree/>
@@ -854,12 +899,12 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <LDAPSampler guiclass="LdapTestSamplerGui" testclass="LDAPSampler" testname="LDAP Request" enabled="true">
+            <stringProp name="servername"></stringProp>
+            <stringProp name="port"></stringProp>
             <stringProp name="rootdn"></stringProp>
-            <stringProp name="servername"></stringProp>
+            <boolProp name="user_defined">false</boolProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
-            <stringProp name="port"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
-            <boolProp name="user_defined">false</boolProp>
           </LDAPSampler>
           <hashTree/>
         </hashTree>
Index: bin/testfiles/InterleaveTestPlan2.jmx
===================================================================
--- bin/testfiles/InterleaveTestPlan2.jmx	(revision 653098)
+++ bin/testfiles/InterleaveTestPlan2.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">8</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -31,13 +32,14 @@
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path">/</stringProp>
-            <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path">/</stringProp>
           </ConfigTestElement>
           <hashTree/>
           <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
@@ -45,41 +47,45 @@
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+                <collectionProp name="HTTPFileArgs.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="CVS Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/cvsindex.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+                <collectionProp name="HTTPFileArgs.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
@@ -88,47 +94,53 @@
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+                <collectionProp name="HTTPFileArgs.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+                <collectionProp name="HTTPFileArgs.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -152,10 +164,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test2.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/HeaderManagerTestPlan.jmx
===================================================================
--- bin/testfiles/HeaderManagerTestPlan.jmx	(revision 653098)
+++ bin/testfiles/HeaderManagerTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -29,33 +30,37 @@
         <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
           <collectionProp name="HeaderManager.headers">
             <elementProp name="User-Agent" elementType="Header">
+              <stringProp name="Header.name">User-Agent</stringProp>
               <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 5.5; Windows 98)</stringProp>
-              <stringProp name="Header.name">User-Agent</stringProp>
             </elementProp>
           </collectionProp>
         </HeaderManager>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+            <collectionProp name="HTTPFileArgs.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -79,10 +84,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">header-manager.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/Modification Manager.jmx
===================================================================
--- bin/testfiles/Modification Manager.jmx	(revision 653098)
+++ bin/testfiles/Modification Manager.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Modification Manager" enabled="true"/>
@@ -16,15 +17,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Web Testing" enabled="true">
-            <stringProp name="HTTPSampler.path">/xdx/admin/inspect_job.jsp</stringProp>
-            <stringProp name="HTTPSampler.method">GET</stringProp>
-            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
-                <elementProp name="" elementType="HTTPArgument">
+                <elementProp name="request.job_id" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">.*</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
@@ -33,7 +28,7 @@
                   <stringProp name="HTTPArgument.encoded_name">request.job_id</stringProp>
                   <stringProp name="HTTPArgument.encoded_value">.*</stringProp>
                 </elementProp>
-                <elementProp name="" elementType="HTTPArgument">
+                <elementProp name="request.action1" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">opjobadmin.action.inspect</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
@@ -44,23 +39,32 @@
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.port">80</stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path">/xdx/admin/inspect_job.jsp</stringProp>
+            <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain">13.231.197.158</stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port">80</stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain">13.231.197.158</stringProp>
+            <stringProp name="HTTPSampler.port">80</stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
Index: bin/testfiles/InterleaveTestPlan.jmx
===================================================================
--- bin/testfiles/InterleaveTestPlan.jmx	(revision 653098)
+++ bin/testfiles/InterleaveTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">5</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -31,75 +32,84 @@
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Gump Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/gump</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -123,10 +133,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/SimpleTestPlan.jmx
===================================================================
--- bin/testfiles/SimpleTestPlan.jmx	(revision 653098)
+++ bin/testfiles/SimpleTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TestPlan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="LoopController" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,99 +28,110 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ant Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/ant/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/ant/antnews.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log4J Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/log4j/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="History Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/log4j/docs/history.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs" guiclass="HTTPFileArgsPanel" testclass="HTTPFileArgs" enabled="true">
+              <collectionProp name="HTTPFileArgs.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -143,10 +155,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">simple-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/saveservice.properties
===================================================================
--- bin/saveservice.properties	(revision 653098)
+++ bin/saveservice.properties	(working copy)
@@ -113,6 +113,9 @@
 HTMLReportWriterGui=org.apache.jmeter.report.writers.gui.HTMLReportWriterGui
 HTTPArgument=org.apache.jmeter.protocol.http.util.HTTPArgument
 HTTPArgumentsPanel=org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel
+HTTPFileArg=org.apache.jmeter.protocol.http.util.HTTPFileArg
+HTTPFileArgs=org.apache.jmeter.protocol.http.util.HTTPFileArgs
+HTTPFileArgsPanel=org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel
 HttpDefaultsGui=org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui
 HttpGenericSampler=org.apache.jmeter.protocol.http.sampler.HttpGenericSampler
 HttpGenericSamplerGui=org.apache.jmeter.protocol.http.control.gui.HttpGenericSamplerGui
