Index: test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java	(revision 649327)
+++ test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java	(working copy)
@@ -29,6 +29,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 
 public class TestHttpRequestHdr  extends JMeterTestCase {
     public TestHttpRequestHdr(String name) {
@@ -465,9 +466,10 @@
         // Check arguments
         Arguments arguments = s.getArguments();
         assertEquals(0, arguments.getArgumentCount());
-        assertEquals(fileFieldValue, s.getFileField());
-        assertEquals(fileName, s.getFilename());
-        assertEquals(mimeType, s.getMimetype());
+        HTTPFile file = s.getFirstUploadableFile();
+        assertEquals(fileFieldValue, file.getParamName());
+        assertEquals(fileName, file.getPath());
+        assertEquals(mimeType, file.getMimeType());
     }        
 
     private String createMultipartFormBody(String titleValue, String descriptionValue, String contentEncoding, boolean includeExtraHeaders, String boundary, String endOfLine) {
Index: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java	(revision 649327)
+++ test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java	(working copy)
@@ -33,6 +33,7 @@
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -1096,15 +1097,13 @@
     		String titleValue,
     		String descriptionField,
     		String descriptionValue,
-    		String fileField,
+    		String paramName,
     		File fileValue,
     		String fileMimeType) {
     	// Set the form data
     	setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);
     	// Set the file upload data
-    	httpSampler.setFileField(fileField);
-    	httpSampler.setFilename(fileValue.getAbsolutePath());
-    	httpSampler.setMimetype(fileMimeType);    	
+    	httpSampler.addFileForUpload(new HTTPFile(fileValue.getAbsolutePath(), paramName, fileMimeType));
     }
 
     /**
Index: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java	(revision 649327)
+++ test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java	(working copy)
@@ -36,6 +36,7 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -586,15 +587,11 @@
      * 
      * @param httpSampler
      */
-    private void setupFilepart(HTTPSampler httpSampler, String fileField, File file, String mimeType) {
-        httpSampler.setFileField(fileField);
-        if(file != null) {
-            httpSampler.setFilename(file.getAbsolutePath());
-        }
-        else {
-            httpSampler.setFilename("");
-        }
-        httpSampler.setMimetype(mimeType);
+    private void setupFilepart(HTTPSampler httpSampler, String paramName, File file, String mimeType) {
+        String path = (file != null)
+            ? file.getAbsolutePath()
+            : "";
+         httpSampler.setFileForUpload(new HTTPFile(path, paramName, mimeType));
     }
 
     /**
Index: test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java	(revision 0)
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.sampler;
+
+import java.net.URLConnection;
+import junit.framework.TestCase;
+
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.jmeter.protocol.http.util.HTTPConstants;
+
+public class PutWriterTest extends TestCase {
+
+	public PutWriterTest(String name) {
+		super(name);
+	}
+
+	public void testSetHeaders() throws Exception {
+		URLConnection uc = new NullURLConnection();
+		HTTPSampler sampler = new HTTPNullSampler();
+		sampler.setFileForUpload(new HTTPFile("file1", null, "mime1"));
+		PutWriter pw = new PutWriter();
+		pw.setHeaders(uc, sampler);
+		assertEquals("mime1", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
+		uc = new NullURLConnection();
+		sampler.setFileForUpload(new HTTPFile("file2", "param2", "mime2"));
+		pw.setHeaders(uc, sampler);
+		assertEquals("mime2", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java	(revision 649327)
+++ test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java	(working copy)
@@ -20,6 +20,10 @@
 
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.commons.httpclient.methods.PostMethod;
 
 import junit.framework.TestCase;
 
@@ -34,14 +38,20 @@
         HTTPSamplerBase sampler = new HTTPNullSampler();
         Arguments args;
         Argument arg;
-        
+        Files files;
+        File file;
+
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         sampler.parseArguments("");
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         sampler.parseArguments("name1");
         args = sampler.getArguments();
         assertEquals(1,args.getArgumentCount());
@@ -49,7 +59,9 @@
         assertEquals("name1",arg.getName());
         assertEquals("",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         sampler.parseArguments("name2=");
         args = sampler.getArguments();
         assertEquals(2,args.getArgumentCount());
@@ -57,7 +69,9 @@
         assertEquals("name2",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         sampler.parseArguments("name3=value3");
         args = sampler.getArguments();
         assertEquals(3,args.getArgumentCount());
@@ -65,7 +79,8 @@
         assertEquals("name3",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("value3",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
     }
 
     // Parse arguments all at once
@@ -73,29 +88,40 @@
         HTTPSamplerBase sampler = new HTTPNullSampler();
         Arguments args;
         Argument arg;
-        
+        Files files;
+        File file;
+
         args = sampler.getArguments();
         assertEquals(0,args.getArgumentCount());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         sampler.parseArguments("&name1&name2=&name3=value3");
         args = sampler.getArguments();
         assertEquals(3,args.getArgumentCount());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         arg=args.getArgument(0);
         assertEquals("name1",arg.getName());
         assertEquals("",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         arg=args.getArgument(1);
         assertEquals("name2",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
+
         arg=args.getArgument(2);
         assertEquals("name3",arg.getName());
         assertEquals("=",arg.getMetaData());
         assertEquals("value3",arg.getValue());
-        
+        files = sampler.getFiles();
+        assertEquals(0,files.getFileCount());
     }
 
         public void testArgumentWithoutEquals() throws Exception {
@@ -212,4 +238,50 @@
             config.setDomain("www.apache.org");
             assertEquals("http://www.apache.org/index.html", config.getUrl().toString());
         }
+
+    public void testAddSetGetFileForUpload() {
+        HTTPSamplerBase sampler = new HTTPNullSampler();
+        sampler.addFileForUpload(new HTTPFile("file1"));
+        sampler.addFileForUpload(new HTTPFile("file2"));
+        Files files = sampler.getFiles();
+        assertEquals(2, files.getFileCount());
+        File file = files.getFile(0);
+        assertEquals("file1", file.getPath());
+        file = files.getFile(1);
+        assertEquals("file2", file.getPath());
+        file = sampler.getFirstUploadableFile();
+        assertEquals("file1", file.getPath());
+
+        sampler.setFileForUpload(new HTTPFile("file3", "param3", "mime3"));
+        files = sampler.getFiles();
+        assertEquals(1, files.getFileCount());
+        HTTPFile hfile = (HTTPFile) files.getFile(0);
+        assertEquals("file3", hfile.getPath());
+        assertEquals("param3", hfile.getParamName());
+        assertEquals("mime3", hfile.getMimeType());
+
+        Files files2 = new Files();
+        files2.addFile(new HTTPFile("file1"));
+        files2.addFile(new HTTPFile("file2"));
+        sampler.setFiles(files2);
+        files = sampler.getFiles();
+        assertEquals(2, files.getFileCount());
+        file = files.getFile(0);
+        assertEquals("file1", file.getPath());
+        file = files.getFile(1);
+        assertEquals("file2", file.getPath());
+    }
+
+    public void testGetSendFileAsPostBody() {
+        HTTPSamplerBase sampler = new HTTPNullSampler();
+        assertFalse(sampler.getSendFileAsPostBody());
+        sampler.addFileForUpload(new HTTPFile("file1"));
+        assertTrue(sampler.getSendFileAsPostBody());
+        sampler.addFileForUpload(new HTTPFile("file2"));
+        assertFalse(sampler.getSendFileAsPostBody());
+        sampler.setFileForUpload(new HTTPFile("file", null, "mime"));
+        assertTrue(sampler.getSendFileAsPostBody());
+        sampler.setFileForUpload(new HTTPFile("file", "param", "mime"));
+        assertFalse(sampler.getSendFileAsPostBody());
+    }
 }
Index: test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java	(revision 0)
@@ -0,0 +1,53 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.sampler;
+
+import java.net.URL;
+import java.net.URLConnection;
+import java.net.MalformedURLException;
+import java.util.Map;
+import java.util.Properties;
+
+/**
+ * Dummy URLConnection class for use by classes that need an
+ * URLConnection for junit tests.
+ */
+public final class NullURLConnection extends URLConnection {
+
+	private Map data = new Properties();
+
+	public NullURLConnection() throws MalformedURLException {
+		this(new URL("http://localhost"));
+	}
+
+	public NullURLConnection(URL url) {
+		super(url);
+	}
+
+	public void connect() {
+	}
+
+	public void setRequestProperty(String name, String value) {
+		data.put(name, value);
+	}
+
+	public String getRequestProperty(String name) {
+		return (String) data.get(name);
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java	(revision 649327)
+++ test/src/org/apache/jmeter/protocol/http/sampler/HTTPNullSampler.java	(working copy)
@@ -24,7 +24,7 @@
  * Dummy HTTPSampler class for use by classes that need an HTTPSampler, but that
  * don't need an actual sampler, e.g. for Parsing testing.
  */
-public final class HTTPNullSampler extends HTTPSamplerBase {
+public final class HTTPNullSampler extends HTTPSampler {
 
 	/*
 	 * (non-Javadoc)
Index: test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFilesPanel.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFilesPanel.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/gui/TestHTTPFilesPanel.java	(revision 0)
@@ -0,0 +1,77 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.gui;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.util.JMeterUtils;
+
+/**
+ * @author Erhan Kesken
+ */
+public class TestHTTPFilesPanel extends TestCase {
+	/**
+	 * Create a new test.
+	 *
+	 * @param name
+	 *            the name of the test
+	 */
+	public TestHTTPFilesPanel(String name) {
+		super(name);
+		JMeterUtils.getProperties("testfiles/jmetertest.properties");
+	}
+
+	/**
+	 * Test constructors.
+	 *
+	 * @throws Exception
+	 *             if an exception occurred during the test
+	 */
+	public void testConstructors() throws Exception {
+		assertTrue("HTTPFilesPanel Functor", HTTPFilesPanel.testFunctors());
+	}
+
+	public void testCreateTestElement() throws Exception {
+		HTTPFilesPanel panel = new HTTPFilesPanel();
+		TestElement te = panel.createTestElement();
+		assertEquals("", te.toString());
+		assertEquals("User Defined Variables", te.getName());
+		assertEquals("", te.getComment());
+	}
+
+	public void testConfigure() throws Exception {
+		HTTPFilesPanel panel = new HTTPFilesPanel();
+		Files files = new Files();
+		files.addFile(new HTTPFile("file1", "param1", "mime1"));
+		panel.configure(files);
+		Files filesReturned = (Files) panel.createTestElement();
+		assertEquals(1, filesReturned.getFileCount());
+		HTTPFile file = (HTTPFile) filesReturned.iterator().next().getObjectValue();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("mime1", file.getMimeType());
+		files = new Files();
+		panel.configure(files);
+		filesReturned = (Files) panel.createTestElement();
+		assertEquals(0, filesReturned.getFileCount());
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java	(revision 0)
@@ -0,0 +1,97 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.config;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.config.Argument;
+import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+
+/**
+ * @author Erhan Kesken
+ */
+public class MultipartUrlConfigTest extends TestCase {
+
+	public MultipartUrlConfigTest(String name) {
+		super(name);
+	}
+
+	public void testConstructors() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		assertEquals(0, muc.getArguments().getArgumentCount());
+		assertEquals(0, muc.getFiles().getFileCount());
+		muc = new MultipartUrlConfig("boundary");
+		assertEquals(0, muc.getArguments().getArgumentCount());
+		assertEquals(0, muc.getFiles().getFileCount());
+		assertEquals("boundary", muc.getBoundary());
+	}
+
+	public void testAddGetFiles() {
+		MultipartUrlConfig muc = new MultipartUrlConfig();
+		muc.addFile("file1", "param1", "mime1");
+		Files files = muc.getFiles();
+		assertEquals(1, files.getFileCount());
+		HTTPFile file = (HTTPFile) files.iterator().next().getObjectValue();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("mime1", file.getMimeType());
+	}
+
+	public void testParseArguments() {
+		String queryString
+			= "Content-Disposition: form-data; name=\"aa\"\n"
+			+ "Content-Type: text/plain; charset=ISO-8859-1\n"
+			+ "Content-Transfer-Encoding: 8bit\n"
+			+ "\n"
+			+ "aa\n"
+			+ "--7d159c1302d0y0\n"
+			+ "Content-Disposition: form-data; name=\"xx\"\n"
+			+ "Content-Type: text/plain; charset=ISO-8859-1\n"
+			+ "Content-Transfer-Encoding: 8bit\n"
+			+ "\n"
+			+ "xx\n"
+			+ "--7d159c1302d0y0\n"
+			+ "Content-Disposition: form-data; name=\"param1\"; filename=\"file1\"\n"
+			+ "Content-Type: text/plain\n"
+			+ "Content-Transfer-Encoding: binary\n"
+			+ "\n"
+			+ "file content\n"
+			+ "\n";
+		MultipartUrlConfig muc = new MultipartUrlConfig("7d159c1302d0y0");
+		muc.parseArguments(queryString);
+		Files files = muc.getFiles();
+		assertEquals(1, files.getFileCount());
+		HTTPFile file = (HTTPFile) files.iterator().next().getObjectValue();
+		assertEquals("file1", file.getPath());
+		assertEquals("param1", file.getParamName());
+		assertEquals("text/plain", file.getMimeType());
+		Arguments args = muc.getArguments();
+		assertEquals(2, args.getArgumentCount());
+		Argument arg = args.getArgument(0);
+		assertEquals("aa", arg.getName());
+		assertEquals("aa", arg.getValue());
+		arg = args.getArgument(1);
+		assertEquals("xx", arg.getName());
+		assertEquals("xx", arg.getValue());
+	}
+}
Index: test/src/org/apache/jmeter/protocol/http/util/TestHTTPFile.java
===================================================================
--- test/src/org/apache/jmeter/protocol/http/util/TestHTTPFile.java	(revision 0)
+++ test/src/org/apache/jmeter/protocol/http/util/TestHTTPFile.java	(revision 0)
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+
+public class TestHTTPFile extends TestCase {
+	public TestHTTPFile(String name) {
+		super(name);
+	}
+
+	public void testConstructors() throws Exception {
+		HTTPFile file = new HTTPFile();
+		assertEquals("no parameter failure", "", file.getPath());
+		assertEquals("no parameter failure", "", file.getParamName());
+		assertEquals("no parameter failure", "", file.getMimeType());
+		file = new HTTPFile("path");
+		assertEquals("single parameter failure", "path", file.getPath());
+		assertEquals("single parameter failure", null, file.getParamName());
+		assertEquals("single parameter failure", null, file.getMimeType());
+		file = new HTTPFile("path", "param", "mimetype");
+		assertEquals("two parameter failure", "path", file.getPath());
+		assertEquals("two parameter failure", "param", file.getParamName());
+		assertEquals("two parameter failure", "mimetype", file.getMimeType());
+		HTTPFile file2 = new HTTPFile(file);
+		assertEquals("copy constructor failure", "path", file2.getPath());
+		assertEquals("copy constructor failure", "param", file2.getParamName());
+		assertEquals("copy constructor failure", "mimetype", file2.getMimeType());
+		File file3 = new File("path");
+		file2 = new HTTPFile(file3);
+		assertEquals("convertor constructor failure", "path", file2.getPath());
+		assertEquals("convertor constructor failure", null, file2.getParamName());
+		assertEquals("convertor constructor failure", null, file2.getMimeType());
+	}
+
+	public void testGettersSetters() throws Exception {
+		HTTPFile file = new HTTPFile();
+		assertEquals("", file.getPath());
+		assertEquals("", file.getParamName());
+		assertEquals("", file.getMimeType());
+		file.setPath("path");
+		file.setParamName("param");
+		file.setMimeType("mimetype");
+		file.setHeader("header");
+		assertEquals("path", file.getPath());
+		assertEquals("param", file.getParamName());
+		assertEquals("mimetype", file.getMimeType());
+		assertEquals("header", file.getHeader());
+	}
+
+	public void testConvertFilesToHTTP() throws Exception {
+		Files files = new Files();
+		files.addFile("file1");
+		files.addFile(new File("file2"));
+		HTTPFile.convertFilesToHTTP(files);
+		PropertyIterator iter = files.getFiles().iterator();
+		while (iter.hasNext()) {
+			File file = (File) iter.next().getObjectValue();
+			assertTrue(file instanceof HTTPFile);
+		}
+	}
+}
Index: test/src/org/apache/jmeter/config/TestFile.java
===================================================================
--- test/src/org/apache/jmeter/config/TestFile.java	(revision 0)
+++ test/src/org/apache/jmeter/config/TestFile.java	(revision 0)
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.config;
+
+import junit.framework.TestCase;
+
+public class TestFile extends TestCase {
+	public TestFile(String name) {
+		super(name);
+	}
+
+	public void testConstructors() throws Exception {
+		File file = new File();
+		assertEquals("", file.getPath());
+		file = new File("path");
+		assertEquals("path", file.getPath());
+	}
+
+	public void testGettersSetters() throws Exception {
+		File file = new File();
+		assertEquals("", file.getPath());
+		file.setPath("path");
+		assertEquals("path", file.getPath());
+	}
+
+	public void testToString() throws Exception {
+		File file = new File("path");
+		assertEquals("path", file.toString());
+	}
+}
Index: test/src/org/apache/jmeter/config/TestFiles.java
===================================================================
--- test/src/org/apache/jmeter/config/TestFiles.java	(revision 0)
+++ test/src/org/apache/jmeter/config/TestFiles.java	(revision 0)
@@ -0,0 +1,118 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.config;
+
+import java.util.List;
+import java.util.LinkedList;
+import junit.framework.TestCase;
+
+import org.apache.jmeter.testelement.property.PropertyIterator;
+
+public class TestFiles extends TestCase {
+	public TestFiles(String name) {
+		super(name);
+	}
+
+	public void testConstructors() throws Exception {
+		Files files = new Files();
+		assertEquals(0, files.getFileCount());
+	}
+
+	public void testAdding() throws Exception {
+		Files files = new Files();
+		assertEquals(0, files.getFileCount());
+		files.addFile("hede");
+		assertEquals(1, files.getFileCount());
+		assertEquals("hede", ((File) files.iterator().next().getObjectValue()).getPath());
+		File file = new File("hodo");
+		files.addFile(file);
+		assertEquals(2, files.getFileCount());
+		PropertyIterator iter = files.iterator();
+		assertEquals("hede", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("hodo", ((File) iter.next().getObjectValue()).getPath());
+		files.addEmptyFile();
+		assertEquals(3, files.getFileCount());
+		iter = files.iterator();
+		assertEquals("hede", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("hodo", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("", ((File) iter.next().getObjectValue()).getPath());
+	}
+
+	public void testSetFiles() throws Exception {
+		List newFiles = new LinkedList();
+		newFiles.add(new File("hede"));
+		Files files = new Files();
+		files.setFiles((List) newFiles);
+		assertEquals(1, files.getFileCount());
+		assertEquals("hede", ((File) files.iterator().next().getObjectValue()).getPath());
+	}
+
+	public void testRemoving() throws Exception {
+		Files files = new Files();
+		assertEquals(0, files.getFileCount());
+		files.addFile("hede");
+		assertEquals(1, files.getFileCount());
+		files.clear();
+		assertEquals(0, files.getFileCount());
+		files.addFile("file1");
+		files.addFile("file2");
+		files.addFile("file3");
+		File file = new File("file4");
+		files.addFile(file);
+		files.addFile("file5");
+		files.addFile("file6");
+		assertEquals(6, files.getFileCount());
+		files.removeFile("file3");
+		assertEquals(5, files.getFileCount());
+		PropertyIterator iter = files.iterator();
+		assertEquals("file1", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file4", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file5", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((File) iter.next().getObjectValue()).getPath());
+		files.removeFile(file);
+		assertEquals(4, files.getFileCount());
+		iter = files.iterator();
+		assertEquals("file1", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file5", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((File) iter.next().getObjectValue()).getPath());
+		files.removeFile(new File("file5"));
+		assertEquals(3, files.getFileCount());
+		iter = files.iterator();
+		assertEquals("file1", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file2", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((File) iter.next().getObjectValue()).getPath());
+		files.removeFile(1);
+		assertEquals(2, files.getFileCount());
+		iter = files.iterator();
+		assertEquals("file1", ((File) iter.next().getObjectValue()).getPath());
+		assertEquals("file6", ((File) iter.next().getObjectValue()).getPath());
+		files.removeAllFiles();
+		assertEquals(0, files.getFileCount());
+	}
+
+	public void testToString() throws Exception {
+		Files files = new Files();
+		files.addFile("file1");
+		files.addFile("file2");
+		files.addFile("file3");
+		assertEquals("file1&file2&file3", files.toString());
+	}
+}
Index: test/src/org/apache/jmeter/config/gui/TestFilesPanel.java
===================================================================
--- test/src/org/apache/jmeter/config/gui/TestFilesPanel.java	(revision 0)
+++ test/src/org/apache/jmeter/config/gui/TestFilesPanel.java	(revision 0)
@@ -0,0 +1,154 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ */
+
+package org.apache.jmeter.config.gui;
+
+import java.util.Collection;
+import java.awt.Color;
+
+import javax.swing.JButton;
+import javax.swing.JPanel;
+import javax.swing.JLabel;
+
+import junit.framework.TestCase;
+
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.ObjectTableModel;
+
+/**
+ * @author Erhan Kesken
+ */
+public class TestFilesPanel extends TestCase {
+	/**
+	 * Create a new test.
+	 * 
+	 * @param name
+	 *            the name of the test
+	 */
+	public TestFilesPanel(String name) {
+		super(name);
+		JMeterUtils.getProperties("testfiles/jmetertest.properties");
+	}
+
+	/**
+	 * Test constructors.
+	 * 
+	 * @throws Exception
+	 *             if an exception occurred during the test
+	 */
+	public void testConstructors() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		assertEquals(JMeterUtils.getResString("user_defined_variables"), panel.getTableLabel().getText());
+		panel = new FilesPanel("hede");
+		assertEquals("hede", panel.getTableLabel().getText());
+		panel = new FilesPanel("hede", null);
+		assertEquals("hede", panel.getTableLabel().getText());
+		assertTrue("FilesPanel Functor", FilesPanel.testFunctors());
+	}
+
+	public void testGetLabelResource() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		assertEquals("user_defined_variables", panel.getLabelResource());
+	}
+
+	public void testGetMenuCategories() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		Collection menu = panel.getMenuCategories();
+		assertEquals(1, menu.size());
+		assertEquals("[menu_config_element]", menu.toString());
+	}
+
+	public void testCreateTestElement() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		assertEquals("", panel.createTestElement().toString());
+	}
+
+	public void testModifyTestElement() throws Exception {
+		Files files = new Files();
+		files.addFile("file1");
+		FilesPanel panel = new FilesPanel();
+		panel.modifyTestElement(files);
+		assertEquals("User Defined Variables", files.getName());
+		assertEquals("", files.getComment());
+	}
+
+	public void testConfigure() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		Files files = new Files();
+		files.addFile("file1");
+		panel.configure(files);
+		JButton delete = panel.getDeleteButton();
+		assertTrue(delete.isEnabled());
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		File file = (File) tableModel.iterator().next();
+		assertEquals("file1", file.getPath());
+		files = new Files();
+		panel.configure(files);
+		delete = panel.getDeleteButton();
+		assertFalse(delete.isEnabled());
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testClear() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		Files files = new Files();
+		files.addFile("file1");
+		panel.configure(files);
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		panel.clear();
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testClearGui() throws Exception {
+		FilesPanel panel = new FilesPanel();
+		Files files = new Files();
+		files.addFile("file1");
+		panel.configure(files);
+		assertEquals("", panel.getName());
+		ObjectTableModel tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(1, tableModel.getRowCount());
+		panel.clearGui();
+		assertEquals("User Defined Variables", panel.getName());
+		tableModel = (ObjectTableModel) panel.getTable().getModel();
+		assertEquals(0, tableModel.getRowCount());
+	}
+
+	public void testMakeLabelPanel() throws Exception {
+		FilesPanel panel = new FilesPanel("hede", Color.GRAY);
+		JPanel lpanel = (JPanel) panel.makeLabelPanel(); 
+		assertEquals(Color.GRAY, lpanel.getBackground());
+		JLabel label = (JLabel) lpanel.getComponent(0);
+		assertEquals("hede", label.getText());
+	}
+
+	//TODO: needs a FileDialoger stub for following tests.
+	public void testMakeNewFile() throws Exception {
+	}
+
+	public void testAddDeleteFile() throws Exception {
+	}
+
+	public void testActionPerformed() throws Exception {
+	}
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java	(working copy)
@@ -42,6 +42,7 @@
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerFactory;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -418,9 +419,7 @@
                 // Set the form data
                 sampler.setArguments(urlConfig.getArguments());
                 // Set the file uploads
-                sampler.setFileField(urlConfig.getFileFieldName());
-                sampler.setFilename(urlConfig.getFilename());
-                sampler.setMimetype(urlConfig.getMimeType());
+                sampler.setFiles(urlConfig.getFiles());
             } else if (postData.trim().startsWith("<?")) {
                 // Not sure if this is needed anymore. I assume these requests
                 // do not have HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED as content type,
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/PutWriter.java	(working copy)
@@ -25,6 +25,7 @@
 
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 
 /**
@@ -54,18 +55,21 @@
         String contentTypeHeader = connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);
         boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.length() > 0; 
 
+        HTTPFile file = sampler.getFirstUploadableFile();
         // If there are no arguments, we can send a file as the body of the request
+        // TODO: needs a multiple file upload scenerio
         if(sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
+            // If getSendFileAsPostBody returned true, it's sure that file is not null
             hasPutBody = true;
             if(!hasContentTypeHeader) {
                 // Allow the mimetype of the file to control the content type
-                if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                 }
             }
 
             // Create the content length we are going to write
-            File inputFile = new File(sampler.getFilename());
+            File inputFile = new File(file.getPath());
             contentLength = inputFile.length();
         }
         else if(sampler.getSendParameterValuesAsPostBody()) {
@@ -73,8 +77,9 @@
             // Allow the mimetype of the file to control the content type
             // This is not obvious in GUI if you are not uploading any files,
             // but just sending the content of nameless parameters
-            if(!hasContentTypeHeader && sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+            // TODO: needs a multiple file upload scenerio
+            if(!hasContentTypeHeader && sampler.getUploadableFiles().size() == 1 && file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
             }
 
             // We create the post body content now, so we know the size
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java	(working copy)
@@ -20,7 +20,6 @@
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -28,9 +27,12 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URLConnection;
 
+import org.apache.jmeter.config.Files;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.CollectionProperty;
 
 /**
  * Class for setting the necessary headers for a POST request, and sending the
@@ -52,8 +54,6 @@
     protected byte[] formDataUrlEncoded;    
     /** The form data that is going to be sent in post body */
     protected byte[] formDataPostBody;
-    /** The start of the file multipart to be sent */
-    private byte[] formDataFileStartMultipart;
     /** The boundary string for multipart */
     private final String boundary;
     
@@ -84,7 +84,9 @@
 	public String sendPostData(URLConnection connection, HTTPSampler sampler) throws IOException {
         // Buffer to hold the post body, except file content
         StringBuffer postedBody = new StringBuffer(1000);
-        
+        Files fs = (Files) sampler.getProperty(HTTPSamplerBase.FILES).getObjectValue();
+        CollectionProperty files = fs.getFiles();
+
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(sampler.getUseMultipartForPost()) {
@@ -98,24 +100,30 @@
             postedBody.append(new String(formDataPostBody, "UTF-8")); // $NON-NLS-1$
             
             // Add any files
-            if(sampler.hasUploadableFiles()) {
-                // First write the start multipart file
-                out.write(formDataFileStartMultipart);
-                // We get the posted bytes as UTF-8, since java is using UTF-8
-                postedBody.append(new String(formDataFileStartMultipart, "UTF-8")); // $NON-NLS-1$
-                
-                // Write the actual file content
-                writeFileToStream(sampler.getFilename(), out);
-                // We just add placeholder text for file content
-                postedBody.append("<actual file content, not shown here>"); // $NON-NLS-1$
-
-                // Write the end of multipart file
-                byte[] fileMultipartEndDivider = getFileMultipartEndDivider(); 
-                out.write(fileMultipartEndDivider);
-                // We get the posted bytes as UTF-8, since java is using UTF-8
-                postedBody.append(new String(fileMultipartEndDivider, "UTF-8")); // $NON-NLS-1$
+            if(files.size() > 0) {
+                PropertyIterator iter = files.iterator();
+                while (iter.hasNext()) {
+                    HTTPFile file = (HTTPFile) iter.next().getObjectValue();
+                    // First write the start multipart file
+                    byte[] header = file.getHeader().getBytes();
+                    out.write(header);
+                    // We get the posted bytes as UTF-8, since java is using UTF-8
+                    postedBody.append(new String(header, "UTF-8")); // $NON-NLS-1$
+                    // Write the actual file content
+                    writeFileToStream(file.getPath(), out);
+                    // We just add placeholder text for file content
+                    postedBody.append("<actual file content, not shown here>"); // $NON-NLS-1$
+                    // Write the end of multipart file
+                    byte[] fileMultipartEndDivider = getFileMultipartEndDivider();
+                    out.write(fileMultipartEndDivider);
+                    // We get the posted bytes as UTF-8, since java is using UTF-8
+                    postedBody.append(new String(fileMultipartEndDivider, "UTF-8")); // $NON-NLS-1$
+                    if(iter.hasNext()) {
+                        out.write(CRLF);
+                        postedBody.append(new String(CRLF, "UTF-8"));
+                    }
+                }
             }
-
             // Write end of multipart
             byte[] multipartEndDivider = getMultipartEndDivider(); 
             out.write(multipartEndDivider);
@@ -129,7 +137,11 @@
             // If there are no arguments, we can send a file as the body of the request
             if(sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {
                 OutputStream out = connection.getOutputStream();
-                writeFileToStream(sampler.getFilename(), out);
+                PropertyIterator iter = files.iterator();
+                // we're sure that there is one file because of
+                // getSendFileAsPostBody method's return value.
+                HTTPFile file = (HTTPFile) iter.next().getObjectValue();
+                writeFileToStream(file.getPath(), out);
                 out.flush();
                 out.close();
 
@@ -158,7 +170,9 @@
             contentEncoding = ENCODING;
         }
         long contentLength = 0L;
-    	
+        Files fs = (Files) sampler.getProperty(HTTPSamplerBase.FILES).getObjectValue();
+        CollectionProperty files = fs.getFiles();
+
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(sampler.getUseMultipartForPost()) {
@@ -199,19 +213,27 @@
             // Now we just construct any multipart for the files
             // We only construct the file multipart start, we do not write
             // the actual file content
-            if(sampler.hasUploadableFiles()) {
-                bos = new ByteArrayOutputStream();
-                // Write multipart for file
-                writeStartFileMultipart(bos, sampler.getFilename(), sampler.getFileField(), sampler.getMimetype());
-                bos.flush();
-                formDataFileStartMultipart = bos.toByteArray();
-                bos.close();
-                contentLength += formDataFileStartMultipart.length;
-                // Add also the length of the file content
-                File uploadFile = new File(sampler.getFilename());
-                contentLength += uploadFile.length();
-                // And the end of the file multipart
-                contentLength += getFileMultipartEndDivider().length;
+            if(files.size() > 0) {
+                PropertyIterator iter = files.iterator();
+                while (iter.hasNext()) {
+                    HTTPFile file = (HTTPFile) iter.next().getObjectValue();
+                    // Write multipart for file
+                    bos = new ByteArrayOutputStream();
+                    writeStartFileMultipart(bos, file.getPath(), file.getParamName(), file.getMimeType());
+                    bos.flush();
+                    String header = bos.toString();
+                    file.setHeader(header);
+                    bos.close();
+                    contentLength += header.length();
+                    // Add also the length of the file content
+                    java.io.File uploadFile = new java.io.File(file.getPath());
+                    contentLength += uploadFile.length();
+                    // And the end of the file multipart
+                    contentLength += getFileMultipartEndDivider().length;
+                    if(iter.hasNext()) {
+                        contentLength += CRLF.length;
+                    }
+                }
             }
 
             // Add the end of multipart
@@ -232,18 +254,21 @@
             
             // If there are no arguments, we can send a file as the body of the request
             if(sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {
+                PropertyIterator iter = files.iterator();
+                // we're sure that there is one file because of
+                // getSendFileAsPostBody method's return value.
+                HTTPFile file = (HTTPFile) iter.next().getObjectValue();
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
-                    if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                    if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
-                
                 // Create the content length we are going to write
-                File inputFile = new File(sampler.getFilename());
+                java.io.File inputFile = new java.io.File(file.getPath());
                 contentLength = inputFile.length();
             }
             else {
@@ -266,9 +291,14 @@
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
+                    // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
-                        if(sampler.getMimetype() != null && sampler.getMimetype().length() > 0) {
-                            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, sampler.getMimetype());
+                        PropertyIterator iter = files.iterator();
+                        HTTPFile file = (files.size() == 1)
+                            ? (HTTPFile) iter.next().getObjectValue()
+                            : null;
+                        if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                             // TODO: is this the correct default?
@@ -361,7 +391,7 @@
         write(out, "Content-Disposition: form-data; name=\""); // $NON-NLS-1$
         write(out, nameField);
         write(out, "\"; filename=\"");// $NON-NLS-1$
-        write(out, (new File(filename).getName()));
+        write(out, (new java.io.File(filename).getName()));
         writeln(out, "\""); // $NON-NLS-1$
         writeln(out, "Content-Type: " + mimetype); // $NON-NLS-1$
         writeln(out, "Content-Transfer-Encoding: binary"); // $NON-NLS-1$
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java	(working copy)
@@ -71,6 +71,7 @@
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.protocol.http.util.LoopbackHttpClientSocketFactory;
 import org.apache.jmeter.protocol.http.util.SlowHttpClientSocketFactory;
 import org.apache.jmeter.testelement.property.CollectionProperty;
@@ -287,10 +288,12 @@
             }
             
             // Add any files
-            if(hasUploadableFiles()) {
-                File inputFile = new File(getFilename());
+            PropertyIterator files = getUploadableFiles().iterator();
+            while (files.hasNext()) {
+                HTTPFile file = (HTTPFile) files.next().getObjectValue();
+                File inputFile = new File(file.getPath());
                 // We do not know the char set of the file to be uploaded, so we set it to null
-                ViewableFilePart filePart = new ViewableFilePart(getFileField(), inputFile, getMimetype(), null);
+                ViewableFilePart filePart = new ViewableFilePart(file.getParamName(), inputFile, file.getMimeType(), null);
                 filePart.setCharSet(null); // We do not know what the char set of the file is
                 parts[partNo++] = filePart;
             }
@@ -338,20 +341,22 @@
             // This allows the user to specify his own content-type for a POST request
             Header contentTypeHeader = post.getRequestHeader(HEADER_CONTENT_TYPE);
             boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0; 
-
+            HTTPFile file = getFirstUploadableFile();
             // If there are no arguments, we can send a file as the body of the request
+            // TODO: needs a multiple file upload scenerio
             if(!hasArguments() && getSendFileAsPostBody()) {
+                // If getSendFileAsPostBody returned true, it's sure that file is not null
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
-                    if(getMimetype() != null && getMimetype().length() > 0) {
-                        post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                    if(file.getMimeType() != null && file.getMimeType().length() > 0) {
+                        post.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         post.setRequestHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
-                
-                FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(getFilename()),null); 
+
+                FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(file.getPath()),null);
                 post.setRequestEntity(fileRequestEntity);
                 
                 // We just add placeholder text for file content
@@ -376,9 +381,10 @@
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
+                    // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
-                        if(getMimetype() != null && getMimetype().length() > 0) {
-                            post.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                        if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                            post.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                         	 // TODO - is this the correct default?
@@ -913,12 +919,15 @@
         // This allows the user to specify his own content-type for a POST request
         Header contentTypeHeader = put.getRequestHeader(HEADER_CONTENT_TYPE);
         boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0; 
+        HTTPFile file = getFirstUploadableFile();
 
         // If there are no arguments, we can send a file as the body of the request
+        // TODO: needs a multiple file upload scenerio
         if(!hasArguments() && getSendFileAsPostBody()) {
             hasPutBody = true;
                 
-            FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(getFilename()),null); 
+            // If getSendFileAsPostBody returned true, it's sure that file is not null
+            FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(file.getPath()),null);
             put.setRequestEntity(fileRequestEntity);
                 
             // We just add placeholder text for file content
@@ -977,8 +986,9 @@
                 // Allow the mimetype of the file to control the content type
                 // This is not obvious in GUI if you are not uploading any files,
                 // but just sending the content of nameless parameters
-                if(getMimetype() != null && getMimetype().length() > 0) {
-                    put.setRequestHeader(HEADER_CONTENT_TYPE, getMimetype());
+                // TODO: needs a multiple file upload scenerio
+                if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
+                    put.setRequestHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                 }
             }
             // Set the content length
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(working copy)
@@ -38,6 +38,8 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
@@ -46,6 +48,7 @@
 import org.apache.jmeter.protocol.http.parser.HTMLParser;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.protocol.http.util.HTTPConstantsInterface;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
@@ -58,6 +61,7 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -78,12 +82,16 @@
 
 	public final static String ARGUMENTS = "HTTPsampler.Arguments"; // $NON-NLS-1$
 
+	public final static String FILES = "HTTPsampler.Files"; // $NON-NLS-1$
+
 	public final static String AUTH_MANAGER = "HTTPSampler.auth_manager"; // $NON-NLS-1$
 
 	public final static String COOKIE_MANAGER = "HTTPSampler.cookie_manager"; // $NON-NLS-1$
 
 	public final static String HEADER_MANAGER = "HTTPSampler.header_manager"; // $NON-NLS-1$
 
+	//TODO: kept MIMETYPE for backward compatibility with old test
+	//plans, can be removed after enough time.
 	public final static String MIMETYPE = "HTTPSampler.mimetype"; // $NON-NLS-1$
 
 	public final static String DOMAIN = "HTTPSampler.domain"; // $NON-NLS-1$
@@ -129,12 +137,16 @@
     
 	public final static String USE_KEEPALIVE = "HTTPSampler.use_keepalive"; // $NON-NLS-1$
 
+	//TODO: kept FILE_NAME for backward compatibility with old test
+	//plans, can be removed after enough time.
 	public final static String FILE_NAME = "HTTPSampler.FILE_NAME"; // $NON-NLS-1$
     
     public final static String DO_MULTIPART_POST = "HTTPSampler.DO_MULTIPART_POST"; // $NON-NLS-1$
 
     /* Shown as Parameter Name on the GUI */
 	public final static String FILE_FIELD = "HTTPSampler.FILE_FIELD"; // $NON-NLS-1$
+	//TODO: kept FILE_FIELD for backward compatibility with old test
+	//plans, can be removed after enough time.
 
 //	public final static String FILE_DATA = "HTTPSampler.FILE_DATA"; // $NON-NLS-1$
 
@@ -225,47 +237,55 @@
     
     public HTTPSamplerBase() {
 		setArguments(new Arguments());
+		setFiles(new Files());
 	}
 
     /**
-     * The name parameter to be applied to the file
+     * adds a new file to be post.
+     *
+     * @param file
+     *           the new HTTPFile object
      */
-	public void setFileField(String value) {
-		setProperty(FILE_FIELD, value);
-	}
+    public void addFileForUpload(HTTPFile file) {
+        Files fs = (Files) getProperty(FILES).getObjectValue();
+        fs.addFile((File) file);
+    }
 
     /**
-     * The name parameter to be applied to the file
+     * resets files list and adds given HTTPFile to the new list.
+     *
+     * @param file
+     *           the new HTTPFile object
      */
-	public String getFileField() {
-		return getPropertyAsString(FILE_FIELD);
-	}
+    public void setFileForUpload(HTTPFile file) {
+        Files files = new Files();
+        files.addFile((File) file);
+        setProperty(new TestElementProperty(FILES, files));
+    }
 
     /**
-     * The actual name of the file to POST
+     * Determine if the file should be sent as the entire Post body,
+     * i.e. without any additional wrapping
+     *
+     * @return true if specified file is to be sent as the body,
+     * i.e. FileField is blank
      */
-	public void setFilename(String value) {
-		setProperty(FILE_NAME, value);
-	}
-
-    /**
-     * The actual name of the file to POST
-     */
-	public String getFilename() {
-		return getPropertyAsString(FILE_NAME);
-	}
-
-	/**
-	 * Determine if the file should be sent as the entire Post body,
-	 * i.e. without any additional wrapping
-	 * 
-	 * @return true if specified file is to be sent as the body,
-	 * i.e. FileField is blank
-	 */
-	public boolean getSendFileAsPostBody() {
-        // If no file field is specified, the file is sent as post body
-		return getFileField().length()== 0 && getFilename().length() > 0;
-	}
+    public boolean getSendFileAsPostBody() {
+        // If there is one file with no parameter name, the file is
+        // sent as post body.
+        Files files = this.getFiles();
+        if(files.getFileCount() == 1) {
+            //PropertyIterator iter = files.iterator();
+            //HTTPFile file = (HTTPFile) iter.next().getObjectValue();
+            HTTPFile file = (HTTPFile) files.getFile(0);
+            return (file.getPath() != null && file.getPath().length() > 0)
+                && (file.getParamName() == null || file.getParamName().length() == 0);
+        }
+        return false;
+        // NOTE: this method is kept for backward compatibility with
+        // old file parameter panel. it maybe better to remove this
+        // future.
+    }
     
     /**
      * Determine if none of the parameters have a name, and if that
@@ -619,6 +639,24 @@
 		return (Arguments) getProperty(ARGUMENTS).getObjectValue();
 	}
 
+	/**
+	 * Method to set files list to be uploaded.
+	 *
+	 * @param value
+	 *	 Files object that stores file list to be uploaded.
+	 */
+	public void setFiles(Files value) {
+		HTTPFile.convertFilesToHTTP(value);
+		setProperty(new TestElementProperty(FILES, value));
+	}
+
+	/**
+	 * Method to get files list to be uploaded.
+	 */
+	public Files getFiles() {
+		return (Files) getProperty(FILES).getObjectValue();
+	}
+
 	public void setAuthManager(AuthManager value) {
 		AuthManager mgr = getAuthManager();
 		if (mgr != null) {
@@ -655,14 +693,6 @@
 		return (CookieManager) getProperty(COOKIE_MANAGER).getObjectValue();
 	}
 
-	public void setMimetype(String value) {
-		setProperty(MIMETYPE, value);
-	}
-
-	public String getMimetype() {
-		return getPropertyAsString(MIMETYPE);
-	}
-
 	public boolean isImageParser() {
 		return getPropertyAsBoolean(IMAGE_PARSER);
 	}
@@ -1327,9 +1357,30 @@
      * Method to tell if the request has any files to be uploaded
      */
     protected boolean hasUploadableFiles() {
-        return getFilename() != null && getFilename().trim().length() > 0;        
+        return getUploadableFiles().size() > 0;
     }
 
+    /**
+     * Method to get files to be uploaded.
+     */
+    protected CollectionProperty getUploadableFiles() {
+        return this.getFiles().getFiles();
+    }
+
+    /**
+     * Method to get the first file to be uploaded.
+     *
+     * @return HTTPFile object if there exists any file, null
+     * otherwise.
+     */
+    public HTTPFile getFirstUploadableFile() {
+        Files fs = (Files) getProperty(FILES).getObjectValue();
+        CollectionProperty files = fs.getFiles();
+        return files.size() > 0
+            ? (HTTPFile) files.iterator().next().getObjectValue()
+            : null;
+    }
+
     public static String[] getValidMethodsAsArray(){
         return (String[]) METHODLIST.toArray(new String[0]);
     }
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java	(working copy)
@@ -30,6 +30,7 @@
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -131,7 +132,6 @@
     private void setupConnection(URL url, 
                  String method,
                  HTTPSampleResult res) throws IOException {
-
         String host = url.getHost();
         int port = url.getPort();
         if(port <= 0 || port == url.getDefaultPort()) {
@@ -185,12 +185,7 @@
         AuthManager auth = getAuthManager();
         int hsz = 1; // Host always
         if(method.equals(POST)) {
-            String fn = getFilename();
-            if(fn != null && fn.trim().length() > 0) {
-                hsz += 3;
-            } else {
-                hsz += 2;
-            }
+            hsz += (2 + getUploadableFiles().size());
         }
         if(headers != null) {
             hsz += headers.size();
@@ -236,15 +231,16 @@
         }
         if(method.equals(POST)) {
             int cl = -1;
-            String fn = getFilename();
-            if(fn != null && fn.trim().length() > 0) {
-                File input = new File(fn);
+            //TODO: make it compatible with multiple file upload.
+            HTTPFile file = getFirstUploadableFile();
+            if(file != null) {
+                File input = new File(file.getPath());
                 cl = (int)input.length();
                 body = new FileInputStream(input);
                 setString(HEADER_CONTENT_DISPOSITION);
-                setString("form-data; name=\""+encode(getFileField())+
-                      "\"; filename=\"" + encode(fn) +"\""); //$NON-NLS-1$ //$NON-NLS-2$
-                String mt = getMimetype();
+                setString("form-data; name=\""+encode(file.getParamName())+
+                      "\"; filename=\"" + encode(file.getPath()) +"\""); //$NON-NLS-1$ //$NON-NLS-2$
+                String mt = file.getMimeType();
                 hbuf.append(HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);
                 setInt(0xA007); // content-type
                 setString(mt);
Index: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFilesPanel.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFilesPanel.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFilesPanel.java	(revision 0)
@@ -0,0 +1,157 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.gui;
+
+import java.util.Iterator;
+
+import javax.swing.JTable;
+import javax.swing.table.TableColumn;
+
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.config.gui.FilesPanel;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.ObjectTableModel;
+import org.apache.jorphan.reflect.Functor;
+
+/**
+ * A GUI panel allowing the user to enter file information for http
+ * upload.
+ *
+ * @author Erhan Kesken
+ */
+public class HTTPFilesPanel extends FilesPanel {
+
+	/** The parameter name column title of file table. */
+	private static final String PARAMNAME = JMeterUtils.getResString("send_file_param_name_label"); //$NON-NLS-1$
+
+	/** The mime type column title of file table. */
+	private static final String MIMETYPE = JMeterUtils.getResString("send_file_mime_label"); //$NON-NLS-1$
+
+	/**
+	 * Constructor.
+	 *
+	 * Sets panel title to the string matches with send_file
+	 * resource.
+	 */
+	public HTTPFilesPanel() {
+		super(JMeterUtils.getResString("send_file")); //$non-NLS-1$
+	}
+
+	/**
+	 * Initialize the table model used for the http files table.
+	 */
+	protected void initializeTableModel() {
+		tableModel = new ObjectTableModel(new String[] {
+				FilesPanel.COLUMN_NAMES_0, PARAMNAME, MIMETYPE},
+			HTTPFile.class,
+			new Functor[] {
+				new Functor("getPath"), //$NON-NLS-1$
+				new Functor("getParamName"), //$NON-NLS-1$
+				new Functor("getMimeType")}, //$NON-NLS-1$
+			new Functor[] {
+				new Functor("setName"), //$NON-NLS-1$
+				new Functor("setParamName"), //$NON-NLS-1$
+				new Functor("setMimeType")}, //$NON-NLS-1$
+			new Class[] {String.class, String.class, String.class});
+	}
+
+	public static boolean testFunctors(){
+		HTTPFilesPanel instance = new HTTPFilesPanel();
+		instance.initializeTableModel();
+		return instance.tableModel.checkFunctors(null,instance.getClass());
+	}
+
+	/**
+	 * Resize the table columns to appropriate widths.
+	 *
+	 * @param table
+	 *	the table to resize columns for
+	 */
+	protected void sizeColumns(JTable table) {
+		int resizeMode = table.getAutoResizeMode();
+		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
+		fixSize(table.getColumn(PARAMNAME));
+		fixSize(table.getColumn(MIMETYPE));
+		table.setAutoResizeMode(resizeMode);
+	}
+
+	/**
+	 * Create a new HTTPFile object.
+	 *
+	 * @return a new HTTPFile object
+	 */
+	protected Object makeNewFile() {
+		File file = (File) super.makeNewFile();
+		HTTPFile hf = new HTTPFile(file);
+		return hf;
+	}
+
+	/**
+	 * Resize the table column to a fixed size.
+	 *
+	 * @param column
+	 *	the column whose size will be fixed
+	 */
+	private void fixSize(TableColumn column) {
+		column.sizeWidthToFit();
+		column.setMaxWidth((int) (column.getWidth() * 2));
+		column.setWidth(column.getMaxWidth());
+		column.setResizable(false);
+	}
+
+	/* Implements JMeterGUIComponent.createTestElement() */
+	public TestElement createTestElement() {
+		stopTableEditing();
+		Iterator modelData = tableModel.iterator();
+		Files files = new Files();
+		while (modelData.hasNext()) {
+			HTTPFile file = (HTTPFile) modelData.next();
+			files.addFile(file);
+		}
+		this.configureTestElement(files);
+		return (TestElement) files.clone();
+	}
+
+	/**
+	 * A newly created component can be initialized with the contents of a Test
+	 * Element object by calling this method. The component is responsible for
+	 * querying the Test Element object for the relevant information to display
+	 * in its GUI.
+	 *
+	 * @param el
+	 *	the TestElement to configure
+	 */
+	public void configure(TestElement el) {
+		super.configure(el);
+		if(el instanceof Files) {
+			tableModel.clearData();
+			HTTPFile.convertFilesToHTTP((Files) el);
+			PropertyIterator iter = ((Files) el).getFiles().iterator();
+			while (iter.hasNext()) {
+				HTTPFile file = (HTTPFile) iter.next().getObjectValue();
+				tableModel.addRow(file);
+			}
+		}
+		checkDeleteStatus();
+	}
+}
Index: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java	(working copy)
@@ -21,7 +21,6 @@
 import java.awt.BorderLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.io.File;
 
 import javax.swing.BorderFactory;
 import javax.swing.BoxLayout;
@@ -31,10 +30,14 @@
 import javax.swing.JPanel;
 import javax.swing.JTextField;
 
-import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
+import org.apache.jmeter.protocol.http.gui.HTTPFilesPanel;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
@@ -42,21 +45,12 @@
  */
 public class MultipartUrlConfigGui extends UrlConfigGui implements ActionListener {
 
-	private JTextField filenameField;
+	/**
+	 * Files panel that holds file informations to be uploaded by
+	 * http request.
+	 */
+	protected HTTPFilesPanel filesPanel;
 
-	private JTextField paramNameField;
-
-	private JTextField mimetypeField;
-
-	// TODO these are used as names for the GUI elements - are they needed? are they NLS?
-	private static String FILENAME = "filename";
-
-	private static String BROWSE = "browse";  // $NON-NLS-1$ used as an ActionName locally
-
-	private static String PARAMNAME = "paramname";
-
-	private static String MIMETYPE = "mimetype";
-
 	public MultipartUrlConfigGui() {
 		super();
 		init();
@@ -69,11 +63,10 @@
 
 	public TestElement createTestElement() {
 		TestElement ce = super.createTestElement();
-
 		configureTestElement(ce);
-		ce.setProperty(HTTPSamplerBase.MIMETYPE, mimetypeField.getText());
-		ce.setProperty(HTTPSamplerBase.FILE_NAME, filenameField.getText());
-		ce.setProperty(HTTPSamplerBase.FILE_FIELD, paramNameField.getText());
+		Files files = (Files) filesPanel.createTestElement();
+		HTTPFile.convertFilesToHTTP(files);
+		ce.setProperty(new TestElementProperty(HTTPSamplerBase.FILES, files));
 		return ce;
 	}
 
@@ -88,9 +81,23 @@
 
 	public void configure(TestElement el) {
 		super.configure(el);
-		mimetypeField.setText(el.getPropertyAsString(HTTPSamplerBase.MIMETYPE));
-		filenameField.setText(el.getPropertyAsString(HTTPSamplerBase.FILE_NAME));
-		paramNameField.setText(el.getPropertyAsString(HTTPSamplerBase.FILE_FIELD));
+		//kept backward compatibility with test plans prepared
+		//by old versions of jmeter.
+		//TODO: remove backward compatibility stuff after enough time.
+		String fileName = el.getPropertyAsString(HTTPSamplerBase.FILE_NAME);
+		String paramName = el.getPropertyAsString(HTTPSamplerBase.FILE_FIELD);
+		String mimeType = el.getPropertyAsString(HTTPSamplerBase.MIMETYPE);
+		if(!"".equals(fileName) || !"".equals(paramName) || !"".equals(mimeType)) {
+			// if any file information is saved previously.
+			File file = (File) new HTTPFile(fileName, paramName, mimeType);
+			Files files = new Files();
+			files.addFile(file);
+			filesPanel.configure(files);
+			HTTPFile.convertFilesToHTTP(files);
+			//convert old properties to new all-in-one property
+			el.setProperty(new TestElementProperty(HTTPSamplerBase.FILES, files));
+		}
+		filesPanel.configure((TestElement) el.getProperty(HTTPSamplerBase.FILES).getObjectValue());
 	}
 
 	public String getLabelResource() {
@@ -101,20 +108,6 @@
 	}
 
 	public void actionPerformed(ActionEvent e) {
-		String name = e.getActionCommand();
-
-		if (name.equals(BROWSE)) {
-			JFileChooser chooser = FileDialoger.promptToOpenFile();
-
-			if (chooser == null) {
-				return;
-			}
-			File file = chooser.getSelectedFile();
-
-			if (file != null) {
-				filenameField.setText(file.getPath());
-			}
-		}
 	}
 
 	private void init() {// called from ctor, so must not be overridable
@@ -150,60 +143,10 @@
 	}
 
 	protected JPanel getFilePanel() {
-		JPanel filePanel = new VerticalPanel();
-		filePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), 
-				JMeterUtils.getResString("send_file"))); // $NON-NLS-1$
-
-		filePanel.add(createFilenamePanel());
-		filePanel.add(createFileParamNamePanel());
-		filePanel.add(createFileMimeTypePanel());
-
-		return filePanel;
+		filesPanel = new HTTPFilesPanel();
+		return filesPanel;
 	}
 
-	private JPanel createFileMimeTypePanel() {
-		mimetypeField = new JTextField(15);
-		mimetypeField.setName(MIMETYPE);
-
-		JLabel mimetypeLabel = new JLabel(JMeterUtils.getResString("send_file_mime_label")); // $NON-NLS-1$
-		mimetypeLabel.setLabelFor(mimetypeField);
-		JPanel mimePanel = new JPanel(new BorderLayout(5, 0));
-		mimePanel.add(mimetypeLabel, BorderLayout.WEST);
-		mimePanel.add(mimetypeField, BorderLayout.CENTER);
-		return mimePanel;
-	}
-
-	private JPanel createFileParamNamePanel() {
-		paramNameField = new JTextField(15);
-		paramNameField.setName(PARAMNAME);
-
-		JLabel paramNameLabel = new JLabel(JMeterUtils.getResString("send_file_param_name_label")); // $NON-NLS-1$
-		paramNameLabel.setLabelFor(paramNameField);
-
-		JPanel paramNamePanel = new JPanel(new BorderLayout(5, 0));
-		paramNamePanel.add(paramNameLabel, BorderLayout.WEST);
-		paramNamePanel.add(paramNameField, BorderLayout.CENTER);
-		return paramNamePanel;
-	}
-
-	private JPanel createFilenamePanel() {
-		filenameField = new JTextField(15);
-		filenameField.setName(FILENAME);
-
-		JLabel filenameLabel = new JLabel(JMeterUtils.getResString("send_file_filename_label")); // $NON-NLS-1$
-		filenameLabel.setLabelFor(filenameField);
-
-		JButton browseFileButton = new JButton(JMeterUtils.getResString("send_file_browse")); // $NON-NLS-1$
-		browseFileButton.setActionCommand(BROWSE);
-		browseFileButton.addActionListener(this);
-
-		JPanel filenamePanel = new JPanel(new BorderLayout(5, 0));
-		filenamePanel.add(filenameLabel, BorderLayout.WEST);
-		filenamePanel.add(filenameField, BorderLayout.CENTER);
-		filenamePanel.add(browseFileButton, BorderLayout.EAST);
-		return filenamePanel;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * 
@@ -212,8 +155,6 @@
 	public void clear() {
 		// TODO Auto-generated method stub
 		super.clear();
-		filenameField.setText(""); // $NON-NLS-1$
-		mimetypeField.setText(""); // $NON-NLS-1$
-		paramNameField.setText(""); // $NON-NLS-1$
+		filesPanel.clear();
 	}
 }
Index: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java	(revision 649327)
+++ src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java	(working copy)
@@ -21,7 +21,9 @@
 import java.io.Serializable;
 
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.config.Files;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
+import org.apache.jmeter.protocol.http.util.HTTPFile;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.oro.text.regex.Pattern;
@@ -37,8 +39,14 @@
 
 	private Arguments args;
 
+	/**
+	 * Files list to be uploaded with http request.
+	 */
+	private Files files;
+
 	public MultipartUrlConfig() {
 		args = new Arguments();
+		files = new Files();
 	}
 
 	public MultipartUrlConfig(String boundary) {
@@ -54,34 +62,17 @@
 		return boundary;
 	}
 
-	public void setFilename(String filename) {
-		this.filename = filename;
-	}
-
-	public String getFilename() {
-		return filename;
-	}
-
 	public Arguments getArguments() {
 		return args;
 	}
 
-	public void setFileFieldName(String name) {
-		this.fileField = name;
+	/**
+	 * get Files list to be uploaded with http request.
+	 */
+	public Files getFiles() {
+		return files;
 	}
 
-	public String getFileFieldName() {
-		return fileField;
-	}
-
-	public void setMimeType(String type) {
-		mimetype = type;
-	}
-
-	public String getMimeType() {
-		return mimetype;
-	}
-
 	public void addArgument(String name, String value) {
 		Arguments myArgs = this.getArguments();
 		myArgs.addArgument(new HTTPArgument(name, value));
@@ -92,6 +83,15 @@
 		myArgs.addArgument(new HTTPArgument(name, value, metadata));
 	}
 
+	/**
+	 * adds a new File to the Files list to be uploaded with http
+	 * request.
+	 */
+	public void addFile(String path, String param, String mime) {
+		Files myFiles = this.getFiles();
+		myFiles.addFile(new HTTPFile(path, param, mime));
+	}
+
 // NOT USED	
 //    /**
 //     * @deprecated values in a multipart/form-data are not urlencoded,
@@ -146,9 +146,7 @@
                     String fn = contentDisposition.substring(index, contentDisposition.indexOf("\"", index));
                     if(fn != null && fn.length() > 0) {
                         // Set the values retrieves for the file upload
-                        this.setFileFieldName(name);
-                        this.setFilename(fn);
-                        this.setMimeType(contentType);
+                        this.addFile(fn, name, contentType);
                     }
                 }
                 else {
Index: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFile.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFile.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFile.java	(revision 0)
@@ -0,0 +1,172 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.protocol.http.util;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.LinkedList;
+
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+
+/*
+ * Class representing a file parameter for http upload consists of a
+ * http parameter name/file path pair with (optional) mimetype.
+ *
+ * @author Erhan Kesken
+ */
+public class HTTPFile extends File implements Serializable {
+
+	/** Name used to store the file's paramname. */
+	public static final String PARAMNAME = "File.paramname";
+
+	/** Name used to store the file's mimetype. */
+	public static final String MIMETYPE = "File.mimetype";
+
+	/** Name used to store the file's http header. */
+	public static final String HEADER = "File.header";
+
+	/**
+	 * Constructor for an empty HTTPFile object
+	 */
+	public HTTPFile() {
+	}
+
+	/**
+	 * Constructor for the HTTPFile object.
+	 */
+	public HTTPFile(String path) {
+		this(path, null, null);
+	}
+
+	/**
+	 * Constructor for the HTTPFile object.
+	 */
+	public HTTPFile(String path, String paramname, String mimetype) {
+		setPath(path);
+		setParamName(paramname);
+		setMimeType(mimetype);
+	}
+
+	/**
+	 * Convertor Constructor. Converts File object to HTTPFile
+	 * object.
+	 */
+	public HTTPFile(File file) {
+		this(file.getPath());
+	}
+
+	/**
+	 * Copy Constructor.
+	 */
+	public HTTPFile(HTTPFile file) {
+		this(file.getPath(), file.getParamName(), file.getMimeType());
+	}
+
+	/**
+	 * Set the http parameter name of the File.
+	 *
+	 * @param newParamName
+	 *	the new http parameter name
+	 */
+	public void setParamName(String newParamName) {
+		setProperty(new StringProperty(PARAMNAME, newParamName));
+	}
+
+	/**
+	 * Get the http parameter name of the File.
+	 *
+	 * @return the http parameter name
+	 */
+	public String getParamName() {
+		return getPropertyAsString(PARAMNAME);
+	}
+
+	/**
+	 * Set the mimetype of the File.
+	 *
+	 * @param newMimeType
+	 *	the new mimetype
+	 */
+	public void setMimeType(String newMimeType) {
+		setProperty(new StringProperty(MIMETYPE, newMimeType));
+	}
+
+	/**
+	 * Get the mimetype of the File.
+	 *
+	 * @return the http parameter mimetype
+	 */
+	public String getMimeType() {
+		return getPropertyAsString(MIMETYPE);
+	}
+
+	/**
+	 * Sets the Path attribute of the File object.
+	 *
+	 * @param newPath
+	 *	the new Path value
+	 */
+	public void setPath(String newPath) {
+		if (newPath == null || !newPath.equals(getPath())) {
+			super.setPath(newPath);
+		}
+	}
+
+	/**
+	 * Sets the http headers for the HTTPFile object. Header
+	 * contains path, parameter name and mime type information.
+	 *
+	 * @param newHeader
+	 *	the new Header value
+	 */
+	public void setHeader(String newHeader) {
+		setProperty(new StringProperty(HEADER, newHeader));
+	}
+
+	/**
+	 * Gets the http headers for the HTTPFile object.
+	 */
+	public String getHeader() {
+		return getPropertyAsString(HEADER);
+	}
+
+	/**
+	 * Converts File objects to HTTPFile objects.
+	 *
+	 * @param files
+	 *	File list for conversion.
+	 */
+	public static void convertFilesToHTTP(Files files) {
+		List newFiles = new LinkedList();
+		PropertyIterator iter = files.getFiles().iterator();
+		while (iter.hasNext()) {
+			File arg = (File) iter.next().getObjectValue();
+			if (!(arg instanceof HTTPFile)) {
+				newFiles.add(new HTTPFile(arg));
+			} else {
+				newFiles.add(arg);
+			}
+		}
+		files.removeAllFiles();
+		files.setFiles(newFiles);
+	}
+}
Index: src/core/org/apache/jmeter/config/File.java
===================================================================
--- src/core/org/apache/jmeter/config/File.java	(revision 0)
+++ src/core/org/apache/jmeter/config/File.java	(revision 0)
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.config;
+
+import java.io.Serializable;
+
+import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.property.StringProperty;
+
+/**
+ * Class representing a file argument just consists of a file path
+ *
+ * @author Erhan Kesken
+ */
+public class File extends AbstractTestElement implements Serializable {
+	/** Name used to store the file's path. */
+	public static final String FILEPATH = "File.path";
+
+	/**
+	 * Create a new File without a path.
+	 */
+	public File() {
+	}
+
+	/**
+	 * Create a new File with the specified path.
+	 *
+	 * @param path
+	 *	the file path
+	 */
+	public File(String path) {
+		setProperty(new StringProperty(FILEPATH, path));
+	}
+
+	/**
+	 * Set the path of the File.
+	 *
+	 * @param newPath
+	 *	the new path
+	 */
+	public void setPath(String newPath) {
+		setProperty(new StringProperty(FILEPATH, newPath));
+	}
+
+	/**
+	 * Get the path of the File.
+	 *
+	 * @return the file's path
+	 */
+	public String getPath() {
+		return getPropertyAsString(FILEPATH);
+	}
+
+	/**
+	 * returns path name as string demonstration of File object.
+	 *
+	 * @return the file's path.
+	 */
+	public String toString() {
+		return getPath();
+	}
+}
Index: src/core/org/apache/jmeter/config/Files.java
===================================================================
--- src/core/org/apache/jmeter/config/Files.java	(revision 0)
+++ src/core/org/apache/jmeter/config/Files.java	(revision 0)
@@ -0,0 +1,206 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.	See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.	 You may obtain a copy of the License at
+ *
+ *	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.config;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.TestElementProperty;
+
+/**
+ * A set of File objects.
+ *
+ * @author Erhan Kesken
+ */
+public class Files extends ConfigTestElement implements Serializable {
+	/** The name of the property used to store the files. */
+	public static final String FILES = "Files.files"; //$NON-NLS-1$
+
+	/**
+	 * Create a new Files object with no files.
+	 */
+	public Files() {
+		setProperty(new CollectionProperty(FILES, new ArrayList()));
+	}
+
+	/**
+	 * Get the files.
+	 *
+	 * @return the files
+	 */
+	public CollectionProperty getFiles() {
+		return (CollectionProperty) getProperty(FILES);
+	}
+
+	/**
+	 * Clear the files.
+	 */
+	public void clear() {
+		super.clear();
+		setProperty(new CollectionProperty(FILES, new ArrayList()));
+	}
+
+	/**
+	 * Set the list of files. Any existing files will be lost.
+	 *
+	 * @param files
+	 *	the new files
+	 */
+	public void setFiles(List files) {
+		setProperty(new CollectionProperty(FILES, files));
+	}
+
+	/**
+	 * Add a new file with the given path.
+	 *
+	 * @param path
+	 *	the path of the file
+	 */
+	public void addFile(String path) {
+		addFile(new File(path));
+	}
+
+	/**
+	 * Add a new file.
+	 *
+	 * @param file
+	 *	the new file
+	 */
+	public void addFile(File file) {
+		TestElementProperty newFile = new TestElementProperty(file.getPath(), file);
+		if (isRunningVersion()) {
+			this.setTemporary(newFile);
+		}
+		getFiles().addItem(newFile);
+	}
+
+	/**
+	 * Get a PropertyIterator of the files.
+	 *
+	 * @return an iteration of the files
+	 */
+	public PropertyIterator iterator() {
+		return getFiles().iterator();
+	}
+
+	/**
+	 * Create a string representation of the files.
+	 *
+	 * @return the string representation of the files
+	 */
+	public String toString() {
+		StringBuffer str = new StringBuffer();
+		PropertyIterator iter = getFiles().iterator();
+		while (iter.hasNext()) {
+			File file = (File) iter.next().getObjectValue();
+			str.append(file.getPath());
+			if (iter.hasNext()) {
+				str.append("&"); //$NON-NLS-1$
+			}
+		}
+		return str.toString();
+	}
+
+	/**
+	 * Remove the specified file from the list.
+	 *
+	 * @param row
+	 *	the index of the file to remove
+	 */
+	public void removeFile(int row) {
+		if (row < getFiles().size()) {
+			getFiles().remove(row);
+		}
+	}
+
+	/**
+	 * Remove the specified file from the list.
+	 *
+	 * @param file
+	 *	the file to remove
+	 */
+	public void removeFile(File file) {
+		PropertyIterator iter = getFiles().iterator();
+		while (iter.hasNext()) {
+			File item = (File) iter.next().getObjectValue();
+			if (file.equals(item)) {
+				iter.remove();
+			}
+		}
+	}
+
+	/**
+	 * Remove the file with the specified path.
+	 *
+	 * @param filePath
+	 *	the path of the file to remove
+	 */
+	public void removeFile(String filePath) {
+		PropertyIterator iter = getFiles().iterator();
+		while (iter.hasNext()) {
+			File file = (File) iter.next().getObjectValue();
+			if (file.getPath().equals(filePath)) {
+				iter.remove();
+			}
+		}
+	}
+
+	/**
+	 * Remove all files from the list.
+	 */
+	public void removeAllFiles() {
+		getFiles().clear();
+	}
+
+	/**
+	 * Add a new empty file to the list. The new file will have the
+	 * empty string as its path.
+	 */
+	public void addEmptyFile() {
+		addFile(new File(""));
+	}
+
+	/**
+	 * Get the number of files in the list.
+	 *
+	 * @return the number of files
+	 */
+	public int getFileCount() {
+		return getFiles().size();
+	}
+
+	/**
+	 * Get a single file.
+	 *
+	 * @param row
+	 *	the index of the file to return.
+	 * @return the file at the specified index, or null if no file
+	 *	exists at that index.
+	 */
+	public File getFile(int row) {
+		File file = null;
+		if (row < getFiles().size()) {
+			file = (File) getFiles().get(row).getObjectValue();
+		}
+		return file;
+	}
+}
Index: src/core/org/apache/jmeter/config/gui/FilesPanel.java
===================================================================
--- src/core/org/apache/jmeter/config/gui/FilesPanel.java	(revision 0)
+++ src/core/org/apache/jmeter/config/gui/FilesPanel.java	(revision 0)
@@ -0,0 +1,447 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.jmeter.config.gui;
+
+import java.awt.BorderLayout;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.FlowLayout;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Collection;
+
+import javax.swing.JFileChooser;
+import javax.swing.BorderFactory;
+import javax.swing.Box;
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
+import javax.swing.table.TableCellEditor;
+
+import org.apache.jmeter.config.File;
+import org.apache.jmeter.config.Files;
+import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.ObjectTableModel;
+import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jorphan.reflect.Functor;
+
+/**
+ * A GUI panel allowing the user to enter file path information.
+ *
+ * @author Erhan Kesken
+ */
+public class FilesPanel extends AbstractConfigGui implements ActionListener {
+
+	/** The title label for this component. */
+	private JLabel tableLabel;
+
+	/** The table containing the list of files. */
+	private transient JTable table;
+
+	/** The model for the files table. */
+	protected transient ObjectTableModel tableModel;
+
+	/** A button for adding new files to the table. */
+	private JButton add;
+
+	/** A button for removing files from the table. */
+	private JButton delete;
+
+	/**
+	 * Added background support for reporting tool
+	 */
+	private Color background;
+
+	/**
+	 * Boolean indicating whether this component is a standalone component or it
+	 * is intended to be used as a subpanel for another component.
+	 */
+	private boolean standalone = true;
+
+	/** Command for adding a row to the table. */
+	private static final String ADD = "add"; // $NON-NLS-1$
+
+	/** Command for removing a row from the table. */
+	private static final String DELETE = "delete"; // $NON-NLS-1$
+
+	public static final String COLUMN_NAMES_0 = JMeterUtils.getResString("send_file_filename_label"); // $NON-NLS-1$
+
+	/**
+	 * Create a new FilesPanel as a standalone component.
+	 */
+	public FilesPanel() {
+		tableLabel = new JLabel(JMeterUtils.getResString("user_defined_variables")); // $NON-NLS-1$
+		standalone = true;
+		init();
+	}
+
+	/**
+	 * Create a new FilesPanel as an embedded component, using the specified
+	 * title.
+	 *
+	 * @param label
+	 *	the title for the component.
+	 */
+	public FilesPanel(String label) {
+		tableLabel = new JLabel(label);
+		standalone = false;
+		init();
+	}
+
+	/**
+	 * Create a new FilesPanel with a border and color background
+	 * @param label text for label
+	 * @param bkg background colour
+	 */
+	public FilesPanel(String label, Color bkg) {
+		tableLabel = new JLabel(label);
+		this.background = bkg;
+		standalone = false;
+		init();
+	}
+
+	/**
+	 * This is the list of menu categories this gui component will be available
+	 * under.
+	 *
+	 * @return a Collection of Strings, where each element is one of the
+	 *	constants defined in MenuFactory
+	 */
+	public Collection getMenuCategories() {
+		if (standalone) {
+			return super.getMenuCategories();
+		}
+		return null;
+	}
+
+	public String getLabelResource() {
+		return "user_defined_variables"; // $NON-NLS-1$
+	}
+
+	/* Implements JMeterGUIComponent.createTestElement() */
+	public TestElement createTestElement() {
+		Files files = new Files();
+		modifyTestElement(files);
+		return files;
+	}
+
+	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+	public void modifyTestElement(TestElement args) {
+		this.configureTestElement(args);
+	}
+
+	/**
+	 * A newly created component can be initialized with the contents of a Test
+	 * Element object by calling this method. The component is responsible for
+	 * querying the Test Element object for the relevant information to display
+	 * in its GUI.
+	 *
+	 * @param el
+	 *	the TestElement to configure
+	 */
+	public void configure(TestElement el) {
+		super.configure(el);
+		if (el instanceof Files) {
+			tableModel.clearData();
+			PropertyIterator iter = ((Files) el).iterator();
+			while (iter.hasNext()) {
+				File arg = (File) iter.next().getObjectValue();
+				tableModel.addRow(arg);
+			}
+		}
+		checkDeleteStatus();
+	}
+
+	/**
+	 * Get the table used to enter files.
+	 *
+	 * @return the table used to enter files
+	 */
+	protected JTable getTable() {
+		return table;
+	}
+
+	/**
+	 * Get the title label for this component.
+	 *
+	 * @return the title label displayed with the table
+	 */
+	protected JLabel getTableLabel() {
+		return tableLabel;
+	}
+
+	/**
+	 * Get the button used to delete rows from the table.
+	 *
+	 * @return the button used to delete rows from the table
+	 */
+	protected JButton getDeleteButton() {
+		return delete;
+	}
+
+	/**
+	 * Get the button used to add rows to the table.
+	 *
+	 * @return the button used to add rows to the table
+	 */
+	protected JButton getAddButton() {
+		return add;
+	}
+
+	/**
+	 * Enable or disable the delete button depending on whether or not there is
+	 * a row to be deleted.
+	 */
+	protected void checkDeleteStatus() {
+		// Disable DELETE if there are no rows in the table to delete.
+		if (tableModel.getRowCount() == 0) {
+			delete.setEnabled(false);
+		} else {
+			delete.setEnabled(true);
+		}
+	}
+
+	public void clearGui(){
+		super.clearGui();
+		clear();
+	}
+
+	/**
+	 * Clear all rows from the table.
+	 */
+	public void clear() {
+		stopTableEditing();
+		tableModel.clearData();
+	}
+
+	/**
+	 * Invoked when an action occurs. This implementation supports the add and
+	 * delete buttons.
+	 *
+	 * @param e
+	 *	the event that has occurred
+	 */
+	public void actionPerformed(ActionEvent e) {
+		String action = e.getActionCommand();
+		if (action.equals(DELETE)) {
+			deleteFile();
+		} else if (action.equals(ADD)) {
+			addFile();
+		}
+	}
+
+	/**
+	 * Remove the currently selected file from the table.
+	 */
+	protected void deleteFile() {
+		// If a table cell is being edited, we must cancel the editing before
+		// deleting the row
+		if (table.isEditing()) {
+			TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());
+			cellEditor.cancelCellEditing();
+		}
+
+		int rowSelected = table.getSelectedRow();
+		if (rowSelected >= 0) {
+			tableModel.removeRow(rowSelected);
+			tableModel.fireTableDataChanged();
+
+			// Disable DELETE if there are no rows in the table to delete.
+			if (tableModel.getRowCount() == 0) {
+				delete.setEnabled(false);
+			}
+
+			// Table still contains one or more rows, so highlight (select)
+			// the appropriate one.
+			else {
+				int rowToSelect = rowSelected;
+
+				if (rowSelected >= tableModel.getRowCount()) {
+					rowToSelect = rowSelected - 1;
+				}
+
+				table.setRowSelectionInterval(rowToSelect, rowToSelect);
+			}
+		}
+	}
+
+	/**
+	 * Add a new file row to the table.
+	 */
+	protected void addFile() {
+		// If a table cell is being edited, we should accept the current value
+		// and stop the editing before adding a new row.
+		stopTableEditing();
+
+		tableModel.addRow(makeNewFile());
+
+		// Enable DELETE (which may already be enabled, but it won't hurt)
+		delete.setEnabled(true);
+
+		// Highlight (select) the appropriate row.
+		int rowToSelect = tableModel.getRowCount() - 1;
+		table.setRowSelectionInterval(rowToSelect, rowToSelect);
+	}
+
+	/**
+	 * Create a new File object.
+	 *
+	 * @return a new File object
+	 */
+	protected Object makeNewFile() {
+		String path = "";
+		JFileChooser chooser = FileDialoger.promptToOpenFile();
+		if (chooser != null) {
+			java.io.File file = chooser.getSelectedFile();
+			if (file != null) {
+				path = file.getPath();
+			}
+		}
+		return new File(path);
+	}
+
+
+	/**
+	 * Stop any editing that is currently being done on the table. This will
+	 * save any changes that have already been made.
+	 */
+	protected void stopTableEditing() {
+		if (table.isEditing()) {
+			TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());
+			cellEditor.stopCellEditing();
+		}
+	}
+
+	/**
+	 * Initialize the table model used for the files table.
+	 */
+	protected void initializeTableModel() {
+		tableModel = new ObjectTableModel(new String[] { COLUMN_NAMES_0},
+										  File.class,
+										  new Functor[] {
+											  new Functor("getName")},  // $NON-NLS-1$
+										  new Functor[] {
+											  new Functor("setName")}, // $NON-NLS-1$
+										  new Class[] { String.class, String.class });
+	}
+
+	public static boolean testFunctors(){
+		FilesPanel instance = new FilesPanel();
+		instance.initializeTableModel();
+		return instance.tableModel.checkFunctors(null,instance.getClass());
+	}
+
+	/**
+	 * Resize the table columns to appropriate widths.
+	 *
+	 * @param _table
+	 *	the table to resize columns for
+	 */
+	protected void sizeColumns(JTable _table) {
+	}
+
+	/**
+	 * Create the main GUI panel which contains the file table.
+	 *
+	 * @return the main GUI panel
+	 */
+	private Component makeMainPanel() {
+		initializeTableModel();
+		table = new JTable(tableModel);
+		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+		if (this.background != null) {
+			table.setBackground(this.background);
+		}
+		return makeScrollPane(table);
+	}
+
+	/**
+	 * Create a panel containing the title label for the table.
+	 *
+	 * @return a panel containing the title label
+	 */
+	protected Component makeLabelPanel() {
+		JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
+		labelPanel.add(tableLabel);
+		if (this.background != null) {
+			labelPanel.setBackground(this.background);
+		}
+		return labelPanel;
+	}
+
+	/**
+	 * Create a panel containing the add and delete buttons.
+	 *
+	 * @return a GUI panel containing the buttons
+	 */
+	private JPanel makeButtonPanel() {
+		add = new JButton(JMeterUtils.getResString("add")); // $NON-NLS-1$
+		add.setActionCommand(ADD);
+		add.setEnabled(true);
+
+		delete = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$
+		delete.setActionCommand(DELETE);
+
+		checkDeleteStatus();
+
+		JPanel buttonPanel = new JPanel();
+		buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
+		if (this.background != null) {
+			buttonPanel.setBackground(this.background);
+		}
+		add.addActionListener(this);
+		delete.addActionListener(this);
+		buttonPanel.add(add);
+		buttonPanel.add(delete);
+		return buttonPanel;
+	}
+
+	/**
+	 * Initialize the components and layout of this component.
+	 */
+	private void init() {
+		JPanel p = this;
+
+		if (standalone) {
+			setLayout(new BorderLayout(0, 5));
+			setBorder(makeBorder());
+			add(makeTitlePanel(), BorderLayout.NORTH);
+			p = new JPanel();
+		}
+
+		p.setLayout(new BorderLayout());
+
+		p.add(makeLabelPanel(), BorderLayout.NORTH);
+		p.add(makeMainPanel(), BorderLayout.CENTER);
+		// Force a minimum table height of 70 pixels
+		p.add(Box.createVerticalStrut(70), BorderLayout.WEST);
+		p.add(makeButtonPanel(), BorderLayout.SOUTH);
+
+		if (standalone) {
+			add(p, BorderLayout.CENTER);
+		}
+
+		table.revalidate();
+		sizeColumns(table);
+	}
+}
Index: src/core/org/apache/jmeter/resources/messages.properties
===================================================================
--- src/core/org/apache/jmeter/resources/messages.properties	(revision 649327)
+++ src/core/org/apache/jmeter/resources/messages.properties	(working copy)
@@ -697,11 +697,11 @@
 searchtest=Search test
 second=second
 secure=Secure
-send_file=Send a File With the Request\:
+send_file=Send Files With the Request\:
 send_file_browse=Browse...
-send_file_filename_label=Filename\:
+send_file_filename_label=File Path\:
 send_file_mime_label=MIME Type\:
-send_file_param_name_label=Value for "name" attribute\:
+send_file_param_name_label=Parameter Name\:
 server=Server Name or IP\:
 servername=Servername \:
 session_argument_name=Session Argument Name
Index: src/core/org/apache/jmeter/resources/messages_tr.properties
===================================================================
--- src/core/org/apache/jmeter/resources/messages_tr.properties	(revision 649327)
+++ src/core/org/apache/jmeter/resources/messages_tr.properties	(working copy)
@@ -674,9 +674,9 @@
 secure=G\u00FCvenli
 send_file=\u0130stekle Beraber Dosya G\u00F6nder\:
 send_file_browse=G\u00F6zat...
-send_file_filename_label=Dosya ismi\:
-send_file_mime_label=MIME Tipi
-send_file_param_name_label="isim" \u00F6zniteli\u011Fi de\u011Feri\:
+send_file_filename_label=Dosya Yolu\:
+send_file_mime_label=MIME Tipi\:
+send_file_param_name_label=Parametre \u0130smi\:
 server=Sunucu \u0130smi veya IP\:
 servername=Sunucu \u0130smi \:
 session_argument_name=Oturum Arg\u00FCman\u0131 \u0130smi
Index: src/core/org/apache/jmeter/util/JMeterVersion.java
===================================================================
--- src/core/org/apache/jmeter/util/JMeterVersion.java	(revision 649327)
+++ src/core/org/apache/jmeter/util/JMeterVersion.java	(working copy)
@@ -44,7 +44,7 @@
 	 * This ensures that JMeterUtils always gets the correct
 	 * version, even if JMeterUtils is not re-compiled during the build.
 	 */
-	private static final String VERSION = "2.3.2";
+	private static final String VERSION = "2.3.20080418";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2008 The Apache Software Foundation";
 
Index: build.xml
===================================================================
--- build.xml	(revision 649327)
+++ build.xml	(working copy)
@@ -1716,6 +1716,7 @@
       <classpath>
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <fileset dir="${lib.opt}" includes="optional.jar"/>
+        <pathelement location="${build.test}"/>
         <path refid="classpath"/>
       </classpath>
   <test name="${test.case}" todir="reports"/>
@@ -1749,4 +1750,4 @@
     		revisionProperty="svn.revision"/>
     	</svn>
     </target>
-</project>
\ No newline at end of file
+</project>
Index: bin/testfiles/LoopTestPlan.jmx
===================================================================
--- bin/testfiles/LoopTestPlan.jmx	(revision 649327)
+++ bin/testfiles/LoopTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,61 +28,68 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <stringProp name="LoopController.continue_forever">true</stringProp>
           <stringProp name="LoopController.loops">5</stringProp>
-          <stringProp name="LoopController.continue_forever">true</stringProp>
         </LoopController>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -105,10 +113,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">loop-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/OnceOnlyTestPlan.jmx
===================================================================
--- bin/testfiles/OnceOnlyTestPlan.jmx	(revision 649327)
+++ bin/testfiles/OnceOnlyTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">3</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,58 +28,65 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -102,10 +110,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">once-only-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/AuthManagerTestPlan.jmx
===================================================================
--- bin/testfiles/AuthManagerTestPlan.jmx	(revision 649327)
+++ bin/testfiles/AuthManagerTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -30,83 +31,92 @@
           <collectionProp name="AuthManager.auth_list">
             <elementProp name="" elementType="Authorization">
               <stringProp name="Authorization.url">http://localhost/secret</stringProp>
+              <stringProp name="Authorization.username">kevin</stringProp>
+              <stringProp name="Authorization.password">spot</stringProp>
+              <stringProp name="Authorization.domain"></stringProp>
               <stringProp name="Authorization.realm"></stringProp>
-              <stringProp name="Authorization.domain"></stringProp>
-              <stringProp name="Authorization.password">spot</stringProp>
-              <stringProp name="Authorization.username">kevin</stringProp>
             </elementProp>
           </collectionProp>
         </AuthManager>
         <hashTree/>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">localhost</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">localhost</stringProp>
           <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage1" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/secret/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage2" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/secret/index2.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="NoSecretPage" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -130,10 +140,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">auth-manager.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/AssertionTestPlan.jmx
===================================================================
--- bin/testfiles/AssertionTestPlan.jmx	(revision 649327)
+++ bin/testfiles/AssertionTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,22 +28,24 @@
       </ThreadGroup>
       <hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree>
           <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
@@ -56,7 +59,9 @@
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -80,14 +85,14 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">assertion.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
         <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -111,10 +116,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename"></stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/GuiTest.jmx
===================================================================
--- bin/testfiles/GuiTest.jmx	(revision 649327)
+++ bin/testfiles/GuiTest.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -20,6 +20,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Components" enabled="true">
@@ -29,8 +30,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -56,7 +57,7 @@
           </ResponseAssertion>
           <hashTree/>
           <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
-            <longProp name="DurationAssertion.duration">0</longProp>
+            <stringProp name="DurationAssertion.duration">0</stringProp>
           </DurationAssertion>
           <hashTree/>
           <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
@@ -91,17 +92,18 @@
           <hashTree/>
           <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
             <intProp name="ThroughputController.style">0</intProp>
+            <boolProp name="ThroughputController.perThread">true</boolProp>
+            <intProp name="ThroughputController.maxThroughput">1</intProp>
             <FloatProperty>
+              <name>ThroughputController.percentThroughput</name>
               <value>100.0</value>
               <savedValue>0.0</savedValue>
-              <name>ThroughputController.percentThroughput</name>
             </FloatProperty>
-            <boolProp name="ThroughputController.perThread">true</boolProp>
-            <intProp name="ThroughputController.maxThroughput">1</intProp>
           </ThroughputController>
           <hashTree/>
           <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
             <stringProp name="IfController.condition">${__threadNum()} == 3</stringProp>
+            <stringProp name="IfController.evaluateAll">false</stringProp>
           </IfController>
           <hashTree/>
         </hashTree>
@@ -125,6 +127,7 @@
             <stringProp name="CounterConfig.name"></stringProp>
             <boolProp name="CounterConfig.per_user">false</boolProp>
             <stringProp name="CounterConfig.end">0</stringProp>
+            <stringProp name="CounterConfig.format"></stringProp>
           </CounterConfig>
           <hashTree/>
           <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
@@ -161,8 +164,13 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Timers" enabled="true"/>
         <hashTree>
           <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
-            <stringProp name="throughput">60</stringProp>
+            <doubleProp>
+              <name>throughput</name>
+              <value>60.0</value>
+              <savedValue>0.0</savedValue>
+            </doubleProp>
             <boolProp name="legacyMode">false</boolProp>
+            <stringProp name="calcMode">this thread only</stringProp>
           </ConstantThroughputTimer>
           <hashTree/>
           <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
@@ -183,7 +191,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Visualizers" enabled="true"/>
         <hashTree>
           <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -207,14 +217,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphAccumVisualizer" testclass="ResultCollector" testname="Graph Accum Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -238,14 +248,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -269,14 +279,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -300,14 +310,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SplineVisualizer" testclass="ResultCollector" testname="Spline Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -331,14 +341,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="StatVisualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -362,14 +372,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Table Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -393,14 +403,14 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Full Visualizer" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
             <objProp>
+              <name>saveConfig</name>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
@@ -424,10 +434,8 @@
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
-              <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
         </hashTree>
@@ -439,8 +447,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -459,6 +467,11 @@
           <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
             <stringProp name="variableNames"></stringProp>
             <stringProp name="filename"></stringProp>
+            <stringProp name="fileEncoding"></stringProp>
+            <stringProp name="delimiter">,</stringProp>
+            <boolProp name="quotedData">false</boolProp>
+            <boolProp name="recycle">true</boolProp>
+            <boolProp name="stopThread">false</boolProp>
           </CSVDataSet>
           <hashTree/>
         </hashTree>
@@ -467,8 +480,8 @@
           <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
           <hashTree/>
           <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+            <boolProp name="LoopController.continue_forever">true</boolProp>
             <stringProp name="LoopController.loops">1</stringProp>
-            <boolProp name="LoopController.continue_forever">true</boolProp>
           </LoopController>
           <hashTree/>
         </hashTree>
@@ -480,8 +493,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -493,6 +506,11 @@
           <ConfigTestElement guiclass="FtpConfigGui" testclass="ConfigTestElement" testname="FTP Config" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
+            <stringProp name="FTPSampler.localfilename"></stringProp>
+            <stringProp name="FTPSampler.inputdata"></stringProp>
+            <stringProp name="FTPSampler.binarymode">false</stringProp>
+            <stringProp name="FTPSampler.saveresponse">false</stringProp>
+            <stringProp name="FTPSampler.upload">false</stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
@@ -501,6 +519,11 @@
           <FTPSampler guiclass="FtpTestSamplerGui" testclass="FTPSampler" testname="FTP Test Sampler" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
+            <stringProp name="FTPSampler.localfilename"></stringProp>
+            <stringProp name="FTPSampler.inputdata"></stringProp>
+            <stringProp name="FTPSampler.binarymode">false</stringProp>
+            <stringProp name="FTPSampler.saveresponse">false</stringProp>
+            <stringProp name="FTPSampler.upload">false</stringProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
           </FTPSampler>
@@ -514,8 +537,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -525,13 +548,14 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
@@ -547,8 +571,8 @@
           </AuthManager>
           <hashTree/>
           <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Panel" enabled="true">
+            <collectionProp name="CookieManager.cookies"/>
             <boolProp name="CookieManager.clearEachIteration">false</boolProp>
-            <collectionProp name="CookieManager.cookies"/>
           </CookieManager>
           <hashTree/>
           <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Panel" enabled="true">
@@ -562,12 +586,12 @@
           <hashTree/>
           <ParamModifier guiclass="ParamModifierGui" testclass="ParamModifier" testname="Param Modifier" enabled="true">
             <elementProp name="ParamModifier.mask" elementType="ParamMask">
-              <longProp name="ParamModifier.upper_bound">10</longProp>
+              <stringProp name="ParamModifier.field_name"></stringProp>
               <stringProp name="ParamModifier.prefix"></stringProp>
               <longProp name="ParamModifier.lower_bound">0</longProp>
+              <longProp name="ParamModifier.upper_bound">10</longProp>
+              <longProp name="ParamModifier.increment">1</longProp>
               <stringProp name="ParamModifier.suffix"></stringProp>
-              <longProp name="ParamModifier.increment">1</longProp>
-              <stringProp name="ParamModifier.field_name"></stringProp>
             </elementProp>
           </ParamModifier>
           <hashTree/>
@@ -576,6 +600,7 @@
             <boolProp name="path_extension_no_questionmark">false</boolProp>
             <stringProp name="argument_name"></stringProp>
             <boolProp name="path_extension_no_equals">false</boolProp>
+            <boolProp name="cache_value">true</boolProp>
           </URLRewritingModifier>
           <hashTree/>
           <UserParameterModifier guiclass="UserParameterModifierGui" testclass="UserParameterModifier" testname="User Parameter Modifier" enabled="true">
@@ -586,49 +611,61 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Test Sampler" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP Sampler" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files">
+              <collectionProp name="Files.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-              <collectionProp name="Arguments.arguments"/>
-            </elementProp>
             <intProp name="HTTPSampler.port">-1</intProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
             <stringProp name="SoapSampler.URL_DATA"></stringProp>
+            <stringProp name="SoapSampler.xml_data_file"></stringProp>
+            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
+            <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
+            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           </SoapSampler>
           <hashTree/>
           <WebServiceSampler guiclass="WebServiceSamplerGui" testclass="WebServiceSampler" testname="WebService (SOAP) Request" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files">
+              <collectionProp name="Files.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="WebServiceSampler.proxy_host"></stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-              <collectionProp name="Arguments.arguments"/>
-            </elementProp>
             <stringProp name="WebServiceSampler.proxy_port"></stringProp>
-            <intProp name="HTTPSampler.port">80</intProp>
+            <stringProp name="HTTPSampler.port">80</stringProp>
             <stringProp name="WebServiceSampler.use_proxy">false</stringProp>
             <stringProp name="Soap.Action"></stringProp>
             <stringProp name="WebServiceSampler.xml_data_file"></stringProp>
@@ -638,14 +675,18 @@
             <stringProp name="WebServiceSampler.memory_cache">false</stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
+            <stringProp name="WebserviceSampler.timeout"></stringProp>
           </WebServiceSampler>
           <hashTree/>
           <AccessLogSampler guiclass="TestBeanGUI" testclass="AccessLogSampler" testname="Tomcat Access Log Sampler" enabled="true">
-            <stringProp name="AccessLogSampler.parser_class_name">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files">
+              <collectionProp name="Files.files"/>
+            </elementProp>
+            <stringProp name="AccessLogSampler.parser_class_name">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
+            <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <intProp name="HTTPSampler.port">80</intProp>
             <stringProp name="parserClassName">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
             <stringProp name="portString"></stringProp>
@@ -666,8 +707,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -677,94 +718,93 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <JavaConfig guiclass="JavaConfigGui" testclass="JavaConfig" testname="Java Config" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
+                  <stringProp name="Argument.name">SleepTime</stringProp>
+                  <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">1000</stringProp>
-                  <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
+                  <stringProp name="Argument.name">SleepMask</stringProp>
+                  <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0x3FF</stringProp>
-                  <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
           </JavaConfig>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java SleepTest" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
+                  <stringProp name="Argument.name">SleepTime</stringProp>
+                  <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">1000</stringProp>
-                  <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
+                  <stringProp name="Argument.name">SleepMask</stringProp>
+                  <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0x3FF</stringProp>
-                  <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
           </JavaSampler>
           <hashTree/>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="JavaTest" enabled="true">
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="Sleep_Time" elementType="Argument">
+                  <stringProp name="Argument.name">Sleep_Time</stringProp>
+                  <stringProp name="Argument.value">100</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">100</stringProp>
-                  <stringProp name="Argument.name">Sleep_Time</stringProp>
                 </elementProp>
                 <elementProp name="Sleep_Mask" elementType="Argument">
+                  <stringProp name="Argument.name">Sleep_Mask</stringProp>
+                  <stringProp name="Argument.value">0xFF</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">0xFF</stringProp>
-                  <stringProp name="Argument.name">Sleep_Mask</stringProp>
                 </elementProp>
                 <elementProp name="Label" elementType="Argument">
+                  <stringProp name="Argument.name">Label</stringProp>
+                  <stringProp name="Argument.value">JavaTest</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">JavaTest</stringProp>
-                  <stringProp name="Argument.name">Label</stringProp>
                 </elementProp>
                 <elementProp name="ResponseCode" elementType="Argument">
+                  <stringProp name="Argument.name">ResponseCode</stringProp>
+                  <stringProp name="Argument.value">200 (or any other number)</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">200 (or any other number)</stringProp>
-                  <stringProp name="Argument.name">ResponseCode</stringProp>
                 </elementProp>
                 <elementProp name="ResponseMessage" elementType="Argument">
+                  <stringProp name="Argument.name">ResponseMessage</stringProp>
+                  <stringProp name="Argument.value">OK (or any other text)</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">OK (or any other text)</stringProp>
-                  <stringProp name="Argument.name">ResponseMessage</stringProp>
                 </elementProp>
                 <elementProp name="Status" elementType="Argument">
+                  <stringProp name="Argument.name">Status</stringProp>
+                  <stringProp name="Argument.value">OK</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">OK</stringProp>
-                  <stringProp name="Argument.name">Status</stringProp>
                 </elementProp>
                 <elementProp name="SamplerData" elementType="Argument">
+                  <stringProp name="Argument.name">SamplerData</stringProp>
+                  <stringProp name="Argument.value">SamplerData goes here</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">SamplerData goes here</stringProp>
-                  <stringProp name="Argument.name">SamplerData</stringProp>
                 </elementProp>
                 <elementProp name="ResultData" elementType="Argument">
+                  <stringProp name="Argument.name">ResultData</stringProp>
+                  <stringProp name="Argument.value">ResultData goes here</stringProp>
                   <stringProp name="Argument.metadata">=</stringProp>
-                  <stringProp name="Argument.value">ResultData goes here</stringProp>
-                  <stringProp name="Argument.name">ResultData</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
           </JavaSampler>
           <hashTree/>
           <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
-            <stringProp name="BeanShellSampler.filename"></stringProp>
             <stringProp name="BeanShellSampler.query">ResponseCode=12;
 ResponseMessage=&quot;Buckle my shoe&quot;;
 IsSuccess=false;
@@ -772,7 +812,9 @@
 // FileName is the Script file name
 // bsh.args[1] == &quot;quick&quot;
 return &quot;This will go into the Response Data field&quot;;</stringProp>
+            <stringProp name="BeanShellSampler.filename"></stringProp>
             <stringProp name="BeanShellSampler.parameters">the quick brown fox</stringProp>
+            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
           </BeanShellSampler>
           <hashTree/>
         </hashTree>
@@ -784,8 +826,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -822,6 +864,9 @@
             <stringProp name="JDBCSampler.driver"></stringProp>
             <stringProp name="JDBCSampler.connPoolClass">org.apache.jmeter.protocol.jdbc.util.JMeter19ConnectionPool</stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
+            <stringProp name="queryType">Select Statement</stringProp>
+            <stringProp name="queryArguments"></stringProp>
+            <stringProp name="queryArgumentsTypes"></stringProp>
           </JDBCSampler>
           <hashTree/>
         </hashTree>
@@ -833,8 +878,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <intProp name="LoopController.loops">-1</intProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -844,9 +889,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="LdapConfigGui" testclass="ConfigTestElement" testname="LDAP Request Defaults" enabled="true">
-            <stringProp name="rootdn"></stringProp>
             <stringProp name="servername"></stringProp>
             <stringProp name="port"></stringProp>
+            <stringProp name="rootdn"></stringProp>
             <boolProp name="user_defined">false</boolProp>
           </ConfigTestElement>
           <hashTree/>
@@ -854,12 +899,12 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <LDAPSampler guiclass="LdapTestSamplerGui" testclass="LDAPSampler" testname="LDAP Request" enabled="true">
+            <stringProp name="servername"></stringProp>
+            <stringProp name="port"></stringProp>
             <stringProp name="rootdn"></stringProp>
-            <stringProp name="servername"></stringProp>
+            <boolProp name="user_defined">false</boolProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
-            <stringProp name="port"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
-            <boolProp name="user_defined">false</boolProp>
           </LDAPSampler>
           <hashTree/>
         </hashTree>
Index: bin/testfiles/InterleaveTestPlan2.jmx
===================================================================
--- bin/testfiles/InterleaveTestPlan2.jmx	(revision 649327)
+++ bin/testfiles/InterleaveTestPlan2.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">8</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -31,13 +32,14 @@
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path">/</stringProp>
-            <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path">/</stringProp>
           </ConfigTestElement>
           <hashTree/>
           <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
@@ -45,41 +47,45 @@
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+                <collectionProp name="Files.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="CVS Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/cvsindex.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+                <collectionProp name="Files.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
@@ -88,47 +94,53 @@
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+                <collectionProp name="Files.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
+              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+                <collectionProp name="Arguments.arguments"/>
+              </elementProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
+              <stringProp name="HTTPSampler.port"></stringProp>
+              <stringProp name="HTTPSampler.protocol">http</stringProp>
+              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
               <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
+              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-              <stringProp name="HTTPSampler.protocol">http</stringProp>
-              <boolProp name="HTTPSampler.image_parser">false</boolProp>
-              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-                <collectionProp name="Arguments.arguments"/>
+              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+              <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+                <collectionProp name="Files.files"/>
               </elementProp>
-              <stringProp name="HTTPSampler.port"></stringProp>
-              <stringProp name="HTTPSampler.mimetype"></stringProp>
-              <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
-              <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -152,10 +164,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test2.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/HeaderManagerTestPlan.jmx
===================================================================
--- bin/testfiles/HeaderManagerTestPlan.jmx	(revision 649327)
+++ bin/testfiles/HeaderManagerTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -29,33 +30,37 @@
         <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
           <collectionProp name="HeaderManager.headers">
             <elementProp name="User-Agent" elementType="Header">
+              <stringProp name="Header.name">User-Agent</stringProp>
               <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 5.5; Windows 98)</stringProp>
-              <stringProp name="Header.name">User-Agent</stringProp>
             </elementProp>
           </collectionProp>
         </HeaderManager>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+            <collectionProp name="Arguments.arguments"/>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">http</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-          <stringProp name="HTTPSampler.protocol">http</stringProp>
-          <boolProp name="HTTPSampler.image_parser">false</boolProp>
-          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-            <collectionProp name="Arguments.arguments"/>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+            <collectionProp name="Files.files"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.mimetype"></stringProp>
-          <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
-          <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -79,10 +84,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">header-manager.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/Modification Manager.jmx
===================================================================
--- bin/testfiles/Modification Manager.jmx	(revision 649327)
+++ bin/testfiles/Modification Manager.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Modification Manager" enabled="true"/>
@@ -16,15 +17,9 @@
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Web Testing" enabled="true">
-            <stringProp name="HTTPSampler.path">/xdx/admin/inspect_job.jsp</stringProp>
-            <stringProp name="HTTPSampler.method">GET</stringProp>
-            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
-                <elementProp name="" elementType="HTTPArgument">
+                <elementProp name="request.job_id" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">.*</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
@@ -33,7 +28,7 @@
                   <stringProp name="HTTPArgument.encoded_name">request.job_id</stringProp>
                   <stringProp name="HTTPArgument.encoded_value">.*</stringProp>
                 </elementProp>
-                <elementProp name="" elementType="HTTPArgument">
+                <elementProp name="request.action1" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">opjobadmin.action.inspect</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
@@ -44,23 +39,32 @@
                 </elementProp>
               </collectionProp>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.port">80</stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path">/xdx/admin/inspect_job.jsp</stringProp>
+            <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
+            </elementProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain">13.231.197.158</stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port">80</stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain">13.231.197.158</stringProp>
+            <stringProp name="HTTPSampler.port">80</stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
Index: bin/testfiles/InterleaveTestPlan.jmx
===================================================================
--- bin/testfiles/InterleaveTestPlan.jmx	(revision 649327)
+++ bin/testfiles/InterleaveTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">5</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -31,75 +32,84 @@
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-            <stringProp name="HTTPSampler.path"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+            <stringProp name="HTTPSampler.path"></stringProp>
           </ConfigTestElement>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Gump Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/gump</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -123,10 +133,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/testfiles/SimpleTestPlan.jmx
===================================================================
--- bin/testfiles/SimpleTestPlan.jmx	(revision 649327)
+++ bin/testfiles/SimpleTestPlan.jmx	(working copy)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="1.8">
+<jmeterTestPlan version="1.2" properties="2.0">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TestPlan" enabled="true">
       <collectionProp name="TestPlan.thread_groups"/>
@@ -9,6 +9,7 @@
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
@@ -18,8 +19,8 @@
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="LoopController" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
           <stringProp name="LoopController.loops">1</stringProp>
-          <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
@@ -27,99 +28,110 @@
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
-          <stringProp name="HTTPSampler.path">/</stringProp>
-          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
-          <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/</stringProp>
         </ConfigTestElement>
         <hashTree/>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ant Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/ant/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/ant/antnews.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log4J Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/log4j/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="History Page" enabled="true">
+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
+              <collectionProp name="Arguments.arguments"/>
+            </elementProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
+            <stringProp name="HTTPSampler.protocol">http</stringProp>
+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
             <stringProp name="HTTPSampler.path">/log4j/docs/history.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
+            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
-            <stringProp name="HTTPSampler.protocol">http</stringProp>
-            <boolProp name="HTTPSampler.image_parser">false</boolProp>
-            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
-            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments"/>
+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+            <elementProp name="HTTPsampler.Files" elementType="Files" guiclass="HTTPFilesPanel" testclass="Files" enabled="true">
+              <collectionProp name="Files.files"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
-            <stringProp name="HTTPSampler.mimetype"></stringProp>
-            <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
-            <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
-            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
+            <name>saveConfig</name>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
@@ -143,10 +155,8 @@
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
-            <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">simple-test.dat</stringProp>
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
Index: bin/saveservice.properties
===================================================================
--- bin/saveservice.properties	(revision 649327)
+++ bin/saveservice.properties	(working copy)
@@ -59,6 +59,9 @@
 Argument=org.apache.jmeter.config.Argument
 Arguments=org.apache.jmeter.config.Arguments
 ArgumentsPanel=org.apache.jmeter.config.gui.ArgumentsPanel
+File=org.apache.jmeter.config.File
+Files=org.apache.jmeter.config.Files
+FilesPanel=org.apache.jmeter.config.gui.FilesPanel
 AssertionGui=org.apache.jmeter.assertions.gui.AssertionGui
 AssertionVisualizer=org.apache.jmeter.visualizers.AssertionVisualizer
 AuthManager=org.apache.jmeter.protocol.http.control.AuthManager
@@ -113,6 +116,8 @@
 HTMLReportWriterGui=org.apache.jmeter.report.writers.gui.HTMLReportWriterGui
 HTTPArgument=org.apache.jmeter.protocol.http.util.HTTPArgument
 HTTPArgumentsPanel=org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel
+HTTPFile=org.apache.jmeter.protocol.http.util.HTTPFile
+HTTPFilesPanel=org.apache.jmeter.protocol.http.gui.HTTPFilesPanel
 HttpDefaultsGui=org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui
 HttpGenericSampler=org.apache.jmeter.protocol.http.sampler.HttpGenericSampler
 HttpGenericSamplerGui=org.apache.jmeter.protocol.http.control.gui.HttpGenericSamplerGui
