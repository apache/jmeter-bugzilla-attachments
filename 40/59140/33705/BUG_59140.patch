Index: bin/jmeter.properties
===================================================================
--- bin/jmeter.properties	(revision 1736564)
+++ bin/jmeter.properties	(working copy)
@@ -703,9 +703,11 @@
 #---------------------------------------------------------------------------
 
 # Space-separated list of parser groups
-HTTPResponse.parsers=htmlParser wmlParser
+HTTPResponse.parsers=htmlParser cssParser wmlParser
 # for each parser, there should be a parser.types and a parser.className property
 
+cssParser.className=org.apache.jmeter.protocol.http.parser.CssParser
+cssParser.types=text/css
 #---------------------------------------------------------------------------
 # HTML Parser configuration
 #---------------------------------------------------------------------------
Index: build.properties
===================================================================
--- build.properties	(revision 1736323)
+++ build.properties	(working copy)
@@ -264,6 +264,16 @@
 mongo-java-driver.loc       = ${maven2.repo}/org/mongodb/mongo-java-driver/${mongo-java-driver.version}
 mongo-java-driver.md5       = 90647a53231eb75715fda30759ff4ff7
 
+ph-css.version              = 4.1.0
+ph-css.jar                  = ph-css-${ph-css.version}.jar
+ph-css.loc                  = ${maven2.repo}/com/helger/ph-css/${ph-css.version}
+ph-css.md5                  = c8913e7877b389c08e85269587217914
+
+ph-commons.version          = 6.2.4
+ph-commons.jar              = ph-commons-${ph-commons.version}.jar
+ph-commons.loc              = ${maven2.repo}/com/helger/ph-commons/${ph-commons.version}
+ph-commons.md5              = 344fc45ad36dd7f8ddc98141afad0cfe
+
 rsyntaxtextarea.version     = 2.5.8
 rsyntaxtextarea.jar         = rsyntaxtextarea-${rsyntaxtextarea.version}.jar
 rsyntaxtextarea.loc         = ${maven2.repo}/com/fifesoft/rsyntaxtextarea/${rsyntaxtextarea.version}
Index: build.xml
===================================================================
--- build.xml	(revision 1735869)
+++ build.xml	(working copy)
@@ -401,6 +401,8 @@
     <include name="${lib.dir}/${junit.jar}"/>
     <include name="${lib.dir}/${logkit.jar}"/>
     <include name="${lib.dir}/${mongo-java-driver.jar}"/>
+  	<include name="${lib.dir}/${ph-css.jar}"/>
+  	<include name="${lib.dir}/${ph-commons.jar}"/>
     <include name="${lib.dir}/${rsyntaxtextarea.jar}"/>
     <include name="${lib.dir}/${serializer.jar}"/>
     <include name="${lib.dir}/${slf4j-api.jar}"/>
@@ -475,6 +477,8 @@
     <pathelement location="${lib.dir}/${junit.jar}"/>
     <pathelement location="${lib.dir}/${logkit.jar}"/>
     <pathelement location="${lib.dir}/${mongo-java-driver.jar}"/>
+  	<pathelement location="${lib.dir}/${ph-css.jar}"/>
+  	<pathelement location="${lib.dir}/${ph-commons.jar}"/>
     <pathelement location="${lib.dir}/${rsyntaxtextarea.jar}"/>
     <pathelement location="${lib.dir}/${serializer.jar}"/>
     <pathelement location="${lib.dir}/${slf4j-api.jar}"/>
@@ -2896,6 +2900,8 @@
         <process_jarfile jarname="junit"/>
         <process_jarfile jarname="logkit"/>
         <process_jarfile jarname="mongo-java-driver"/>
+    	<process_jarfile jarname="ph-css" />
+    	<process_jarfile jarname="ph-commons" />
         <process_jarfile jarname="rsyntaxtextarea"/>
         <process_jarfile jarname="serializer"/>
         <process_jarfile jarname="slf4j-api"/>
Index: res/maven/ApacheJMeter_parent.pom
===================================================================
--- res/maven/ApacheJMeter_parent.pom	(revision 1736323)
+++ res/maven/ApacheJMeter_parent.pom	(working copy)
@@ -93,6 +93,8 @@
       <junit.version>4.12</junit.version>
       <logkit.version>2.0</logkit.version>
       <mongo-java-driver.version>2.11.3</mongo-java-driver.version>
+      <ph-css.version>4.1.0</ph-css.version>
+      <ph-commons.version>6.2.4</ph-commons.version>
       <rsyntaxtextarea.version>2.5.8</rsyntaxtextarea.version>
       <slf4j-api.version>1.7.13</slf4j-api.version>
       <slf4j-nop.version>1.7.13</slf4j-nop.version>
@@ -366,6 +368,16 @@
         <version>${mongo-java-driver.version}</version>
       </dependency>
       <dependency>
+        <groupId>com.helger</groupId>
+        <artifactId>ph-css</artifactId>
+        <version>${ph-css.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>com.helger</groupId>
+        <artifactId>ph-commons</artifactId>
+        <version>${ph-commons.version}</version>
+      </dependency>
+      <dependency>
         <groupId>com.fifesoft</groupId>
         <artifactId>rsyntaxtextarea</artifactId>
         <version>${rsyntaxtextarea.version}</version>
Index: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java	(revision 0)
+++ src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java	(revision 0)
@@ -0,0 +1,90 @@
+/**
+ * 
+ */
+package org.apache.jmeter.protocol.http.parser;
+
+import java.net.URL;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
+
+import com.helger.css.ECSSVersion;
+import com.helger.css.decl.CSSDeclaration;
+import com.helger.css.decl.CSSExpressionMemberTermURI;
+import com.helger.css.decl.CSSImportRule;
+import com.helger.css.decl.CascadingStyleSheet;
+import com.helger.css.decl.ICSSTopLevelRule;
+import com.helger.css.decl.visit.CSSVisitor;
+import com.helger.css.decl.visit.DefaultCSSUrlVisitor;
+import com.helger.css.reader.CSSReader;
+
+/**
+ * @since 3.0
+ */
+public class CssParser implements LinkExtractorParser {
+    private static final Logger LOG = LoggingManager.getLoggerForClass();
+
+    /**
+     * 
+     */
+    public CssParser() {
+    }
+
+    /**
+     * 
+     * @see
+     * org.apache.jmeter.protocol.http.parser.LinkExtractorParser#getEmbeddedResourceURLs
+     * (java.lang.String, byte[], java.net.URL,
+     * org.apache.jmeter.protocol.http.parser.URLCollection, java.lang.String)
+     */
+    @Override
+    public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data,
+            final URL baseUrl, String encoding) throws LinkExtractorParseException {
+        try {
+            String cssContent = new String(data, encoding);
+            final CascadingStyleSheet aCSS = CSSReader.readFromString(
+                    cssContent, 
+                    Charset.forName(encoding),
+                    ECSSVersion.CSS30);
+            final List<URLString> list = new ArrayList<URLString>();
+            final URLCollection urlCollection = new URLCollection(list);
+            CSSVisitor.visitCSSUrl(aCSS, new DefaultCSSUrlVisitor() {
+                @Override
+                public void onImport(final CSSImportRule importRule) {
+                    urlCollection.addURL(importRule.getLocationString(), 
+                                baseUrl);
+                }
+                // Call for URLs outside of URLs
+                @Override
+                public void onUrlDeclaration(
+                        final ICSSTopLevelRule aTopLevelRule,
+                        final CSSDeclaration aDeclaration,
+                        final CSSExpressionMemberTermURI aURITerm) {
+                    urlCollection.addURL(aURITerm.getURIString(),
+                            baseUrl);
+                }
+            });
+            if(LOG.isDebugEnabled()) {
+                StringBuilder builder = new StringBuilder();
+                for (Iterator iterator = urlCollection.iterator(); iterator.hasNext();) {
+                    URL urlString = (URL) iterator.next();
+                    builder.append(urlString).append(",");
+                }
+                LOG.debug("Parsed:"+baseUrl+", got:"+builder.toString());
+            }
+            return urlCollection.iterator();
+        } catch (Exception e) {
+            throw new LinkExtractorParseException(e);
+        }
+    }
+
+    @Override
+    public boolean isReusable() {
+        return true;
+    }
+
+}
