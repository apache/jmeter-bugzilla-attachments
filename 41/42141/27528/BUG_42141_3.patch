Index: bin/jmeter.properties
===================================================================
--- bin/jmeter.properties	(revision 1172147)
+++ bin/jmeter.properties	(working copy)
@@ -118,6 +118,10 @@
 # These elements are deprecated: HTML Parameter Mask,HTTP User Parameter Modifier
 not_in_menu=HTML Parameter Mask,HTTP User Parameter Modifier
 
+#Will Save As menu sanitize file name (defaults to true), 
+# ie remove non ascii characters and some OS forbidden chars
+#jmeter.saveas.sanitize=true
+
 #---------------------------------------------------------------------------
 # Remote hosts and RMI configuration
 #---------------------------------------------------------------------------
Index: src/core/org/apache/jmeter/gui/action/Save.java
===================================================================
--- src/core/org/apache/jmeter/gui/action/Save.java	(revision 1172239)
+++ src/core/org/apache/jmeter/gui/action/Save.java	(working copy)
@@ -21,6 +21,8 @@
 import java.awt.event.ActionEvent;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -30,6 +32,7 @@
 import javax.swing.JOptionPane;
 
 import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
@@ -49,6 +52,9 @@
  * Save (Selection) As
  */
 public class Save implements Command {
+    private static final boolean SANITIZE = 
+        JMeterUtils.getPropDefault("jmeter.saveas.sanitize", true); // $NON-NLS-1$ // default value: true
+    
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     public static final String JMX_FILE_EXTENSION = ".jmx"; // $NON-NLS-1$
@@ -96,8 +102,9 @@
 
         String updateFile = GuiPackage.getInstance().getTestPlanFile();
         if (!ActionNames.SAVE.equals(e.getActionCommand()) || updateFile == null) {
-            JFileChooser chooser = FileDialoger.promptToSaveFile(GuiPackage.getInstance().getTreeListener()
-                    .getCurrentNode().getName()
+            JFileChooser chooser = FileDialoger.promptToSaveFile(
+                    removeForbiddenChars(GuiPackage.getInstance().getTreeListener()
+                    .getCurrentNode().getName())
                     + JMX_FILE_EXTENSION);
             if (chooser == null) {
                 return;
@@ -152,6 +159,34 @@
         GuiPackage.getInstance().updateCurrentGui();
     }
 
+	/**
+	 * Remove OS related chars and Non ASCII characters BUG 42141
+	 */
+	private static String removeForbiddenChars(String name) {
+	    if(!SANITIZE) {
+	       return name;
+	    }
+        String[] forbiddenChars = new String[] {
+                "'", "\"", "<", ">", "|", " ",
+                "\\", "/", "?", "!", "&", ";", ",", ".", ":", "=", "+", "(",
+				")", "{", "}", "[", "]", "@", "#", "%", "^", "$", "*" };
+        String[] replacementChars = new String[forbiddenChars.length];
+        Arrays.fill(replacementChars, "");
+        String escapedOsSeparators = StringUtils.replaceEachRepeatedly(name,
+                forbiddenChars, replacementChars);
+        // TODO When only JDK6 is supported use Normalizer.normalize(text,
+        // Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
+        StringBuilder builder = new StringBuilder();
+        char[] charArray = escapedOsSeparators.toCharArray();
+        for (int i = 0; i < charArray.length; i++) {
+            String charAsString = String.valueOf(new char[] { charArray[i] });
+            if (StringUtils.isAsciiPrintable(charAsString)) {
+                builder.append(charAsString);
+            }
+        }
+        return builder.toString();
+    }
+    
     // package protected to allow access from test code
     void convertSubTree(HashTree tree) {
         Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
