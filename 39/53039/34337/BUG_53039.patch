Index: src/components/org/apache/jmeter/assertions/SizeAssertion.java
===================================================================
--- src/components/org/apache/jmeter/assertions/SizeAssertion.java	(revision 1763872)
+++ src/components/org/apache/jmeter/assertions/SizeAssertion.java	(working copy)
@@ -79,7 +79,7 @@
             String variableName = getVariableName();
             String value = getThreadContext().getVariables().get(variableName);
             try {
-                resultSize = Integer.parseInt(value);
+                resultSize = Long.parseLong(value);
             } catch (NumberFormatException e) {
                 result.setFailure(true);
                 result.setFailureMessage("Error parsing variable name: "+variableName+" value: "+value);
Index: src/core/org/apache/jmeter/samplers/SampleResult.java
===================================================================
--- src/core/org/apache/jmeter/samplers/SampleResult.java	(revision 1763872)
+++ src/core/org/apache/jmeter/samplers/SampleResult.java	(working copy)
@@ -210,11 +210,11 @@
 
     private int sampleCount = 1;
 
-    private int bytes = 0; // Allows override of sample size in case sampler does not want to store all the data
+    private long bytes = 0; // Allows override of sample size in case sampler does not want to store all the data
     
     private int headersSize = 0;
     
-    private int bodySize = 0;
+    private long bodySize = 0;
 
     /** Currently active threads in this thread group */
     private volatile int groupThreads = 0;
@@ -1190,18 +1190,32 @@
      * @param length
      *            the number of bytes of the response data for this sample
      */
-    public void setBytes(int length) {
+    public void setBytes(long length) {
         bytes = length;
     }
+    
+    /**
+     * In the event the sampler does want to pass back the actual contents, we
+     * still want to calculate the throughput. The bytes are the bytes of the
+     * response data.
+     *
+     * @param length
+     *            the number of bytes of the response data for this sample
+     * @deprecated use setBytes(long)
+     */
+    @Deprecated
+    public void setBytes(int length) {
+        setBytes((long) length);
+    }
 
     /**
      * return the bytes returned by the response.
      *
      * @return byte count
      */
-    public int getBytes() {
+    public long getBytes() {
         if (GETBYTES_NETWORK_SIZE) {
-            int tmpSum = this.getHeadersSize() + this.getBodySize();
+            long tmpSum = this.getHeadersSize() + this.getBodySize();
             return tmpSum == 0 ? bytes : tmpSum;
         } else if (GETBYTES_HEADERS_SIZE) {
             return this.getHeadersSize();
@@ -1364,14 +1378,14 @@
     /**
      * @return the body size in bytes
      */
-    public int getBodySize() {
+    public long getBodySize() {
         return bodySize == 0 ? responseData.length : bodySize;
     }
 
     /**
      * @param bodySize the body size to set
      */
-    public void setBodySize(int bodySize) {
+    public void setBodySize(long bodySize) {
         this.bodySize = bodySize;
     }
 
Index: src/core/org/apache/jmeter/save/CSVSaveService.java
===================================================================
--- src/core/org/apache/jmeter/save/CSVSaveService.java	(revision 1763872)
+++ src/core/org/apache/jmeter/save/CSVSaveService.java	(working copy)
@@ -298,7 +298,7 @@
             if (saveConfig.saveBytes()) {
                 field = CSV_BYTES;
                 text = parts[i++];
-                result.setBytes(Integer.parseInt(text));
+                result.setBytes(Long.parseLong(text));
             }
 
             if (saveConfig.saveThreadCounts()) {
Index: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
===================================================================
--- src/core/org/apache/jmeter/save/converters/SampleResultConverter.java	(revision 1763872)
+++ src/core/org/apache/jmeter/save/converters/SampleResultConverter.java	(working copy)
@@ -456,7 +456,7 @@
         File in = new File(resultFileName);
         try (FileInputStream fis = new FileInputStream(in);
                 BufferedInputStream bis = new BufferedInputStream(fis)){
-            ByteArrayOutputStream outstream = new ByteArrayOutputStream(res.getBytes());
+            ByteArrayOutputStream outstream = new ByteArrayOutputStream(4096);
             byte[] buffer = new byte[4096];
             int len;
             while ((len = bis.read(buffer)) > 0) {
@@ -469,7 +469,6 @@
         } 
     }
 
-
     /**
      * @param arg0 the mapper
      */
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java	(working copy)
@@ -409,6 +409,32 @@
      */
     protected byte[] readResponse(SampleResult res, InputStream instream,
             int responseContentLength) throws IOException {
+        return readResponse(res, instream, (long)responseContentLength);
+    }
+    /**
+     * Read response from the input stream, converting to MD5 digest if the
+     * useMD5 property is set.
+     * <p>
+     * For the MD5 case, the result byte count is set to the size of the
+     * original response.
+     * <p>
+     * Closes the inputStream
+     * <p>
+     * Invokes
+     * {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, int)}
+     * 
+     * @param res
+     *            sample to store information about the response into
+     * @param instream
+     *            input stream from which to read the response
+     * @param responseContentLength
+     *            expected input length or zero
+     * @return the response or the MD5 of the response
+     * @throws IOException
+     *             if reading the result fails
+     */
+    protected byte[] readResponse(SampleResult res, InputStream instream,
+            long responseContentLength) throws IOException {
         return testElement.readResponse(res, instream, responseContentLength);
     }
 
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPFileImpl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPFileImpl.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPFileImpl.java	(working copy)
@@ -26,11 +26,14 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
+import org.apache.jmeter.util.JMeterUtils;
 
 /**
  * HTTP Sampler which can read from file: URLs
  */
 public class HTTPFileImpl extends HTTPAbstractImpl {
+    private static final int MAX_BYTES_TO_STORE_PER_REQUEST =
+            JMeterUtils.getPropDefault("httpsampler.max_bytes_to_store_per_request", 10 * 1024 *1024); // $NON-NLS-1$ // default value: false
 
     protected HTTPFileImpl(HTTPSamplerBase base) {
         super(base);
@@ -51,13 +54,24 @@
         res.setSampleLabel(url.toString());
         InputStream is = null;
         res.sampleStart();
-        try {
+        int bufferSize = 4096;
+        try ( org.apache.commons.io.output.ByteArrayOutputStream bos = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize) ) {
             byte[] responseData;
             URLConnection conn = url.openConnection();
             is = conn.getInputStream();
-            responseData = IOUtils.toByteArray(is);
+            byte[] readBuffer = new byte[bufferSize];
+            int bytesReadInBuffer = 0;
+            long totalBytes = 0;
+            while ((bytesReadInBuffer = is.read(readBuffer)) > -1) {
+                if(totalBytes+bytesReadInBuffer<=MAX_BYTES_TO_STORE_PER_REQUEST) {
+                    bos.write(readBuffer, 0, bytesReadInBuffer);
+                }
+                totalBytes += bytesReadInBuffer;
+            }
+            responseData = bos.toByteArray();
             res.sampleEnd();
             res.setResponseData(responseData);
+            res.setBodySize(totalBytes);
             res.setResponseCodeOK();
             res.setResponseMessageOK();
             res.setSuccessful(true);
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java	(working copy)
@@ -285,9 +285,9 @@
                     Header responseHeader = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_ENCODING);
                     if (responseHeader!= null && HTTPConstants.ENCODING_GZIP.equals(responseHeader.getValue())) {
                         InputStream tmpInput = new GZIPInputStream(instream); // tmp inputstream needs to have a good counting
-                        res.setResponseData(readResponse(res, tmpInput, (int) httpMethod.getResponseContentLength()));                        
+                        res.setResponseData(readResponse(res, tmpInput, httpMethod.getResponseContentLength()));                        
                     } else {
-                        res.setResponseData(readResponse(res, instream, (int) httpMethod.getResponseContentLength()));
+                        res.setResponseData(readResponse(res, instream, httpMethod.getResponseContentLength()));
                     }
                 } finally {
                     JOrphanUtils.closeQuietly(instream);
@@ -328,7 +328,7 @@
 
             // record some sizes to allow HTTPSampleResult.getBytes() with different options
             if (instream != null) {
-                res.setBodySize(((CountingInputStream) instream).getCount());
+                res.setBodySize(((CountingInputStream) instream).getByteCount());
             }
             res.setHeadersSize(calculateHeadersSize(httpMethod));
             if (log.isDebugEnabled()) {
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java	(working copy)
@@ -406,7 +406,7 @@
             }
             HttpEntity entity = httpResponse.getEntity();
             if (entity != null) {
-                res.setResponseData(readResponse(res, entity.getContent(), (int) entity.getContentLength()));
+                res.setResponseData(readResponse(res, entity.getContent(), entity.getContentLength()));
             }
             
             res.sampleEnd(); // Done with the sampling proper.
@@ -437,8 +437,8 @@
               + 1 // Add \r for initial header
               + 2; // final \r\n before data
             long totalBytes = metrics.getReceivedBytesCount();
-            res.setHeadersSize((int) headerBytes);
-            res.setBodySize((int)(totalBytes - headerBytes));
+            res.setHeadersSize((int)headerBytes);
+            res.setBodySize(totalBytes - headerBytes);
             if (log.isDebugEnabled()) {
                 log.debug("ResponseHeadersSize=" + res.getHeadersSize() + " Content-Length=" + res.getBodySize()
                         + " Total=" + (res.getHeadersSize() + res.getBodySize()));
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java	(working copy)
@@ -284,7 +284,7 @@
         // N.B. this closes 'in'
         byte[] responseData = readResponse(res, in, contentLength);
         if (instream != null) {
-            res.setBodySize(((CountingInputStream) instream).getCount());
+            res.setBodySize(((CountingInputStream) instream).getByteCount());
             instream.close();
         }
         return responseData;
Index: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
===================================================================
--- src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(revision 1763872)
+++ src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java	(working copy)
@@ -189,6 +189,12 @@
 
     public static final boolean BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT = false; // The default setting to be used (i.e. historic)
 
+    private static final int MAX_BYTES_TO_STORE_PER_REQUEST =
+            JMeterUtils.getPropDefault("httpsampler.max_bytes_to_store_per_request", 10 * 1024 *1024); // $NON-NLS-1$ // default value: false
+
+    private static final int MAX_BUFFER_SIZE = 
+            JMeterUtils.getPropDefault("httpsampler.max_buffer_size", 65 * 1024); // $NON-NLS-1$
+
     private static final boolean IGNORE_FAILED_EMBEDDED_RESOURCES =
             JMeterUtils.getPropDefault("httpsampler.ignore_failed_embedded_resources", false); // $NON-NLS-1$ // default value: false
 
@@ -926,6 +932,7 @@
     private static final boolean SEPARATE_CONTAINER =
             JMeterUtils.getPropDefault("httpsampler.separate.container", true); // $NON-NLS-1$
 
+
     /**
      * Get the URL, built from its component parts.
      *
@@ -1757,7 +1764,7 @@
      * @return the response or the MD5 of the response
      * @throws IOException if reading the result fails
      */
-    public byte[] readResponse(SampleResult sampleResult, InputStream in, int length) throws IOException {
+    public byte[] readResponse(SampleResult sampleResult, InputStream in, long length) throws IOException {
         
         OutputStream w = null;
         try {
@@ -1776,34 +1783,36 @@
                 if (!knownResponseLength) {
                     bufferSize = 4 * 1024;
                 } else {
-                    bufferSize = length;
+                    bufferSize = (int) Math.min(MAX_BUFFER_SIZE, length);
                 }
             }
             
             
-            int bytesRead = 0;
-            int totalBytes = 0;
+            int bytesReadInBuffer = 0;
+            long totalBytes = 0;
             boolean first = true;
-            while ((bytesRead = in.read(readBuffer)) > -1) {
+            while ((bytesReadInBuffer = in.read(readBuffer)) > -1) {
                 if (first) {
                     sampleResult.latencyEnd();
                     first = false;
                     if(md == null) {
-                        if(knownResponseLength) {
-                            w = new DirectAccessByteArrayOutputStream(bufferSize);
+                        if(!knownResponseLength) {
+                            w = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize);
                         }
                         else {
-                            w = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize);
+                            w = new DirectAccessByteArrayOutputStream(bufferSize);
                         }
                     }
                 }
                 
                 if (md == null) {
-                    w.write(readBuffer, 0, bytesRead);
+                    if(totalBytes+bytesReadInBuffer<=MAX_BYTES_TO_STORE_PER_REQUEST) {
+                        w.write(readBuffer, 0, bytesReadInBuffer);
+                    } 
                 } else {
-                    md.update(readBuffer, 0, bytesRead);
-                    totalBytes += bytesRead;
+                    md.update(readBuffer, 0, bytesReadInBuffer);
                 }
+                totalBytes += bytesReadInBuffer;
             }
             
             if (first) { // Bug 46838 - if there was no data, still need to set latency
@@ -1811,13 +1820,14 @@
                 return new byte[0];
             }
             
-            if (md != null) {
+            if (md == null) {
+                return toByteArray(w);
+            } else {
                 byte[] md5Result = md.digest();
                 sampleResult.setBytes(totalBytes);
-                return JOrphanUtils.baToHexBytes(md5Result);
+                return JOrphanUtils.baToHexBytes(md5Result);                
             }
             
-            return toByteArray(w);
         } finally {
             IOUtils.closeQuietly(in);
             IOUtils.closeQuietly(w);
