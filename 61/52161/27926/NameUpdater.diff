# This patch file was generated by NetBeans IDE
# This patch can be applied using context Tools: Apply Diff Patch action on respective folder.
# It uses platform neutral UTF-8 encoding.
# Above lines and this line are ignored by the patching process.
Index: src/core/org/apache/jmeter/util/NameUpdater.java
===================================================================
--- src/core/org/apache/jmeter/util/NameUpdater.java    (revision 1200757)
+++ src/core/org/apache/jmeter/util/NameUpdater.java    (working copy)

@@ -25,9 +25,12 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Properties;
 
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.jorphan.reflect.ClassFinder;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
@@ -53,7 +56,37 @@
         } finally {
             JOrphanUtils.closeQuietly(fis);
         }
+
+        //add additional translation rules from plugins
+        try {
+            List<String> additionalNameMapClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[]{
+                     AdditionalNameUpdaterInterface.class});
+            Iterator<String> iter = additionalNameMapClasses.iterator();
+            while (iter.hasNext()) {
+                String name = iter.next();
+                AdditionalNameUpdaterInterface c = (AdditionalNameUpdaterInterface) Class.forName(name).newInstance();
+                Properties map = c.getNameMap();
+                Iterator<String> items = map.stringPropertyNames().iterator();
+                while (items.hasNext()) {
+                    String key = items.next();
+                    if (!nameMap.contains(key)) {
+                       nameMap.put(key, map.get(key));
+                       log.info("Added additional nameMap entry: " + key);
+                    } else {
+                       log.warn("Additional nameMap entry: '" + key + "' rejected as already defined.");
     }
+                }
+            }
+        } catch (IOException e) {
+            log.error("", e);
+        } catch (ClassNotFoundException e) {
+            log.error("", e);
+        } catch (InstantiationException e) {
+            log.error("", e);
+        } catch (IllegalAccessException e) {
+            log.error("", e);
+        }
+    }
 
     public static String getCurrentName(String className) {
         if (nameMap.containsKey(className)) {
