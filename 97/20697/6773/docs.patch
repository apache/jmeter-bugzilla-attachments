Index: xdocs/usermanual/boss.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/boss.xml,v
retrieving revision 1.6
diff -u -r1.6 boss.xml
--- xdocs/usermanual/boss.xml	11 Jun 2003 15:49:30 -0000	1.6
+++ xdocs/usermanual/boss.xml	12 Jun 2003 00:55:14 -0000
@@ -84,6 +84,12 @@
 software that you have available. Remember to include the hardware/software
 configuration in your published benchmarks.
 </p>
+<p>Don't forget JMeter batch mode. This can be useful if you have a powerful server 
+that supports Java but perhaps does not have a fast graphics implementation,
+or where you need to login remotely.
+Batch mode can reduce the network traffic compared with using a remote display or client-server mode.
+The batch log file can then be loaded into JMeter on a workstation for analysis, or you can
+use CSV output and import the data into a spreadsheet.</p>
 </subsection>
 <subsection name="12.4 Tools">
 <p>The following tools will all prove useful. It is definitely worthwhile to
Index: xdocs/usermanual/build-db-test-plan.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/build-db-test-plan.xml,v
retrieving revision 1.5
diff -u -r1.5 build-db-test-plan.xml
--- xdocs/usermanual/build-db-test-plan.xml	11 Jun 2003 15:49:30 -0000	1.5
+++ xdocs/usermanual/build-db-test-plan.xml	12 Jun 2003 00:55:16 -0000
@@ -10,7 +10,7 @@
 
 <section name="7. Building a Database Test Plan" anchor="building">
 <p>In this section, you will learn how to create a basic
-<a href="build-test-plan.html">Test Plan</a> to test an database server.
+<a href="build-test-plan.html">Test Plan</a> to test a database server.
 You will create ten users that send five SQL requests to the database server.
 Also, you will tell the users to run their tests three times. So, the total number
 of requests is (10 users) x (2 requests) x (repeat 3 times) = 60 JDBC requests.
@@ -19,7 +19,7 @@
 <complink name="JDBC Request"/>, <complink name="Graph Results"/>.</p>
 
 <note>This example uses the PostgreSQL <b>org.postgresql.Driver</b> database driver.
-To use this driver, its' containing .jar file must be copied to the extension
+To use this driver, its containing .jar file must be copied to the extension
 .../lib/ directory (see <a href="get-started.html#classpath">JMeter's Classpath</a>
 for more details). Otherwise, expect a substantial amount of stack traces when
 running this test plan.</note>
Index: xdocs/usermanual/build-ftp-test-plan.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/build-ftp-test-plan.xml,v
retrieving revision 1.6
diff -u -r1.6 build-ftp-test-plan.xml
--- xdocs/usermanual/build-ftp-test-plan.xml	11 Jun 2003 15:49:30 -0000	1.6
+++ xdocs/usermanual/build-ftp-test-plan.xml	12 Jun 2003 00:55:23 -0000
@@ -122,7 +122,7 @@
 O'Reilly mSQL Java README file (ftp://ftp.oro.com/pub/msql/java/README), and the
 second is for the tutorial file (ftp://ftp.oro.com/pub/msql/java/tutorial.txt).</p>
 
-<note>JMeter sends requests in the order that you add them to the tree.</note>
+<note>JMeter sends requests in the order that they appear in the tree.</note>
 
 <p>Start by adding the first <complink name="FTP Request"/>
 to the O'Reilly Users element (Add --&gt; Sampler --&gt; FTP Request).
Index: xdocs/usermanual/build-web-test-plan.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/build-web-test-plan.xml,v
retrieving revision 1.15
diff -u -r1.15 build-web-test-plan.xml
--- xdocs/usermanual/build-web-test-plan.xml	11 Jun 2003 15:49:30 -0000	1.15
+++ xdocs/usermanual/build-web-test-plan.xml	12 Jun 2003 00:55:25 -0000
@@ -139,8 +139,7 @@
 Jakarta home page (http://jakarta.apache.org/), and the second one is for the
 Project Guidelines page (http://jakarta.apache.org/site/guidelines.html).</p>
 
-<note>JMeter sends requests in the order that you add them
-to the tree.</note>
+<note>JMeter sends requests in the order that they appear in the tree.</note>
 
 <p>Start by adding the first <complink name="HTTP Request"/>
 to the Jakarta Users element (Add --&gt; Sampler --&gt; HTTP Request).
Index: xdocs/usermanual/component_reference.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/component_reference.xml,v
retrieving revision 1.43
diff -u -r1.43 component_reference.xml
--- xdocs/usermanual/component_reference.xml	11 Jun 2003 19:01:32 -0000	1.43
+++ xdocs/usermanual/component_reference.xml	12 Jun 2003 00:55:36 -0000
@@ -1,5 +1,5 @@
 <?xml version="1.0"?>
-<document index="yes" prev="boss.html" next="functions.html" date="$Date: 2003/06/11 19:01:32 $">
+<document index="yes" index-level-2="yes" colbreak="13.5" prev="boss.html" next="functions.html" date="$Date: 2003/06/11 19:01:32 $">
 
 <properties>
   <title>User's Manual: Component Reference</title>
@@ -298,7 +298,7 @@
 <tr valign="top"><td>2</td><td>Log Page</td></tr>
 <tr valign="top"><td>3</td><td>Gump Page</td></tr>
 <tr valign="top"><td>2</td><td>Log Page</td></tr>
-<tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request, which is the News Page.</td></tr>
+<tr valign="top"><td>4</td><td>Because there are no more requests in the controller,<br/> JMeter starts over and sends the first HTTP Request, which is the News Page.</td></tr>
 <tr valign="top"><td>2</td><td>Log Page</td></tr>
 <tr valign="top"><td>5</td><td>FAQ Page</td></tr>
 <tr valign="top"><td>2</td><td>Log Page</td></tr>
@@ -506,10 +506,10 @@
 <p>
 <code>
 <pre>
-    timeStamp|time|label|responseCode|threadName|dataType|success|failureMessage
-    02/06/03 08:21:42|1187|Backoffice Home|200|Thread Group-1|text|true|
-    02/06/03 08:21:42|47|Login BO|200|Thread Group-1|text|false|Test Failed, expected to contain: password
-    etc.
+timeStamp|time|label|responseCode|threadName|dataType|success|failureMessage
+02/06/03 08:21:42|1187|Backoffice Home|200|Thread Group-1|text|true|
+02/06/03 08:21:42|47|Login BO|200|Thread Group-1|text|false|Test Failed, 
+	expected to contain: password etc.
 </pre>
 </code></p>
 <p>
@@ -1435,13 +1435,58 @@
         	(The path can be relative to the JMeter launch directory)
         </property>
         <property name="Second argument" required="No">
-        	A reference name - refName - for reusing the value created by this function.
-			Stored values are of the form ${refName}.
+A reference name - refName - for reusing the value created by this function. Stored values are of the form ${refName}.
         </property>
 </properties>
 <p>The file name parameter is resolved when the file is opened or re-opened.</p>
 <p>The reference name parameter (if supplied) is resolved every time the function is executed.</p>
 </component>
+
+<component index="13.10.6" name="__machineName">
+<description><p>The machineName function returns the local host name</p></description>
+
+<properties>
+        <property name="Name of function" required="Yes">A reference name for reusing the value
+                computed by this function.</property>
+</properties>
+</component>
+
+<component index="13.10.7" name="__javaScript">
+<description><p>The javaScript function executes a piece of JavaScript (not Java!) code and returns its value</p>
+	</description>
+
+<properties>
+        <property name="Expression" required="Yes">The JavaScript expression to be executed.</property>
+        <property name="Name of function" required="Yes">A reference name for reusing the value
+                computed by this function.</property>
+</properties>
+</component>
+
+<component index="13.10.8" name="__Random">
+<description><p>The machineName function returns the local host name</p></description>
+
+<properties>
+        <property name="Minimum value" required="Yes">A number</property>
+        <property name="Maximum value" required="Yes">A bigger number</property>
+        <property name="Name of function" required="Yes">A reference name for reusing the value
+                computed by this function.</property>
+</properties>
+</component>
+
+<component index="13.10.8" name="__CSVFile">
+<description><p>The CSVFile function returns a string from a CSV file (c.f. <a href="#_StringFromFile">StringFromFile</a>)</p>
+	<p>NOTE: A single instance of the file is opened and used for all threads.</p></description>
+
+<properties>
+        <property name="File Name" required="Yes">The file to read from</property>
+        <property name="Column number" required="Yes">
+        	The column number in the file.
+        	0 = first column, 1 = second etc.
+        	"next" - go to next line of file.
+        	</property>
+</properties>
+</component>
+
 </section>
 </body>
 </document>
Index: xdocs/usermanual/functions.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/functions.xml,v
retrieving revision 1.3
diff -u -r1.3 functions.xml
--- xdocs/usermanual/functions.xml	11 Jun 2003 15:49:30 -0000	1.3
+++ xdocs/usermanual/functions.xml	12 Jun 2003 00:55:36 -0000
@@ -22,14 +22,14 @@
 
 <subsection name="14.1 What can functions do" anchor="what_can_do">
 <p>There are two kinds of functions: user-defined static values, and built-in functions.<br/>
-User-defined static values allows the user to define variables to be replaced with their static value when
+User-defined static values allow the user to define variables to be replaced with their static value when
 a test tree is compiled and submitted to be run.  This replacement happens once at the beginning of the test
 run.  This could be used to replace the DOMAIN field of all HTTP requests, for example - making it a simple 
 matter to change a test to target a different server with the same test.
 </p>
 <p>This type of replacement is possible without functions, but was less convenient and less intuitive.
 It required users to create default config elements that would fill in blank values of Samplers.  User-defined
-functions allows one to replace only part of any given value, not just filling in blank values.</p>
+functions allow one to replace only part of any given value, not just filling in blank values.</p>
 <p>
 With built-in functions users can compute new values at run-time based on previous response data, which
 thread the function is in, the time, and many other sources.  These values are generated fresh for every
Index: xdocs/usermanual/get-started.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/get-started.xml,v
retrieving revision 1.17
diff -u -r1.17 get-started.xml
--- xdocs/usermanual/get-started.xml	11 Jun 2003 15:49:30 -0000	1.17
+++ xdocs/usermanual/get-started.xml	12 Jun 2003 00:55:38 -0000
@@ -154,7 +154,19 @@
 <p>-D[prop_name]=[value] - defines a java system property value.</p>
 <p>-J[prop name]=[value] - overrides a JMeter property.</p>
 <p>-L[category]=[priority] - overrides a logging setting, setting a particular category to the given priority level.</p>
-<p><b>Example</b>: jmeter -Duser.dir=/home/mstover/jmeter_stuff -Jremote_hosts=127.0.0.1 -Ljmeter.engine=DEBUG</p>
+<p>The -L flag can also be used without the category name to set the root logging level.</p>
+	<p><b>Examples</b>:
+<pre>
+jmeter -Duser.dir=/home/mstover/jmeter_stuff \
+    -Jremote_hosts=127.0.0.1 -Ljmeter.engine=DEBUG
+
+jmeter -LDEBUG</pre>
+</p>
+<p>
+<b>N.B.<br/>
+	The command line properties are processed early in startup, but after the logging system has been set up.
+	Attempts to use the -J flag to update log_level or log_file properties will have no effect.</b>
+	</p>
 </subsection>
 </section>
 
Index: xdocs/usermanual/remote-test.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/remote-test.xml,v
retrieving revision 1.11
diff -u -r1.11 remote-test.xml
--- xdocs/usermanual/remote-test.xml	11 Jun 2003 19:01:32 -0000	1.11
+++ xdocs/usermanual/remote-test.xml	12 Jun 2003 00:55:39 -0000
@@ -41,6 +41,8 @@
 <p><b>Step 2: Add the server IP to your client's Properties File</b></p>
 <p>Edit the properties file <i>on the controlling JMeter machine</i>.  In /bin/jmeter.properties, find the property named, "remote_hosts", and   
 add the value of your running JMeter server's IP address.  Multiple such servers can be added, comma-delimited.</p>
+<p>Note that you can also use the -J <a href="get-started.html#override">command line option</a> to specify the remote host(s) to use.
+	E.g. jmeter -Jremote_hosts=host1,127.0.0.1,host2</p>
 
 <p><b>Step 3: Start the JMeter Client</b></p>
 <p>Now you are ready to start the controlling JMeter client. For MS-Windows, start the client with the script "bin/jmeter.bat".  For UNIX, 
@@ -49,7 +51,6 @@
 normal JMeter start and stop menu items.</p>
 <p><img src="../images/screenshots/remote/run-menu00.gif" width="232" height="156"></img>
 <br>Figure 1 - Run Menu</br></p>
-
 <subsection name="10.1 Doing it Manually" anchor="detail_instructions">
 <p>In some cases, the jmeter-server script may not work for you (if you are using an OS platform not anticipated by the JMeter developers).  Here is how to start the JMeter servers (step 1 above) with a more manual process:</p>
 <p><b>Step 1a: Start the RMI Registry</b></p>
Index: xdocs/usermanual/test_plan.xml
===================================================================
RCS file: /home/cvspublic/jakarta-jmeter/xdocs/usermanual/test_plan.xml,v
retrieving revision 1.9
diff -u -r1.9 test_plan.xml
--- xdocs/usermanual/test_plan.xml	11 Jun 2003 15:49:30 -0000	1.9
+++ xdocs/usermanual/test_plan.xml	12 Jun 2003 00:55:40 -0000
@@ -2,7 +2,7 @@
 <document prev="build-test-plan.html" next="build-web-test-plan.html" date="$Date: 2003/06/11 15:49:30 $">
 
 <properties>
-  <title>User's Manual: Thread Group</title>
+  <title>User's Manual: Elements of a Test Plan</title>
 </properties>
 
 <body>
@@ -41,6 +41,13 @@
 <p>By default, a thread group is configured to loop indefinitely through its elements.
 Alternatively, you can set the number of times the thread group will loop before ending.  If the number
 is set at one, then JMeter will execute the test only once before stopping.</p>
+
+<p>Version 1.9 introduces a test run <b>scheduler</b>. 
+	Click the checkbox at the bottom of the Thread Group panel to reveal two extra fields
+	 in which you can enter the start and end times of the run. 
+	 When the test is started, JMeter will wait if necessary until the start-time has been reached.
+	 At the end of each cycle, JMeter checks if the end-time has been reached, and if so, the run is stopped,
+	 otherwise the test is allowed to continue until the iteration limit is reached.</p>
 </subsection>
 
 <subsection name="4.2 Controllers" anchor="controllers">
@@ -66,8 +73,17 @@
 <subsection name="4.2.1 Samplers" anchor="samplers">
 
 <p>Samplers tell JMeter to send requests to a server. JMeter
-currently has four such samplers: FTP Request, HTTP Request, JDBC Request, and
-the Java object request.  Each sampler has several properties you can set.
+currently has the following samplers:
+<ul>
+	<li>FTP Request</li>
+	<li>HTTP Request</li>
+	<li>JDBC Request</li>
+	<li>Java object request</li>
+	<li>LDAP Request</li>
+	<li>SOAP/XML-RPC Request</li>
+	<li>WebService (SOAP) Request (Alpha Code)</li>
+</ul>
+Each sampler has several properties you can set.
 You can further customize a sampler by adding one or more Configuration Elements to it.
 Also, note that JMeter sends requests in the order that you add them to the tree.</p>
 
